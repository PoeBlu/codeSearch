{"ref": [{"submodule": "Creating & Reading", "name": "alpha", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Object", "name": "obj", "description": "p5.Color object or pixel array"}], "file": "src/color/creating_reading.js", "positive_questions": [], "line": 13, "syntax": "alpha(obj)", "example": ["\n<div>\n<code>\nnoStroke();\nc = color(0, 126, 255, 102);\nfill(c);\nrect(15, 15, 35, 70);\nvalue = alpha(c);  // Sets 'value' to 102\nfill(value);\nrect(50, 15, 35, 70);\n</code>\n</div>"], "description": "Extracts the alpha value from a color or pixel array."}, {"submodule": "Creating & Reading", "name": "blue", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Object", "name": "obj", "description": "p5.Color object or pixel array"}], "file": "src/color/creating_reading.js", "positive_questions": [], "line": 39, "syntax": "blue(obj)", "example": ["\n<div>\n<code>\nc = color(175, 100, 220);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nrect(15, 20, 35, 60);  // Draw left rectangle\n\nblueValue = blue(c);  // Get blue in 'c'\nprintln(blueValue);  // Prints \"220.0\"\nfill(0, 0, blueValue);  // Use 'blueValue' in new fill\nrect(50, 20, 35, 60);  // Draw right rectangle\n</code>\n</div>"], "description": "Extracts the blue value from a color or a pixel array."}, {"submodule": "Creating & Reading", "name": "brightness", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Object", "name": "color", "description": "p5.Color object"}], "file": "src/color/creating_reading.js", "positive_questions": [], "line": 66, "syntax": "brightness(color)", "example": ["\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nc = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\nvalue = brightness(c);  // Sets 'value' to 255\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"], "description": "Extracts the brightness value from a color."}, {"submodule": "Creating & Reading", "return": {"type": "Array", "description": "resulting color"}, "name": "color", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Number|String", "name": "v1", "description": "gray value or red or hue value relative to\n                                the current color range, or a color string"}, {"optional": true, "type": "Number", "name": "v2", "description": "gray value or green or saturation value\n                                relative to the current color range (or\n                                alpha value if first param is gray value)"}, {"optional": true, "type": "Number", "name": "v3", "description": "gray value or blue or brightness value\n                                relative to the current color range"}, {"optional": true, "type": "Number", "name": "alpha", "description": "alpha value relative to current color range"}], "file": "src/color/creating_reading.js", "positive_questions": [], "line": 93, "syntax": "color(v1,[v2],[v3],[alpha])", "example": ["\n<div>\n<code>\nc = color(255, 204, 0);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nrect(30, 20, 55, 55);  // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\nc = color(255, 204, 0);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nellipse(25, 25, 80, 80);  // Draw left circle\n\n// Using only one value with color()\n// generates a grayscale value.\nc = color(65);  // Update 'c' with grayscale value\nfill(c);  // Use updated 'c' as fill color\nellipse(75, 75, 80, 80);  // Draw right circle\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG & CSS colors may be used,\nc = color('magenta');\nfill(c);  // Use 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nrect(20, 20, 60, 60);  // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\n// as can hex color codes:\nc = color('#4F66A1');\nfill(c);  // Use 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nrect(20, 20, 60, 60);  // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\n// RGB and RGBA color strings are also supported:\n// these all set 'c' to the same color (solid blue)\nc = color('rgb(0,0,255)');\nc = color('rgb(0%, 0%, 100%)');\nc = color('rgba(0, 0, 255, 1)');\nc = color('rgba(0%, 0%, 100%, 1)');\nfill(c);  // Use 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nrect(20, 20, 60, 60);  // Draw rectangle\n</code>\n</div>\n\n\n<div>\n<code>\n// HSL color is also supported and can be specified\n// by value\ncolorMode(HSL)\nc = color(156, 100, 50, 1);\nfill(c);  // Use 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nrect(20, 20, 60, 60);  // Draw rectangle\n</code>\n</div>\n\n<div>\n<code>\n// or by string\nc = color('hsla(156, 100%, 50%, 1)');\nfill(c);  // Use 'c' as fill color\nnoStroke();  // Don't draw a stroke around shapes\nrect(20, 20, 60, 60);  // Draw rectangle\n</code>\n</div>\n\n\n// if switching from RGB to HSB or HSL both modes must be declared\ncolorMode(RGB, 255);  // Use RGB with scale of 0-255\nc = color(50, 55, 100);  // Create a color for 'c'\nfill(c);  // Use color variable 'c' as fill color\nrect(0, 10, 45, 80);  // Draw left rect\n\ncolorMode(HSB, 100);  // Use HSB with scale of 0-100\nc = color(50, 55, 100);  // Update 'c' with new color\nfill(c);  // Use updated 'c' as fill color\nrect(55, 10, 45, 80);  // Draw right rect\n</code>\n</div>"], "description": "Creates colors for storing in variables of the color datatype. The\nparameters are interpreted as RGB or HSB values depending on the\ncurrent colorMode(). The default mode is RGB values from 0 to 255\nand, therefore, the function call color(255, 204, 0) will return a\nbright yellow color.\n\nNote that if only one value is provided to color(), it will be interpreted\nas a grayscale value. Add a second value, and it will be used for alpha\ntransparency. When three values are specified, they are interpreted as\neither RGB or HSB values. Adding a fourth value applies alpha\ntransparency. If a single string parameter is provided it will be\ninterpreted as a CSS-compatible color string.\n\nColors are stored as Numbers or Arrays."}, {"submodule": "Creating & Reading", "name": "green", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Object", "name": "color", "description": "p5.Color object"}], "file": "src/color/creating_reading.js", "positive_questions": [], "line": 226, "syntax": "green(color)", "example": ["\n<div>\n<code>\nc = color(20, 75, 200);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nrect(15, 20, 35, 60);  // Draw left rectangle\n\ngreenValue = green(c);  // Get green in 'c'\nprintln(greenValue);  // Print \"75.0\"\nfill(0, greenValue, 0);  // Use 'greenValue' in new fill\nrect(50, 20, 35, 60);  // Draw right rectangle\n</code>\n</div>"], "description": "Extracts the green value from a color or pixel array."}, {"submodule": "Creating & Reading", "name": "hue", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Object", "name": "color", "description": "p5.Color object"}], "file": "src/color/creating_reading.js", "positive_questions": [], "line": 253, "syntax": "hue(color)", "example": ["\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nc = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\nvalue = hue(c);  // Sets 'value' to \"0\"\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"], "description": "Extracts the hue value from a color."}, {"submodule": "Creating & Reading", "return": {"type": "Array/Number", "description": "interpolated color"}, "name": "lerpColor", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Array/Number", "name": "c1", "description": "interpolate from this color"}, {"type": "Array/Number", "name": "c2", "description": "interpolate to this color"}, {"type": "Number", "name": "amt", "description": "number between 0 and 1"}], "file": "src/color/creating_reading.js", "positive_questions": [], "line": 279, "syntax": "lerpColor(c1,c2,amt)", "example": ["\n<div>\n<code>\nstroke(255);\nbackground(51);\nfrom = color(204, 102, 0);\nto = color(0, 102, 153);\ninterA = lerpColor(from, to, .33);\ninterB = lerpColor(from, to, .66);\nfill(from);\nrect(10, 20, 20, 60);\nfill(interA);\nrect(30, 20, 20, 60);\nfill(interB);\nrect(50, 20, 20, 60);\nfill(to);\nrect(70, 20, 20, 60);\n</code>\n</div>"], "description": "Calculates a color or colors between two color at a specific increment,\nusing gamma correction to blend colors in the linear RGB space.\nThe amt parameter is the amount to interpolate between the two values\nwhere 0.0 equal to the first point, 0.1 is very near the first point,\n0.5 is halfway in between, etc. An amount below 0 will be treated as 0.\nLikewise, amounts above 1 will be capped at 1. This is different from\nthe behavior of lerp(), but necessary because otherwise numbers outside\nthe range will produce strange and unexpected colors.\n\nThe regular RGB color representation stores the square root of the\ndisplayed color, not the value itself. Your monitor behaves as if it\nsquares the color values before displaying it. lerpColor first transforms\ncolors into the linear color space before blending, to correctly mix the\ncolors as two rays of light."}, {"submodule": "Creating & Reading", "name": "lightness", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Object", "name": "color", "description": "p5.Color object"}], "file": "src/color/creating_reading.js", "positive_questions": [], "line": 342, "syntax": "lightness(color)", "example": ["\n<div>\n<code>\nnoStroke();\ncolorMode(HSL);\nc = color(156, 100, 50, 1);\nfill(c);\nrect(15, 20, 35, 60);\nvalue = lightness(c);  // Sets 'value' to 50\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"], "description": "Extracts the lightness value from a color."}, {"submodule": "Creating & Reading", "name": "red", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Object", "name": "obj", "description": "p5.Color object or pixel array"}], "file": "src/color/creating_reading.js", "positive_questions": [], "line": 370, "syntax": "red(obj)", "example": ["\n<div>\n<code>\nc = color(255, 204, 0);  // Define color 'c'\nfill(c);  // Use color variable 'c' as fill color\nrect(15, 20, 35, 60);  // Draw left rectangle\n\nredValue = red(c);  // Get red in 'c'\nprintln(redValue);  // Print \"255.0\"\nfill(redValue, 0, 0);  // Use 'redValue' in new fill\nrect(50, 20, 35, 60);  // Draw right rectangle\n</code>\n</div>"], "description": "Extracts the red value from a color or pixel array."}, {"submodule": "Creating & Reading", "name": "saturation", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Object", "name": "color", "description": "p5.Color object"}], "file": "src/color/creating_reading.js", "positive_questions": [], "line": 397, "syntax": "saturation(color)", "example": ["\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 255);\nc = color(0, 126, 255);\nfill(c);\nrect(15, 20, 35, 60);\nvalue = saturation(c);  // Sets 'value' to 126\nfill(value);\nrect(50, 20, 35, 60);\n</code>\n</div>"], "description": "Extracts the saturation value from a color."}, {"submodule": "Setting", "name": "background", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Number|String|p5.Color|p5.Image", "name": "v1", "description": "gray value, red or hue value\n                                              (depending on the current\n                                              color mode), color string,\n                                              p5.Color, or p5.Image"}, {"optional": true, "type": "Number", "name": "v2", "description": "green or saturation value\n                                              (depending on the current\n                                              color mode)"}, {"optional": true, "type": "Number", "name": "v3", "description": "blue or brightness value\n                                              (depending on the current\n                                              color mode)"}, {"optional": true, "type": "Number", "name": "a", "description": "opacity of the background"}], "file": "src/color/setting.js", "positive_questions": [], "line": 26, "syntax": "background(v1,[v2],[v3],[a])", "example": ["\n<div>\n<code>\n// Grayscale integer value\nbackground(51);\n</code>\n</div>\n\n<div>\n<code>\n// R, G & B integer values\nbackground(255, 204, 0);\n</code>\n</div>\n\n<div>\n<code>\n// H, S & B integer values\ncolorMode(HSB);\nbackground(255, 204, 100);\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG/CSS color string\nbackground('red');\n</code>\n</div>\n\n<div>\n<code>\n// three-digit hexadecimal RGB notation\nbackground('#fae');\n</code>\n</div>\n\n<div>\n<code>\n// six-digit hexadecimal RGB notation\nbackground('#222222');\n</code>\n</div>\n\n<div>\n<code>\n// integer RGB notation\nbackground('rgb(0,255,0)');\n</code>\n</div>\n\n<div>\n<code>\n// integer RGBA notation\nbackground('rgba(0,255,0, 0.25)');\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGB notation\nbackground('rgb(100%,0%,10%)');\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGBA notation\nbackground('rgba(100%,0%,100%,0.5)');\n</code>\n</div>\n\n<div>\n<code>\n// p5 Color object\nbackground(color(0, 0, 255));\n</code>\n</div>"], "description": "The background() function sets the color used for the background of the\np5.js canvas. The default background is light gray. This function is\ntypically used within draw() to clear the display window at the beginning\nof each frame, but it can be used inside setup() to set the background on\nthe first frame of animation or if the background need only be set once."}, {"submodule": "Setting", "name": "clear", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "file": "src/color/setting.js", "positive_questions": [], "line": 134, "syntax": "clear()", "example": ["\n<div>\n<code>\n</code>\n</div>"], "description": "Clears the pixels within a buffer. This function only works on p5.Canvas\nobjects created with the createCanvas() function; it won't work with the\nmain display window. Unlike the main graphics context, pixels in\nadditional graphics areas created with createGraphics() can be entirely\nor partially transparent. This function clears everything to make all of\nthe pixels 100% transparent."}, {"submodule": "Setting", "name": "colorMode", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Number|Constant", "name": "mode", "description": "either RGB or HSB, corresponding to\n                              Red/Green/Blue and Hue/Saturation/Brightness"}, {"type": "Number|Constant", "name": "max1", "description": "range for the red or hue depending on the\n                              current color mode, or range for all values"}, {"type": "Number|Constant", "name": "max2", "description": "range for the green or saturation depending\n                              on the current color mode"}, {"type": "Number|Constant", "name": "max3", "description": "range for the blue or brightness depending\n                              on the current color mode"}, {"type": "Number|Constant", "name": "maxA", "description": "range for the alpha"}], "file": "src/color/setting.js", "positive_questions": [], "line": 154, "syntax": "colorMode(mode,max1,max2,max3,maxA)", "example": ["\n<div>\n<code>\nnoStroke();\ncolorMode(RGB, 100);\nfor (i = 0; i < 100; i++) {\n  for (j = 0; j < 100; j++) {\n    stroke(i, j, 0);\n    point(i, j);\n  }\n}\n</code>\n</div>\n\n<div>\n<code>\nnoStroke();\ncolorMode(HSB, 100);\nfor (i = 0; i < 100; i++) {\n  for (j = 0; j < 100; j++) {\n    stroke(i, j, 100);\n    point(i, j);\n  }\n}\n</code>\n</div>"], "description": "Changes the way p5.js interprets color data. By default, the parameters\nfor fill(), stroke(), background(), and color() are defined by values\nbetween 0 and 255 using the RGB color model. The colorMode() function is\nused to switch color systems. Regardless of color system, all value ranges\nare presumed to be 0\u2013255 unless explicitly set otherwise. That is,\nfor a standard HSB range, one would pass colorMode(HSB, 360, 100, 100, 1)."}, {"submodule": "Setting", "name": "fill", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Number|Array|String|p5.Color", "name": "v1", "description": "gray value, red or hue value\n                                           (depending on the current color\n                                           mode), or color Array, or CSS\n                                           color string"}, {"optional": true, "type": "Number", "name": "v2", "description": "green or saturation value\n                                           (depending on the current\n                                           color mode)"}, {"optional": true, "type": "Number", "name": "v3", "description": "blue or brightness value\n                                           (depending on the current\n                                           color mode)"}, {"optional": true, "type": "Number", "name": "a", "description": "opacity of the background"}], "file": "src/color/setting.js", "positive_questions": [], "line": 224, "syntax": "fill(v1,[v2],[v3],[a])", "example": ["\n<div>\n<code>\n// Grayscale integer value\nfill(51);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// R, G & B integer values\nfill(255, 204, 0);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// H, S & B integer values\ncolorMode(HSB);\nfill(255, 204, 100);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG/CSS color string\nfill('red');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// three-digit hexadecimal RGB notation\nfill('#fae');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// six-digit hexadecimal RGB notation\nfill('#222222');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGB notation\nfill('rgb(0,255,0)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGBA notation\nfill('rgba(0,255,0, 0.25)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGB notation\nfill('rgb(100%,0%,10%)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGBA notation\nfill('rgba(100%,0%,100%,0.5)');\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// p5 Color object\nfill(color(0, 0, 255));\nrect(20, 20, 60, 60);\n</code>\n</div>"], "description": "Sets the color used to fill shapes. For example, if you run\nfill(204, 102, 0), all subsequent shapes will be filled with orange. This\ncolor is either specified in terms of the RGB or HSB color depending on\nthe current colorMode(). (The default color space is RGB, with each value\nin the range from 0 to 255.) If a single string argument is provided, RGB,\nRGBA and Hex CSS color strings and all named color strings are supported.\nA p5 Color object can also be provided to set the fill color."}, {"submodule": "Setting", "name": "noFill", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "file": "src/color/setting.js", "positive_questions": [], "line": 343, "syntax": "noFill()", "example": ["\n<div>\n<code>\nrect(15, 10, 55, 55);\nnoFill();\nrect(20, 20, 60, 60);\n</code>\n</div>"], "description": "Disables filling geometry. If both noStroke() and noFill() are called,\nnothing will be drawn to the screen."}, {"submodule": "Setting", "name": "noStroke", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "file": "src/color/setting.js", "positive_questions": [], "line": 362, "syntax": "noStroke()", "example": ["\n<div>\n<code>\nnoStroke();\nrect(20, 20, 60, 60);\n</code>\n</div>"], "description": "Disables drawing the stroke (outline). If both noStroke() and noFill()\nare called, nothing will be drawn to the screen."}, {"submodule": "Setting", "name": "stroke", "negative_questions": [], "module": "Color", "class": "p5", "itemtype": "method", "params": [{"type": "Number|Array|String|p5.Color", "name": "v1", "description": "gray value, red or hue value\n                                           (depending on the current color\n                                           mode), or color Array, or CSS\n                                           color string"}, {"optional": true, "type": "Number", "name": "v2", "description": "green or saturation value\n                                           (depending on the current\n                                           color mode)"}, {"optional": true, "type": "Number", "name": "v3", "description": "blue or brightness value\n                                           (depending on the current\n                                           color mode)"}, {"optional": true, "type": "Number", "name": "a", "description": "opacity of the background"}], "file": "src/color/setting.js", "positive_questions": [], "line": 380, "syntax": "stroke(v1,[v2],[v3],[a])", "example": ["\n<div>\n<code>\n// Grayscale integer value\nstrokeWeight(4);\nstroke(51);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// R, G & B integer values\nstroke(255, 204, 0);\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// H, S & B integer values\ncolorMode(HSB);\nstrokeWeight(4);\nstroke(255, 204, 100);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// Named SVG/CSS color string\nstroke('red');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// three-digit hexadecimal RGB notation\nstroke('#fae');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// six-digit hexadecimal RGB notation\nstroke('#222222');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGB notation\nstroke('rgb(0,255,0)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// integer RGBA notation\nstroke('rgba(0,255,0,0.25)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGB notation\nstroke('rgb(100%,0%,10%)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// percentage RGBA notation\nstroke('rgba(100%,0%,100%,0.5)');\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>\n\n<div>\n<code>\n// p5 Color object\nstroke(color(0, 0, 255));\nstrokeWeight(4);\nrect(20, 20, 60, 60);\n</code>\n</div>"], "description": "Sets the color used to draw lines and borders around shapes. This color\nis either specified in terms of the RGB or HSB color depending on the\ncurrent colorMode() (the default color space is RGB, with each value in\nthe range from 0 to 255). If a single string argument is provided, RGB,\nRGBA and Hex CSS color strings and all named color strings are supported.\nA p5 Color object can also be provided to set the stroke color."}, {"submodule": "2D Primitives", "return": {"type": "Object", "description": "the p5 object"}, "name": "arc", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "a", "description": "x-coordinate of the arc's ellipse"}, {"type": "Number", "name": "b", "description": "y-coordinate of the arc's ellipse"}, {"type": "Number", "name": "c", "description": "width of the arc's ellipse by default"}, {"type": "Number", "name": "d", "description": "height of the arc's ellipse by default"}, {"type": "Number", "name": "start", "description": "angle to start the arc, specified in radians"}, {"type": "Number", "name": "stop", "description": "angle to stop the arc, specified in radians"}, {"optional": true, "type": "String", "name": "mode", "description": "optional parameter to determine the way of drawing\n                        the arc"}], "file": "src/core/2d_primitives.js", "positive_questions": [], "line": 16, "syntax": "arc(a,b,c,d,start,stop,[mode])", "example": ["\n<div>\n<code>\narc(50, 55, 50, 50, 0, HALF_PI);\nnoFill();\narc(50, 55, 60, 60, HALF_PI, PI);\narc(50, 55, 70, 70, PI, PI+QUARTER_PI);\narc(50, 55, 80, 80, PI+QUARTER_PI, TWO_PI);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI+QUARTER_PI, OPEN);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI+QUARTER_PI, CHORD);\n</code>\n</div>\n\n<div>\n<code>\narc(50, 50, 80, 80, 0, PI+QUARTER_PI, PIE);\n</code>\n</div>"], "description": "Draw an arc to the screen. If called with only a, b, c, d, start, and\nstop, the arc will pe drawn as an open pie. If mode is provided, the arc\nwill be drawn either open, as a chord, or as a pie as specified. The\norigin may be changed with the ellipseMode() function."}, {"submodule": "2D Primitives", "return": {"type": "P5", "description": "the p5 object"}, "name": "ellipse", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "a", "description": "x-coordinate of the ellipse."}, {"type": "Number", "name": "b", "description": "y-coordinate of the ellipse."}, {"type": "Number", "name": "c", "description": "width of the ellipse."}, {"type": "Number", "name": "d", "description": "height of the ellipse."}], "file": "src/core/2d_primitives.js", "positive_questions": [], "line": 119, "syntax": "ellipse(a,b,c,d)", "example": ["\n<div>\n<code>\nellipse(56, 46, 55, 55);\n</code>\n</div>"], "description": "Draws an ellipse (oval) to the screen. An ellipse with equal width and\nheight is a circle. By default, the first two parameters set the location,\nand the third and fourth parameters set the shape's width and height. The\norigin may be changed with the ellipseMode() function."}, {"submodule": "2D Primitives", "return": {"type": "P5", "description": "the p5 object"}, "name": "line", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x1", "description": "the x-coordinate of the first point"}, {"type": "Number", "name": "y1", "description": "the y-coordinate of the first point"}, {"type": "Number", "name": "x2", "description": "the x-coordinate of the second point"}, {"type": "Number", "name": "y2", "description": "the y-coordinate of the second point"}], "file": "src/core/2d_primitives.js", "positive_questions": [], "line": 156, "syntax": "line(x1,y1,x2,y2)", "example": ["\n<div>\n<code>\nline(30, 20, 85, 75);\n</code>\n</div>\n\n<div>\n<code>\nline(30, 20, 85, 20);\nstroke(126);\nline(85, 20, 85, 75);\nstroke(255);\nline(85, 75, 30, 75);\n</code>\n</div>"], "description": "Draws a line (a direct path between two points) to the screen. The version\nof line() with four parameters draws the line in 2D. To color a line, use\nthe stroke() function. A line cannot be filled, therefore the fill()\nfunction will not affect the color of a line. 2D lines are drawn with a\nwidth of one pixel by default, but this can be changed with the\nstrokeWeight() function."}, {"submodule": "2D Primitives", "return": {"type": "P5", "description": "the p5 object"}, "name": "point", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x", "description": "the x-coordinate"}, {"type": "Number", "name": "y", "description": "the y-coordinate"}], "file": "src/core/2d_primitives.js", "positive_questions": [], "line": 226, "syntax": "point(x,y)", "example": ["\n<div>\n<code>\npoint(30, 20);\npoint(85, 20);\npoint(85, 75);\npoint(30, 75);\n</code>\n</div>"], "description": "Draws a point, a coordinate in space at the dimension of one pixel.\nThe first parameter is the horizontal value for the point, the second\nvalue is the vertical value for the point."}, {"submodule": "2D Primitives", "return": {"type": "P5", "description": "the p5 object"}, "name": "quad", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Type", "name": "x1", "description": "the x-coordinate of the first point"}, {"type": "Type", "name": "y1", "description": "the y-coordinate of the first point"}, {"type": "Type", "name": "x2", "description": "the x-coordinate of the second point"}, {"type": "Type", "name": "y2", "description": "the y-coordinate of the second point"}, {"type": "Type", "name": "x3", "description": "the x-coordinate of the third point"}, {"type": "Type", "name": "y3", "description": "the y-coordinate of the third point"}, {"type": "Type", "name": "x4", "description": "the x-coordinate of the fourth point"}, {"type": "Type", "name": "y4", "description": "the y-coordinate of the fourth point"}], "file": "src/core/2d_primitives.js", "positive_questions": [], "line": 260, "syntax": "quad(x1,y1,x2,y2,x3,y3,x4,y4)", "example": ["\n<div>\n<code>\nquad(38, 31, 86, 20, 69, 63, 30, 76);\n</code>\n</div>"], "description": "Draw a quad. A quad is a quadrilateral, a four sided polygon. It is\nsimilar to a rectangle, but the angles between its edges are not\nconstrained to ninety degrees. The first pair of parameters (x1,y1)\nsets the first vertex and the subsequent pairs should proceed\nclockwise or counter-clockwise around the defined shape."}, {"submodule": "2D Primitives", "return": {"type": "P5", "description": "the p5 object."}, "name": "rect", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x", "description": "x-coordinate of the rectangle."}, {"type": "Number", "name": "y", "description": "y-coordinate of the rectangle."}, {"type": "Number", "name": "w", "description": "width of the rectangle."}, {"type": "Number", "name": "h", "description": "height of the rectangle."}, {"optional": true, "type": "Number", "name": "tl", "description": "optional radius of top-left corner."}, {"optional": true, "type": "Number", "name": "tr", "description": "optional radius of top-right corner."}, {"optional": true, "type": "Number", "name": "br", "description": "optional radius of bottom-right corner."}, {"optional": true, "type": "Number", "name": "bl", "description": "optional radius of bottom-left corner."}], "file": "src/core/2d_primitives.js", "positive_questions": [], "line": 299, "syntax": "rect(x,y,w,h,[tl],[tr],[br],[bl])", "example": ["\n<div>\n<code>\n// Draw a rectangle at location (30, 25) with a width and height of 55.\nrect(30, 20, 55, 55);\n</code>\n</div>\n\n<div>\n<code>\n// Draw a rectangle with rounded corners, each having a radius of 20.\nrect(30, 20, 55, 55, 20);\n</code>\n</div>\n\n<div>\n<code>\n// Draw a rectangle with rounded corners having the following radii:\n// top-left = 20, top-right = 15, bottom-right = 10, bottom-left = 5.\nrect(30, 20, 55, 55, 20, 15, 10, 5)\n</code>\n</div>"], "description": "Draws a rectangle to the screen. A rectangle is a four-sided shape with\nevery angle at ninety degrees. By default, the first two parameters set\nthe location of the upper-left corner, the third sets the width, and the\nfourth sets the height. The way these parameters are interpreted, however,\nmay be changed with the rectMode() function. If provided, the fifth, sixth\nseventh and eighth parameters, if specified, determine corner radius for\nthe top-right, top-left, lower-right and lower-left corners, respectively.\nAn omitted corner radius parameter is set to the value of the previously\nspecified radius value in the parameter list."}, {"submodule": "2D Primitives", "return": {"type": "P5", "description": "the p5 object"}, "name": "triangle", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x1", "description": "x-coordinate of the first point"}, {"type": "Number", "name": "y1", "description": "y-coordinate of the first point"}, {"type": "Number", "name": "x2", "description": "x-coordinate of the second point"}, {"type": "Number", "name": "y2", "description": "y-coordinate of the second point"}, {"type": "Number", "name": "x3", "description": "x-coordinate of the third point"}, {"type": "Number", "name": "y3", "description": "y-coordinate of the third point"}], "file": "src/core/2d_primitives.js", "positive_questions": [], "line": 362, "syntax": "triangle(x1,y1,x2,y2,x3,y3)", "example": ["\n<div>\n<code>\ntriangle(30, 75, 58, 20, 86, 75);\n</code>\n</div>"], "description": "A triangle is a plane created by connecting three points. The first two\narguments specify the first point, the middle two arguments specify the\nsecond point, and the last two arguments specify the third point."}, {"submodule": "Attributes", "return": {"type": "P5", "description": "the p5 object"}, "name": "ellipseMode", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number/Constant", "name": "mode", "description": "either CENTER, RADIUS, CORNER, or CORNERS"}], "file": "src/core/attributes.js", "positive_questions": [], "line": 17, "syntax": "ellipseMode(mode)", "example": ["\n<div>\n<code>\nellipseMode(RADIUS);  // Set ellipseMode to RADIUS\nfill(255);  // Set fill to white\nellipse(50, 50, 30, 30);  // Draw white ellipse using RADIUS mode\n\nellipseMode(CENTER);  // Set ellipseMode to CENTER\nfill(100);  // Set fill to gray\nellipse(50, 50, 30, 30);  // Draw gray ellipse using CENTER mode\n</code>\n</div>\n\n<div>\n<code>\nellipseMode(CORNER);  // Set ellipseMode is CORNER\nfill(255);  // Set fill to white\nellipse(25, 25, 50, 50);  // Draw white ellipse using CORNER mode\n\nellipseMode(CORNERS);  // Set ellipseMode to CORNERS\nfill(100);  // Set fill to gray\nellipse(25, 25, 50, 50);  // Draw gray ellipse using CORNERS mode\n</code>\n</div>"], "description": "Modifies the location from which ellipses are drawn by changing the way\nin which parameters given to ellipse() are interpreted.\n\nThe default mode is ellipseMode(CENTER), which interprets the first two\nparameters of ellipse() as the shape's center point, while the third and\nfourth parameters are its width and height.\n\nellipseMode(RADIUS) also uses the first two parameters of ellipse() as\nthe shape's center point, but uses the third and fourth parameters to\nspecify half of the shapes's width and height.\n\nellipseMode(CORNER) interprets the first two parameters of ellipse() as\nthe upper-left corner of the shape, while the third and fourth parameters\nare its width and height.\n\nellipseMode(CORNERS) interprets the first two parameters of ellipse() as\nthe location of one corner of the ellipse's bounding box, and the third\nand fourth parameters as the location of the opposite corner.\n\nThe parameter must be written in ALL CAPS because Processing is a\ncase-sensitive language."}, {"submodule": "Attributes", "return": {"type": "P5", "description": "the p5 object"}, "name": "noSmooth", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "file": "src/core/attributes.js", "positive_questions": [], "line": 78, "syntax": "noSmooth()", "example": ["\n<div>\n<code>\nbackground(0);\nnoStroke();\nsmooth();\nellipse(30, 48, 36, 36);\nnoSmooth();\nellipse(70, 48, 36, 36);\n</code>\n</div>"], "description": "Draws all geometry with jagged (aliased) edges. Note that smooth() is\nactive by default, so it is necessary to call noSmooth() to disable\nsmoothing of geometry, images, and fonts."}, {"submodule": "Attributes", "return": {"type": "P5", "description": "the p5 object"}, "name": "rectMode", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number/Constant", "name": "mode", "description": "either CORNER, CORNERS, CENTER, or RADIUS"}], "file": "src/core/attributes.js", "positive_questions": [], "line": 102, "syntax": "rectMode(mode)", "example": ["\n<div>\n<code>\nrectMode(CORNER);  // Default rectMode is CORNER\nfill(255);  // Set fill to white\nrect(25, 25, 50, 50);  // Draw white rect using CORNER mode\n\nrectMode(CORNERS);  // Set rectMode to CORNERS\nfill(100);  // Set fill to gray\nrect(25, 25, 50, 50);  // Draw gray rect using CORNERS mode\n</code>\n</div>\n\n<div>\n<code>\nrectMode(RADIUS);  // Set rectMode to RADIUS\nfill(255);  // Set fill to white\nrect(50, 50, 30, 30);  // Draw white rect using RADIUS mode\n\nrectMode(CENTER);  // Set rectMode to CENTER\nfill(100);  // Set fill to gray\nrect(50, 50, 30, 30);  // Draw gray rect using CENTER mode\n</code>\n</div>"], "description": "Modifies the location from which rectangles are drawn by changing the way\nin which parameters given to rect() are interpreted.\n\nThe default mode is rectMode(CORNER), which interprets the first two\nparameters of rect() as the upper-left corner of the shape, while the\nthird and fourth parameters are its width and height.\n\nrectMode(CORNERS) interprets the first two parameters of rect() as the\nlocation of one corner, and the third and fourth parameters as the\nlocation of the opposite corner.\n\nrectMode(CENTER) interprets the first two parameters of rect() as the\nshape's center point, while the third and fourth parameters are its\nwidth and height.\n\nrectMode(RADIUS) also uses the first two parameters of rect() as the\nshape's center point, but uses the third and fourth parameters to specify\nhalf of the shapes's width and height.\n\nThe parameter must be written in ALL CAPS because Processing is a\ncase-sensitive language."}, {"submodule": "Attributes", "return": {"type": "P5", "description": "the p5 object"}, "name": "smooth", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "file": "src/core/attributes.js", "positive_questions": [], "line": 163, "syntax": "smooth()", "example": ["\n<div>\n<code>\nbackground(0);\nnoStroke();\nsmooth();\nellipse(30, 48, 36, 36);\nnoSmooth();\nellipse(70, 48, 36, 36);\n</code>\n</div>"], "description": "Draws all geometry with smooth (anti-aliased) edges. smooth() will also\nimprove image quality of resized images. Note that smooth() is active by\ndefault; noSmooth() can be used to disable smoothing of geometry,\nimages, and fonts."}, {"submodule": "Attributes", "return": {"type": "P5", "description": "the p5 object"}, "name": "strokeCap", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number/Constant", "name": "cap", "description": "either SQUARE, PROJECT, or ROUND"}], "file": "src/core/attributes.js", "positive_questions": [], "line": 188, "syntax": "strokeCap(cap)", "example": ["\n<div>\n<code>\nstrokeWeight(12.0);\nstrokeCap(ROUND);\nline(20, 30, 80, 30);\nstrokeCap(SQUARE);\nline(20, 50, 80, 50);\nstrokeCap(PROJECT);\nline(20, 70, 80, 70);\n</code>\n</div>"], "description": "Sets the style for rendering line endings. These ends are either squared,\nextended, or rounded, each of which specified with the corresponding\nparameters: SQUARE, PROJECT, and ROUND. The default cap is ROUND."}, {"submodule": "Attributes", "return": {"type": "P5", "description": "the p5 object"}, "name": "strokeJoin", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number/Constant", "name": "join", "description": "either MITER, BEVEL, ROUND"}], "file": "src/core/attributes.js", "positive_questions": [], "line": 218, "syntax": "strokeJoin(join)", "example": ["\n<div>\n<code>\nnoFill();\nstrokeWeight(10.0);\nstrokeJoin(MITER);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nstrokeWeight(10.0);\nstrokeJoin(BEVEL);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nstrokeWeight(10.0);\nstrokeJoin(ROUND);\nbeginShape();\nvertex(35, 20);\nvertex(65, 50);\nvertex(35, 80);\nendShape();\n</code>\n</div>"], "description": "Sets the style of the joints which connect line segments. These joints\nare either mitered, beveled, or rounded and specified with the\ncorresponding parameters MITER, BEVEL, and ROUND. The default joint is\nMITER."}, {"submodule": "Attributes", "return": {"type": "P5", "description": "the p5 object"}, "name": "strokeWeight", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "weight", "description": "the weight (in pixels) of the stroke"}], "file": "src/core/attributes.js", "positive_questions": [], "line": 276, "syntax": "strokeWeight(weight)", "example": ["\n<div>\n<code>\nstrokeWeight(1);  // Default\nline(20, 20, 80, 20);\nstrokeWeight(4);  // Thicker\nline(20, 40, 80, 40);\nstrokeWeight(10);  // Beastly\nline(20, 70, 80, 70);\n</code>\n</div>"], "description": "Sets the width of the stroke used for lines, points, and the border\naround shapes. All widths are set in units of pixels."}, {"submodule": "Constants", "name": "HALF_PI", "negative_questions": [], "module": "Constants", "class": "p5", "itemtype": "property", "file": "src/core/constants.js", "positive_questions": [], "line": 25, "syntax": "HALF_PI", "example": ["\n<div><code>\narc(50, 50, 80, 80, 0, HALF_PI);\n</code></div>\n"], "description": "HALF_PI is a mathematical constant with the value\n1.57079632679489661923. It is half the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions sin() and cos()."}, {"submodule": "Constants", "name": "PI", "negative_questions": [], "module": "Constants", "class": "p5", "itemtype": "property", "file": "src/core/constants.js", "positive_questions": [], "line": 40, "syntax": "PI", "example": ["\n<div><code>\narc(50, 50, 80, 80, 0, PI);\n</code></div>"], "description": "PI is a mathematical constant with the value\n3.14159265358979323846. It is the ratio of the circumference\nof a circle to its diameter. It is useful in combination with\nthe trigonometric functions sin() and cos()."}, {"submodule": "Constants", "name": "QUARTER_PI", "negative_questions": [], "module": "Constants", "class": "p5", "itemtype": "property", "file": "src/core/constants.js", "positive_questions": [], "line": 54, "syntax": "QUARTER_PI", "example": ["\n<div><code>\narc(50, 50, 80, 80, 0, QUARTER_PI);\n</code></div>\n"], "description": "QUARTER_PI is a mathematical constant with the value 0.7853982.\nIt is one quarter the ratio of the circumference of a circle to\nits diameter. It is useful in combination with the trigonometric\nfunctions sin() and cos()."}, {"submodule": "Constants", "name": "TAU", "negative_questions": [], "module": "Constants", "class": "p5", "itemtype": "property", "file": "src/core/constants.js", "positive_questions": [], "line": 69, "syntax": "TAU", "example": ["\n<div><code>\narc(50, 50, 80, 80, 0, TAU);\n</code></div>\n"], "description": "TAU is an alias for TWO_PI, a mathematical constant with the\nvalue 6.28318530717958647693. It is twice the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions sin() and cos()."}, {"submodule": "Constants", "name": "TWO_PI", "negative_questions": [], "module": "Constants", "class": "p5", "itemtype": "property", "file": "src/core/constants.js", "positive_questions": [], "line": 84, "syntax": "TWO_PI", "example": ["\n<div><code>\narc(50, 50, 80, 80, 0, TWO_PI);\n</code></div>\n"], "description": "TWO_PI is a mathematical constant with the value\n6.28318530717958647693. It is twice the ratio of the\ncircumference of a circle to its diameter. It is useful in\ncombination with the trigonometric functions sin() and cos()."}, {"submodule": "Structure", "name": "preload", "negative_questions": [], "module": "Structure", "class": "p5", "itemtype": "method", "file": "src/core/core.js", "positive_questions": [], "line": 49, "syntax": "preload()", "example": ["\n<div><code>\nvar img;\nvar c;\nfunction preload() {  // preload() runs once\n  img = loadImage('assets/laDefense.jpg');\n}\n\nfunction setup() {  // setup() waits until preload() is done\n  img.loadPixels();\n  // get color of middle pixel\n  c = img.get(img.width/2, img.height/2);\n}\n\nfunction draw() {\n  background(c);\n  image(img, 25, 25, 50, 50);\n}\n</code></div>"], "description": "Called directly before setup(), the preload() function is used to handle\nasynchronous loading of external files. If a preload function is\ndefined, setup() will wait until any load calls within have finished.\nNothing besides load calls should be inside preload (loadImage,\nloadJSON, loadFont, loadStrings, etc)."}, {"submodule": "Structure", "name": "setup", "negative_questions": [], "module": "Structure", "class": "p5", "itemtype": "method", "file": "src/core/core.js", "positive_questions": [], "line": 78, "syntax": "setup()", "example": ["\n<div><code>\nvar a = 0;\n\nfunction setup() {\n  background(0);\n  noStroke();\n  fill(102);\n}\n\nfunction draw() {\n  rect(a++%width, 10, 2, 80);\n}\n</code></div>"], "description": "The setup() function is called once when the program starts. It's used to\ndefine initial environment properties such as screen size and background\ncolor and to load media such as images and fonts as the program starts.\nThere can only be one setup() function for each program and it shouldn't\nbe called again after its initial execution. Note: Variables declared\nwithin setup() are not accessible within other functions, including\ndraw()."}, {"submodule": "Structure", "name": "draw", "negative_questions": [], "module": "Structure", "class": "p5", "itemtype": "method", "file": "src/core/core.js", "positive_questions": [], "line": 104, "syntax": "draw()", "example": ["\n<div><code>\nvar yPos = 0;\nfunction setup() {  // setup() runs once\n  frameRate(30);\n}\nfunction draw() {  // draw() loops forever, until stopped\n  background(204);\n  yPos = yPos - 1;\n  if (yPos < 0) {\n    yPos = height;\n  }\n  line(0, yPos, width, yPos);\n}\n</code></div>"], "description": "Called directly after setup(), the draw() function continuously executes\nthe lines of code contained inside its block until the program is stopped\nor noLoop() is called. draw() is called automatically and should never be\ncalled explicitly.\n\nIt should always be controlled with noLoop(), redraw() and loop(). After\nnoLoop() stops the code in draw() from executing, redraw() causes the\ncode inside draw() to execute once, and loop() will cause the code\ninside draw() to resume executing continuously.\n\nThe number of times draw() executes in each second may be controlled with\nthe frameRate() function.\n\nThere can only be one draw() function for each sketch, and draw() must\nexist if you want the code to run continuously, or to process events such\nas mousePressed(). Sometimes, you might have an empty call to draw() in\nyour program, as shown in the above example."}, {"submodule": "Structure", "name": "remove", "negative_questions": [], "module": "Structure", "class": "p5", "itemtype": "method", "file": "src/core/core.js", "positive_questions": [], "line": 346, "syntax": "remove()", "example": ["\n<div class='norender'><code>\nfunction draw() {\n  ellipse(50, 50, 10, 10);\n}\n\nfunction mousePressed() {\n  remove(); // remove whole sketch on mouse press\n}\n</code></div>"], "description": "Removes the entire p5 sketch. This will remove the canvas and any\nelements created by p5.js. It will also stop the draw loop and unbind\nany properties or methods from the window global scope. It will\nleave a variable p5 in case you wanted to create a new p5 sketch.\nIf you like, you can set p5 = null to erase it."}, {"submodule": "Curves", "return": {"type": "Object", "description": "the p5 object"}, "name": "bezier", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x1", "description": "x-coordinate for the first anchor point"}, {"type": "Number", "name": "y1", "description": "y-coordinate for the first anchor point"}, {"type": "Number", "name": "x2", "description": "x-coordinate for the first control point"}, {"type": "Number", "name": "y2", "description": "y-coordinate for the first control point"}, {"type": "Number", "name": "x3", "description": "x-coordinate for the second control point"}, {"type": "Number", "name": "y3", "description": "y-coordinate for the second control point"}, {"type": "Number", "name": "x4", "description": "x-coordinate for the second anchor point"}, {"type": "Number", "name": "y4", "description": "y-coordinate for the second anchor point"}], "file": "src/core/curves.js", "positive_questions": [], "line": 18, "syntax": "bezier(x1,y1,x2,y2,x3,y3,x4,y4)", "example": ["\n<div>\n<code>\nnoFill();\nstroke(255, 102, 0);\nline(85, 20, 10, 10);\nline(90, 90, 15, 80);\nstroke(0, 0, 0);\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\n</code>\n</div>"], "description": "Draws a Bezier curve on the screen. These curves are defined by a series\nof anchor and control points. The first two parameters specify the first\nanchor point and the last two parameters specify the other anchor point.\nThe middle parameters specify the control points which define the shape\nof the curve. Bezier curves were developed by French engineer Pierre\nBezier."}, {"submodule": "Curves", "return": {"type": "Number", "description": "the value of the Bezier at point t"}, "name": "bezierPoint", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "a", "description": "coordinate of first point on the curve"}, {"type": "Number", "name": "b", "description": "coordinate of first control point"}, {"type": "Number", "name": "c", "description": "coordinate of second control point"}, {"type": "Number", "name": "d", "description": "coordinate of second point on the curve"}, {"type": "Number", "name": "t", "description": "value between 0 and 1"}], "file": "src/core/curves.js", "positive_questions": [], "line": 84, "syntax": "bezierPoint(a,b,c,d,t)", "example": ["\n<div>\n<code>\nnoFill();\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\nfill(255);\nsteps = 10;\nfor (i = 0; i <= steps; i++) {\n  t = i / steps;\n  x = bezierPoint(85, 10, 90, 15, t);\n  y = bezierPoint(20, 10, 90, 80, t);\n  ellipse(x, y, 5, 5);\n}\n</code>\n</div>"], "description": "Calculate a point on the Bezier Curve\n\nEvaluates the Bezier at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a bezier curve at t."}, {"submodule": "Curves", "return": {"type": "Number", "description": "the tangent at point t"}, "name": "bezierTangent", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "a", "description": "coordinate of first point on the curve"}, {"type": "Number", "name": "b", "description": "coordinate of first control point"}, {"type": "Number", "name": "c", "description": "coordinate of second control point"}, {"type": "Number", "name": "d", "description": "coordinate of second point on the curve"}, {"type": "Number", "name": "t", "description": "value between 0 and 1"}], "file": "src/core/curves.js", "positive_questions": [], "line": 124, "syntax": "bezierTangent(a,b,c,d,t)", "example": ["\n<div>\n<code>\nnoFill();\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\nsteps = 6;\nfill(255);\nfor (i = 0; i <= steps; i++) {\n  t = i / steps;\n  // Get the location of the point\n  x = bezierPoint(85, 10, 90, 15, t);\n  y = bezierPoint(20, 10, 90, 80, t);\n  // Get the tangent points\n  tx = bezierTangent(85, 10, 90, 15, t);\n  ty = bezierTangent(20, 10, 90, 80, t);\n  // Calculate an angle from the tangent points\n  a = atan2(ty, tx);\n  a += PI;\n  stroke(255, 102, 0);\n  line(x, y, cos(a)*30 + x, sin(a)*30 + y);\n  // The following line of code makes a line\n  // inverse of the above line\n  //line(x, y, cos(a)*-30 + x, sin(a)*-30 + y);\n  stroke(0);\n  ellipse(x, y, 5, 5);\n}\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nbezier(85, 20, 10, 10, 90, 90, 15, 80);\nstroke(255, 102, 0);\nsteps = 16;\nfor (i = 0; i <= steps; i++) {\n  t = i / steps;\n  x = bezierPoint(85, 10, 90, 15, t);\n  y = bezierPoint(20, 10, 90, 80, t);\n  tx = bezierTangent(85, 10, 90, 15, t);\n  ty = bezierTangent(20, 10, 90, 80, t);\n  a = atan2(ty, tx);\n  a -= HALF_PI;\n  line(x, y, cos(a)*8 + x, sin(a)*8 + y);\n}\n</code>\n</div>"], "description": "Calculates the tangent of a point on a Bezier curve\n\nEvaluates the tangent at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points"}, {"submodule": "Curves", "return": {"type": "Object", "description": "the p5 object"}, "name": "curve", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x1", "description": "x-coordinate for the beginning control point"}, {"type": "Number", "name": "y1", "description": "y-coordinate for the beginning control point"}, {"type": "Number", "name": "x2", "description": "x-coordinate for the first point"}, {"type": "Number", "name": "y2", "description": "y-coordinate for the first point"}, {"type": "Number", "name": "x3", "description": "x-coordinate for the second point"}, {"type": "Number", "name": "y3", "description": "y-coordinate for the second point"}, {"type": "Number", "name": "x4", "description": "x-coordinate for the ending control point"}, {"type": "Number", "name": "y4", "description": "y-coordinate for the ending control point"}], "file": "src/core/curves.js", "positive_questions": [], "line": 196, "syntax": "curve(x1,y1,x2,y2,x3,y3,x4,y4)", "example": ["\n<div>\n<code>\nnoFill();\nstroke(255, 102, 0);\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\nstroke(0);\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nstroke(255, 102, 0);\ncurve(73, 24, 73, 61, 15, 65, 15, 65);\n</code>\n</div>"], "description": "Draws a curved line on the screen. The first and second parameters specify\nthe beginning control point and the last two parameters specify the ending\ncontrol point. The middle parameters specify the start and stop of the\ncurve. Longer curves can be created by putting a series of curve()\nfunctions together or using curveVertex(). An additional function called\ncurveTightness() provides control for the visual quality of the curve.\nThe curve() function is an implementation of Catmull-Rom splines."}, {"submodule": "Curves", "return": {"type": "Object", "description": "the p5 object"}, "name": "curveTightness", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "amount", "description": "of deformation from the original vertices"}], "file": "src/core/curves.js", "positive_questions": [], "line": 264, "syntax": "curveTightness(amount)", "example": ["\n<div>\n<code>\n// Move the mouse left and right to see the curve change\n\nfunction setup() {\n  createCanvas(100, 100);\n  noFill();\n}\n\nfunction draw() {\n  background(204);\n  var t = map(mouseX, 0, width, -5, 5);\n  curveTightness(t);\n  beginShape();\n  curveVertex(10, 26);\n  curveVertex(10, 26);\n  curveVertex(83, 24);\n  curveVertex(83, 61);\n  curveVertex(25, 65);\n  curveVertex(25, 65);\n  endShape();\n}\n</code>\n</div>"], "description": "Modifies the quality of forms created with curve() and curveVertex().\nThe parameter tightness determines how the curve fits to the vertex\npoints. The value 0.0 is the default value for tightness (this value\ndefines the curves to be Catmull-Rom splines) and the value 1.0 connects\nall the points with straight lines. Values within the range -5.0 and 5.0\nwill deform the curves but will leave them recognizable and as values\nincrease in magnitude, they will continue to deform."}, {"submodule": "Curves", "return": {"type": "Number", "description": "bezier value at point t"}, "name": "curvePoint", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "a", "description": "coordinate of first point on the curve"}, {"type": "Number", "name": "b", "description": "coordinate of first control point"}, {"type": "Number", "name": "c", "description": "coordinate of second control point"}, {"type": "Number", "name": "d", "description": "coordinate of second point on the curve"}, {"type": "Number", "name": "t", "description": "value between 0 and 1"}], "file": "src/core/curves.js", "positive_questions": [], "line": 306, "syntax": "curvePoint(a,b,c,d,t)", "example": ["\n<div>\n<code>\nnoFill();\ncurve(5, 26, 5, 26, 73, 24, 73, 61);\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nfill(255);\nellipseMode(CENTER);\nsteps = 6;\nfor (i = 0; i <= steps; i++) {\n  t = i / steps;\n  x = curvePoint(5, 5, 73, 73, t);\n  y = curvePoint(26, 26, 24, 61, t);\n  ellipse(x, y, 5, 5);\n  x = curvePoint(5, 73, 73, 15, t);\n  y = curvePoint(26, 24, 61, 65, t);\n  ellipse(x, y, 5, 5);\n}\n</code>\n</div>"], "description": "Calculate a point on the Curve\n\nEvaluates the Bezier at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points.\nThis can be done once with the x coordinates and a second time\nwith the y coordinates to get the location of a curve at t."}, {"submodule": "Curves", "return": {"type": "Number", "description": "the tangent at point t"}, "name": "curveTangent", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "a", "description": "coordinate of first point on the curve"}, {"type": "Number", "name": "b", "description": "coordinate of first control point"}, {"type": "Number", "name": "c", "description": "coordinate of second control point"}, {"type": "Number", "name": "d", "description": "coordinate of second point on the curve"}, {"type": "Number", "name": "t", "description": "value between 0 and 1"}], "file": "src/core/curves.js", "positive_questions": [], "line": 353, "syntax": "curveTangent(a,b,c,d,t)", "example": ["\n<div>\n<code>\nnoFill();\ncurve(5, 26, 73, 24, 73, 61, 15, 65);\nsteps = 6;\nfor (i = 0; i <= steps; i++) {\n  t = i / steps;\n  x = curvePoint(5, 73, 73, 15, t);\n  y = curvePoint(26, 24, 61, 65, t);\n  //ellipse(x, y, 5, 5);\n  tx = curveTangent(5, 73, 73, 15, t);\n  ty = curveTangent(26, 24, 61, 65, t);\n  a = atan2(ty, tx);\n  a -= PI/2.0;\n  line(x, y, cos(a)*8 + x, sin(a)*8 + y);\n}\n</code>\n</div>"], "description": "Calculates the tangent of a point on a curve\n\nEvaluates the tangent at point t for points a, b, c, d.\nThe parameter t varies between 0 and 1, a and d are points\non the curve, and b and c are the control points"}, {"submodule": "Environment", "name": "print", "negative_questions": [], "module": "Environment", "syntax": "print(contents)", "itemtype": "method", "params": [{"type": "Any", "name": "contents", "description": "any combination of Number, String, Object, Boolean,\n                      Array to print"}], "file": "src/core/environment.js", "positive_questions": [], "line": 22, "class": "p5", "description": "The print() function writes to the console area of your browser.\nThis function is often helpful for looking at the data a program is\nproducing. This function creates a new line of text for each call to\nthe function. More than one parameter can be passed into the function by\nseparating them with commas. Alternatively, individual elements can be\nseparated with quotes (\"\") and joined with the addition operator (+).\n\nWhile print() is similar to console.log(), it does not directly map to\nit in order to simulate easier to understand behavior than\nconsole.log(). Due to this, it is slower. For fastest results, use\nconsole.log()."}, {"submodule": "Environment", "name": "frameCount", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "property", "file": "src/core/environment.js", "positive_questions": [], "line": 57, "syntax": "frameCount", "example": ["\n  <div><code>\n    function setup() {\n      frameRate(30);\n      textSize(20);\n      textSize(30);\n      textAlign(CENTER);\n    }\n\n    function draw() {\n      background(200);\n      text(frameCount, width/2, height/2);\n    }\n  </code></div>"], "description": "The system variable frameCount contains the number of frames that have\nbeen displayed since the program started. Inside setup() the value is 0,\nafter the first iteration of draw it is 1, etc."}, {"submodule": "Environment", "name": "focused", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "property", "file": "src/core/environment.js", "positive_questions": [], "line": 80, "syntax": "focused", "example": ["\n<div><code>\n// To demonstrate, put two windows side by side.\n// Click on the window that the p5 sketch isn't in!\nfunction draw() {\n  if (focused) {  // or \"if (focused === true)\"\n    noStroke();\n    fill(0, 200, 0);\n    ellipse(25, 25, 50, 50);\n  } else {\n    stroke(200,0,0);\n    line(0, 0, 100, 100);\n    line(100, 0, 0, 100);\n  }\n}\n\n</code></div>"], "description": "Confirms if the window a p5.js program is in is \"focused,\" meaning that\nthe sketch will accept mouse or keyboard input. This variable is\n\"true\" if the window is focused and \"false\" if not."}, {"submodule": "Environment", "name": "cursor", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "method", "params": [{"type": "Number/Constant", "name": "type", "description": "either ARROW, CROSS, HAND, MOVE, TEXT, or\n                              WAIT, or path for image"}, {"optional": true, "type": "Number", "name": "x", "description": "the horizontal active spot of the cursor"}, {"optional": true, "type": "Number", "name": "y", "description": "the vertical active spot of the cursor"}], "file": "src/core/environment.js", "positive_questions": [], "line": 106, "syntax": "cursor(type,[x],[y])", "example": ["\n<div><code>\n// Move the mouse left and right across the image\n// to see the cursor change from a cross to a hand\nfunction draw() {\n  line(width/2, 0, width/2, height);\n  if (mouseX < 50) {\n    cursor(CROSS);\n  } else {\n    cursor(HAND);\n  }\n}\n</code></div>"], "description": "Sets the cursor to a predefined symbol or an image, or makes it visible\nif already hidden. If you are trying to set an image as the cursor, the\nrecommended size is 16x16 or 32x32 pixels. It is not possible to load an\nimage as the cursor if you are exporting your program for the Web, and not\nall MODES work with all browsers. The values for parameters x and y must\nbe less than the dimensions of the image."}, {"submodule": "Environment", "return": {"type": "Number", "description": "current frameRate"}, "name": "frameRate", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "method", "params": [{"optional": true, "type": "Number", "name": "fps", "description": "number of frames to be displayed every second"}], "file": "src/core/environment.js", "positive_questions": [], "line": 160, "syntax": "frameRate([fps])", "example": ["\n\n<div><code>\nvar rectX = 0;\nvar fr = 30; //starting FPS\nvar clr = color(255,0,0);\n\nfunction setup() {\n  background(200);\n  frameRate(fr); // Attempt to refresh at starting FPS\n}\n\nfunction draw() {\n  background(200);\n  rectX = rectX += 1; // Move Rectangle\n\n  if (rectX >= width) { // If you go off screen.\n    if (fr == 30) {\n      clr = color(0,0,255);\n      fr = 10;\n      frameRate(fr); // make frameRate 10 FPS\n    } else {\n      clr = color(255,0,0);\n      fr = 30;\n      frameRate(fr); // make frameRate 30 FPS\n    }\n    rectX = 0;\n  }\n  fill(clr);\n  rect(rectX, 40, 20,20);\n}\n</div></code>\n"], "description": "Specifies the number of frames to be displayed every second. For example,\nthe function call frameRate(30) will attempt to refresh 30 times a second.\nIf the processor is not fast enough to maintain the specified rate, the\nframe rate will not be achieved. Setting the frame rate within setup() is\nrecommended. The default rate is 60 frames per second. This is the same as\nsetFrameRate(val).\n\nCalling frameRate() with no arguments returns the current framerate. This\nis the same as getFrameRate()."}, {"submodule": "Environment", "name": "noCursor", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "method", "file": "src/core/environment.js", "positive_questions": [], "line": 241, "syntax": "noCursor()", "example": ["\n<div><code>\nfunction setup() {\n  noCursor();\n}\n\nfunction draw() {\n  background(200);\n  ellipse(mouseX, mouseY, 10, 10);\n}\n</code></div>"], "description": "Hides the cursor from view."}, {"submodule": "Environment", "name": "displayWidth", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "property", "file": "src/core/environment.js", "positive_questions": [], "line": 262, "syntax": "displayWidth", "example": ["\n<div class=\"norender\"><code>\ncreateCanvas(displayWidth, displayHeight);\n</code></div>"], "description": "System variable that stores the width of the entire screen display. This\nis used to run a full-screen program on any display size."}, {"submodule": "Environment", "name": "displayHeight", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "property", "file": "src/core/environment.js", "positive_questions": [], "line": 274, "syntax": "displayHeight", "example": ["\n<div class=\"norender\"><code>\ncreateCanvas(displayWidth, displayHeight);\n</code></div>"], "description": "System variable that stores the height of the entire screen display. This\nis used to run a full-screen program on any display size."}, {"submodule": "Environment", "name": "windowWidth", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "property", "file": "src/core/environment.js", "positive_questions": [], "line": 286, "syntax": "windowWidth", "example": ["\n<div class=\"norender\"><code>\ncreateCanvas(windowWidth, windowHeight);\n</code></div>"], "description": "System variable that stores the width of the inner window, it maps to\nwindow.innerWidth."}, {"submodule": "Environment", "name": "windowHeight", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "property", "file": "src/core/environment.js", "positive_questions": [], "line": 297, "syntax": "windowHeight", "example": ["\n<div class=\"norender\"><code>\ncreateCanvas(windowWidth, windowHeight);\n</code></div>"], "description": "System variable that stores the height of the inner window, it maps to\nwindow.innerHeight."}, {"submodule": "Environment", "name": "windowResized", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "property", "file": "src/core/environment.js", "positive_questions": [], "line": 309, "syntax": "windowResized", "example": ["\n<div class=\"norender\"><code>\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n}\n\nfunction draw() {\n background(0, 100, 200);\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n}\n</code></div>"], "description": "The windowResized() function is called once every time the browser window\nis resized. This is a good place to resize the canvas or do any other\nadjustements to accomodate the new window size."}, {"submodule": "Environment", "name": "width", "negative_questions": [], "module": "Environment", "syntax": "width", "itemtype": "property", "file": "src/core/environment.js", "positive_questions": [], "line": 343, "class": "p5", "description": "System variable that stores the width of the drawing canvas. This value\nis set by the first parameter of the createCanvas() function.\nFor example, the function call createCanvas(320, 240) sets the width\nvariable to the value 320. The value of width defaults to 100 if\ncreateCanvas() is not used in a program."}, {"submodule": "Environment", "name": "height", "negative_questions": [], "module": "Environment", "syntax": "height", "itemtype": "property", "file": "src/core/environment.js", "positive_questions": [], "line": 354, "class": "p5", "description": "System variable that stores the height of the drawing canvas. This value\nis set by the second parameter of the createCanvas() function. For\nexample, the function call createCanvas(320, 240) sets the height\nvariable to the value 240. The value of height defaults to 100 if\ncreateCanvas() is not used in a program."}, {"submodule": "Environment", "return": {"type": "Boolean", "description": "current fullscreen state"}, "name": "fullscreen", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "method", "params": [{"optional": true, "type": "Boolean", "name": "val", "description": "whether the sketch should be fullscreened or not"}], "file": "src/core/environment.js", "positive_questions": [], "line": 365, "syntax": "fullscreen([val])", "example": ["\n<div>\n<code>\n// Clicking in the box toggles fullscreen on and off.\nfunction setup() {\n  background(200);\n}\nfunction mousePressed() {\n  if (mouseX > 0 && mouseX < 100 && mouseY > 0 && mouseY < 100) {\n    var fs = fullscreen();\n    fullscreen(!fs);\n  }\n}\n</code>\n</div>"], "description": "If argument is given, sets the sketch to fullscreen or not based on the\nvalue of the argument. If no argument is given, returns the current\nfullscreen state. Note that due to browser restrictions this can only\nbe called on user input, for example, on mouse press like the example\nbelow."}, {"submodule": "Environment", "name": "devicePixelScaling", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "method", "params": [{"optional": true, "type": "Boolean|Number", "name": "val", "description": "whether or how much the sketch should scale"}], "file": "src/core/environment.js", "positive_questions": [], "line": 407, "syntax": "devicePixelScaling([val])", "example": ["\n<div>\n<code>\nfunction setup() {\n  devicePixelScaling(false);\n  createCanvas(100, 100);\n  background(200);\n  ellipse(width/2, height/2, 50, 50);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  devicePixelScaling(3.0);\n  createCanvas(100, 100);\n  background(200);\n  ellipse(width/2, height/2, 50, 50);\n}\n</code>\n</div>"], "description": "Toggles pixel scaling for high pixel density displays. By default\npixel scaling is on, call devicePixelScaling(false) to turn it off.\nThis devicePixelScaling() function must be the first line of code\ninside setup()."}, {"submodule": "Environment", "return": {"type": "String", "description": "url"}, "name": "getURL", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "method", "file": "src/core/environment.js", "positive_questions": [], "line": 483, "syntax": "getURL()", "example": ["\n<div>\n<code>\nvar url;\nvar x = 100;\n\nfunction setup() {\n  fill(0);\n  noStroke();\n  url = getURL();\n}\n\nfunction draw() {\n  background(200);\n  text(url, x, height/2);\n  x--;\n}\n</code>\n</div>"], "description": "Gets the current URL."}, {"submodule": "Environment", "return": {"type": "Array", "description": "path components"}, "name": "getURLPath", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "method", "file": "src/core/environment.js", "positive_questions": [], "line": 510, "syntax": "getURLPath()", "example": ["\n<div class='norender'><code>\nfunction setup() {\n  var urlPath = getURLPath();\n  for (var i=0; i&lt;urlPath.length; i++) {\n    text(urlPath[i], 10, i*20+20);\n  }\n}\n</code></div>"], "description": "Gets the current URL path as an array."}, {"submodule": "Environment", "return": {"type": "Object", "description": "URL params"}, "name": "getURLParams", "negative_questions": [], "module": "Environment", "class": "p5", "itemtype": "method", "file": "src/core/environment.js", "positive_questions": [], "line": 527, "syntax": "getURLParams()", "example": ["\n<div class='norender'>\n<code>\n// Example: http://p5js.org?year=2014&month=May&day=15\n\nfunction setup() {\n  var params = getURLParams();\n  text(params.day, 10, 20);\n  text(params.month, 10, 40);\n  text(params.year, 10, 60);\n}\n</code>\n</div>"], "description": "Gets the current URL params as an Object."}, {"submodule": "DOM", "name": "elt", "negative_questions": [], "module": "DOM", "syntax": "elt", "itemtype": "property", "file": "src/core/p5.Element.js", "positive_questions": [], "line": 24, "class": "p5.Element", "description": "Underlying HTML element. All normal HTML methods can be called on this."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "parent", "negative_questions": [], "module": "DOM", "class": "p5.Element", "itemtype": "method", "params": [{"type": "String|Object", "name": "parent", "description": "the ID, DOM node, or p5.Element\n                         of desired parent element"}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 36, "syntax": "parent(parent)", "example": ["\n <div class=\"norender\"><code>\n // in the html file:\n &lt;div id=\"myContainer\">&lt;/div>\n // in the js file:\n var cnv = createCanvas(100, 100);\n cnv.parent(\"myContainer\");\n </code></div>\n <div class='norender'><code>\n var div0 = createDiv('this is the parent');\n var div1 = createDiv('this is the child');\n div1.parent(div0); // use p5.Element\n </code></div>\n <div class='norender'><code>\n var div0 = createDiv('this is the parent');\n div0.id('apples');\n var div1 = createDiv('this is the child');\n div1.parent('apples'); // use id\n </code></div>\n <div class='norender'><code>\n var elt = document.getElementById('myParentDiv');\n var div1 = createDiv('this is the child');\n div1.parent(elt); // use element from page\n </code></div>"], "description": "Attaches the element to the parent specified. A way of setting\n the container for the element. Accepts either a string ID, DOM\n node, or p5.Element."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "id", "negative_questions": [], "module": "DOM", "syntax": "id(id)", "itemtype": "method", "params": [{"type": "String", "name": "id", "description": "ID of the element"}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 81, "class": "p5.Element", "description": "Sets the ID of the element"}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "class", "negative_questions": [], "module": "DOM", "syntax": "class(class)", "itemtype": "method", "params": [{"type": "String", "name": "class", "description": "class to add"}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 94, "class": "p5.Element", "description": "Adds given class to the element"}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "mousePressed", "negative_questions": [], "module": "DOM", "class": "p5.Element", "itemtype": "method", "params": [{"type": "Function", "name": "fxn", "description": "function to be fired when mouse is\n                   pressed over the element."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 107, "syntax": "mousePressed(fxn)", "example": ["\n<div class='norender'><code>\nvar cnv;\nvar d;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.mousePressed(changeGray); // attach listener for\n                                // canvas click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width/2, height/2, d, d);\n}\n\n// this function fires with any click anywhere\nfunction mousePressed() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>\n"], "description": "The .mousePressed() function is called once after every time a\nmouse button is pressed over the element. This can be used to\nattach element specific event listeners."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "mouseWheel", "negative_questions": [], "module": "DOM", "syntax": "mouseWheel(fxn)", "itemtype": "method", "params": [{"type": "Function", "name": "fxn", "description": "function to be fired when mouse wheel is\n                   scrolled over the element."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 152, "class": "p5.Element", "description": "The .mouseWheel() function is called once after every time a\nmouse wheel is scrolled over the element. This can be used to\nattach element specific event listeners.<br><br>\nThe event.wheelDelta or event.detail property returns negative values if\nthe mouse wheel if rotated up or away from the user and positive in the\nother direction. On OS X with \"natural\" scrolling enabled, the values are\nopposite."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "mouseReleased", "negative_questions": [], "module": "DOM", "syntax": "mouseReleased(fxn)", "itemtype": "method", "params": [{"type": "Function", "name": "fxn", "description": "function to be fired when mouse is\n                   released over the element."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 171, "class": "p5.Element", "description": "The .mouseReleased() function is called once after every time a\nmouse button is released over the element. This can be used to\nattach element specific event listeners."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "mouseClicked", "negative_questions": [], "module": "DOM", "syntax": "mouseClicked(fxn)", "itemtype": "method", "params": [{"type": "Function", "name": "fxn", "description": "function to be fired when mouse is\n                   clicked over the element."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 188, "class": "p5.Element", "description": "The .mouseClicked() function is called once after a mouse button is\npressed and released over the element. This can be used to\nattach element specific event listeners."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "mouseMoved", "negative_questions": [], "module": "DOM", "syntax": "mouseMoved(fxn)", "itemtype": "method", "params": [{"type": "Function", "name": "fxn", "description": "function to be fired when mouse is\n                   moved over the element."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 203, "class": "p5.Element", "description": "The .mouseMoved() function is called once every time a\nmouse moves over the element. This can be used to attach an\nelement specific event listener."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "mouseOver", "negative_questions": [], "module": "DOM", "syntax": "mouseOver(fxn)", "itemtype": "method", "params": [{"type": "Function", "name": "fxn", "description": "function to be fired when mouse is\n                   moved over the element."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 219, "class": "p5.Element", "description": "The .mouseOver() function is called once after every time a\nmouse moves onto the element. This can be used to attach an\nelement specific event listener."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "mouseOut", "negative_questions": [], "module": "DOM", "syntax": "mouseOut(fxn)", "itemtype": "method", "params": [{"type": "Function", "name": "fxn", "description": "function to be fired when mouse is\n                   moved off the element."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 234, "class": "p5.Element", "description": "The .mouseOut() function is called once after every time a\nmouse moves off the element. This can be used to attach an\nelement specific event listener."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "touchStarted", "negative_questions": [], "module": "DOM", "class": "p5.Element", "itemtype": "method", "params": [{"type": "Function", "name": "fxn", "description": "function to be fired when touch is\n                   started over the element."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 249, "syntax": "touchStarted(fxn)", "example": ["\n<div class='norender'><code>\nvar cnv;\nvar d;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.touchStarted(changeGray); // attach listener for\n                                // canvas click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width/2, height/2, d, d);\n}\n\n// this function fires with any touch anywhere\nfunction touchStarted() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>\n"], "description": "The .touchStarted() function is called once after every time a touch is\nregistered. This can be used to attach element specific event listeners."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "touchMoved", "negative_questions": [], "module": "DOM", "class": "p5.Element", "itemtype": "method", "params": [{"type": "Function", "name": "fxn", "description": "function to be fired when touch is moved\n                   over the element."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 293, "syntax": "touchMoved(fxn)", "example": ["\n<div class='norender'><code>\nvar cnv;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.touchMoved(changeGray); // attach listener for\n                              // canvas click only\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>\n"], "description": "The .touchMoved() function is called once after every time a touch move is\nregistered. This can be used to attach element specific event listeners."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "touchEnded", "negative_questions": [], "module": "DOM", "class": "p5.Element", "itemtype": "method", "params": [{"type": "Function", "name": "fxn", "description": "function to be fired when touch is\n                   ended over the element."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 329, "syntax": "touchEnded(fxn)", "example": ["\n<div class='norender'><code>\nvar cnv;\nvar d;\nvar g;\nfunction setup() {\n  cnv = createCanvas(100, 100);\n  cnv.touchEnded(changeGray);   // attach listener for\n                                // canvas click only\n  d = 10;\n  g = 100;\n}\n\nfunction draw() {\n  background(g);\n  ellipse(width/2, height/2, d, d);\n}\n\n// this function fires with any touch anywhere\nfunction touchEnded() {\n  d = d + 10;\n}\n\n// this function fires only when cnv is clicked\nfunction changeGray() {\n  g = random(0, 255);\n}\n</code></div>\n"], "description": "The .touchEnded() function is called once after every time a touch is\nregistered. This can be used to attach element specific event listeners."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "dragOver", "negative_questions": [], "module": "DOM", "syntax": "dragOver(fxn)", "itemtype": "method", "params": [{"type": "Function", "name": "fxn", "description": "function to be fired when mouse is\n                   dragged over the element."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 375, "class": "p5.Element", "description": "The .dragOver() function is called once after every time a\nfile is dragged over the element. This can be used to attach an\nelement specific event listener."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "dragLeave", "negative_questions": [], "module": "DOM", "syntax": "dragLeave(fxn)", "itemtype": "method", "params": [{"type": "Function", "name": "fxn", "description": "function to be fired when mouse is\n                   dragged over the element."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 390, "class": "p5.Element", "description": "The .dragLeave() function is called once after every time a\ndragged file leaves the element area. This can be used to attach an\nelement specific event listener."}, {"submodule": "DOM", "return": {"type": "p5.Element", "description": ""}, "name": "drop", "negative_questions": [], "module": "DOM", "syntax": "drop(callback,callback)", "itemtype": "method", "params": [{"type": "Function", "name": "callback", "description": "triggered when files are dropped."}, {"type": "Function", "name": "callback", "description": "to receive loaded file."}], "file": "src/core/p5.Element.js", "positive_questions": [], "line": 405, "class": "p5.Element", "description": "The .drop() function is called for each file dropped on the element.\nIt requires a callback that is passed a p5.File object.  You can\noptionally pass two callbacks, the first one (required) is triggered\nfor each file dropped when the file is loaded.  The second (optional)\nis triggered just once when a file (or files) are dropped."}, {"submodule": "Rendering", "return": {"type": "Object", "description": "canvas generated"}, "name": "createCanvas", "negative_questions": [], "module": "Rendering", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "w", "description": "width of the canvas"}, {"type": "Number", "name": "h", "description": "height of the canvas"}, {"type": "String", "name": "optional:", "description": "renderer 'p2d' | 'webgl'"}], "file": "src/core/rendering.js", "positive_questions": [], "line": 13, "syntax": "createCanvas(w,h,optional:)", "example": ["\n<div>\n<code>\nfunction setup() {\n  createCanvas(100, 50);\n  background(153);\n  line(0, 0, width, height);\n}\n</code>\n</div>"], "description": "Creates a canvas element in the document, and sets the dimensions of it\nin pixels. This method should be called only once at the start of setup.\nCalling createCanvas more than once in a sketch will result in very\nunpredicable behavior. If you want more than one drawing canvas\nyou could use createGraphics (hidden by default but it can be shown).<br>\nThe system variables width and height are set by the parameters passed\nto this function. If createCanvas() is not used, the window will be\ngiven a default size of 100x100 pixels."}, {"submodule": "Rendering", "name": "resizeCanvas", "negative_questions": [], "module": "Rendering", "class": "p5", "itemtype": "method", "file": "src/core/rendering.js", "positive_questions": [], "line": 101, "syntax": "resizeCanvas()", "example": ["\n<div class=\"norender\"><code>\nfunction setup() {\n  createCanvas(windowWidth, windowHeight);\n}\n\nfunction draw() {\n background(0, 100, 200);\n}\n\nfunction windowResized() {\n  resizeCanvas(windowWidth, windowHeight);\n}\n</code></div>"], "description": "Resizes the canvas to given width and height. Note that the\ncanvas will be cleared so anything drawn previously in setup\nor draw will disappear on resize. Setup will not be called\nagain."}, {"submodule": "Rendering", "name": "noCanvas", "negative_questions": [], "module": "Rendering", "class": "p5", "itemtype": "method", "file": "src/core/rendering.js", "positive_questions": [], "line": 133, "syntax": "noCanvas()", "example": ["\n<div>\n<code>\nfunction setup() {\n  noCanvas();\n}\n</code>\n</div>"], "description": "Removes the default canvas for a p5 sketch that doesn't\nrequire a canvas"}, {"submodule": "Rendering", "return": {"type": "Object", "description": "offscreen graphics buffer"}, "name": "createGraphics", "negative_questions": [], "module": "Rendering", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "w", "description": "width of the offscreen graphics buffer"}, {"type": "Number", "name": "h", "description": "height of the offscreen graphics buffer"}, {"type": "String", "name": "renderer", "description": "either 'p2d' or 'webgl'.\nundefined defaults to p2d"}], "file": "src/core/rendering.js", "positive_questions": [], "line": 152, "syntax": "createGraphics(w,h,renderer)", "example": ["\n<div>\n<code>\nvar pg;\nfunction setup() {\n  createCanvas(100, 100);\n  pg = createGraphics(100, 100);\n}\nfunction draw() {\n  background(200);\n  pg.background(100);\n  pg.noStroke();\n  pg.ellipse(pg.width/2, pg.height/2, 50, 50);\n  image(pg, 50, 50);\n  image(pg, 0, 0, 50, 50);\n}\n</code>\n</div>"], "description": "Creates and returns a new p5.Renderer object. Use this class if you need\nto draw into an off-screen graphics buffer. The two parameters define the\nwidth and height in pixels."}, {"submodule": "Rendering", "name": "blendMode", "negative_questions": [], "module": "Rendering", "class": "p5", "itemtype": "method", "params": [{"type": "String/Constant", "name": "mode", "description": "blend mode to set for canvas"}], "file": "src/core/rendering.js", "positive_questions": [], "line": 186, "syntax": "blendMode(mode)", "example": ["\n<div>\n<code>\nblendMode(LIGHTEST);\nstrokeWeight(30);\nstroke(80, 150, 255);\nline(25, 25, 75, 75);\nstroke(255, 50, 50);\nline(75, 25, 25, 75);\n</code>\n</div>\n<div>\n<code>\nblendMode(MULTIPLY);\nstrokeWeight(30);\nstroke(80, 150, 255);\nline(25, 25, 75, 75);\nstroke(255, 50, 50);\nline(75, 25, 25, 75);\n</code>\n</div>"], "description": "Blends the pixels in the display window according to the defined mode.\nThere is a choice of the following modes to blend the source pixels (A)\nwith the ones of pixels already in the display window (B):\n<ul>\n<li><code>BLEND</code> - linear interpolation of colours: C =\nA*factor + B. This is the default blending mode.</li>\n<li><code>ADD</code> - sum of A and B</li>\n<li><code>DARKEST</code> - only the darkest colour succeeds: C =\nmin(A*factor, B).</li>\n<li><code>LIGHTEST</code> - only the lightest colour succeeds: C =\nmax(A*factor, B).</li>\n<li><code>DIFFERENCE</code> - subtract colors from underlying image.</li>\n<li><code>EXCLUSION</code> - similar to <code>DIFFERENCE</code>, but less\nextreme.</li>\n<li><code>MULTIPLY</code> - multiply the colors, result will always be\ndarker.</li>\n<li><code>SCREEN</code> - opposite multiply, uses inverse values of the\ncolors.</li>\n<li><code>REPLACE</code> - the pixels entirely replace the others and\ndon't utilize alpha (transparency) values.</li>\n<li><code>OVERLAY</code> - mix of <code>MULTIPLY</code> and <code>SCREEN\n</code>. Multiplies dark values, and screens light values.</li>\n<li><code>HARD_LIGHT</code> - <code>SCREEN</code> when greater than 50%\ngray, <code>MULTIPLY</code> when lower.</li>\n<li><code>SOFT_LIGHT</code> - mix of <code>DARKEST</code> and\n<code>LIGHTEST</code>. Works like <code>OVERLAY</code>, but not as harsh.\n</li>\n<li><code>DODGE</code> - lightens light tones and increases contrast,\nignores darks.</li>\n<li><code>BURN</code> - darker areas are applied, increasing contrast,\nignores lights.</li>\n</ul>"}, {"submodule": "Structure", "name": "noLoop", "negative_questions": [], "module": "Structure", "class": "p5", "itemtype": "method", "file": "src/core/structure.js", "positive_questions": [], "line": 15, "syntax": "noLoop()", "example": ["\n<div><code>\nfunction setup() {\n  createCanvas(100, 100);\n  background(200);\n  noLoop();\n}\n\nfunction draw() {\n  line(10, 10, 90, 90);\n}\n</code></div>\n\n<div><code>\nvar x = 0;\nfunction setup() {\n  createCanvas(100, 100);\n}\n\nfunction draw() {\n  background(204);\n  x = x + 0.1;\n  if (x > width) {\n    x = 0;\n  }\n  line(x, 0, x, height);\n}\n\nfunction mousePressed() {\n  noLoop();\n}\n\nfunction mouseReleased() {\n  loop();\n}\n</code></div>"], "description": "<p>Stops p5.js from continuously executing the code within draw().\nIf loop() is called, the code in draw() begins to run continuously again.\nIf using noLoop() in setup(), it should be the last line inside the block.\n</p>\n\n<p>When noLoop() is used, it's not possible to manipulate or access the\nscreen inside event handling functions such as mousePressed() or\nkeyPressed(). Instead, use those functions to call redraw() or loop(),\nwhich will run draw(), which can update the screen properly. This means\nthat when noLoop() has been called, no drawing can happen, and functions\nlike saveFrame() or loadPixels() may not be used.</p>\n\n<p>Note that if the sketch is resized, redraw() will be called to update\nthe sketch, even after noLoop() has been specified. Otherwise, the sketch\nwould enter an odd state until loop() was called.</p>"}, {"submodule": "Structure", "name": "loop", "negative_questions": [], "module": "Structure", "class": "p5", "itemtype": "method", "file": "src/core/structure.js", "positive_questions": [], "line": 73, "syntax": "loop()", "example": ["\n<div><code>\nvar x = 0;\nfunction setup() {\n  createCanvas(100, 100);\n  noLoop();\n}\n\nfunction draw() {\n  background(204);\n  x = x + 0.1;\n  if (x > width) {\n    x = 0;\n  }\n  line(x, 0, x, height);\n}\n\nfunction mousePressed() {\n  loop();\n}\n\nfunction mouseReleased() {\n  noLoop();\n}\n</code></div>"], "description": "By default, p5.js loops through draw() continuously, executing the code\nwithin it. However, the draw() loop may be stopped by calling noLoop().\nIn that case, the draw() loop can be resumed with loop()."}, {"submodule": "Structure", "name": "push", "negative_questions": [], "module": "Structure", "class": "p5", "itemtype": "method", "file": "src/core/structure.js", "positive_questions": [], "line": 111, "syntax": "push()", "example": ["\n<div>\n<code>\nellipse(0, 50, 33, 33);  // Left circle\n\npush();  // Start a new drawing state\nstrokeWeight(10);\nfill(204, 153, 0);\ntranslate(50, 0);\nellipse(0, 50, 33, 33);  // Middle circle\npop();  // Restore original state\n\nellipse(100, 50, 33, 33);  // Right circle\n</code>\n</div>\n<div>\n<code>\nellipse(0, 50, 33, 33);  // Left circle\n\npush();  // Start a new drawing state\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(33, 50, 33, 33);  // Left-middle circle\n\npush();  // Start another new drawing state\nstroke(0, 102, 153);\nellipse(66, 50, 33, 33);  // Right-middle circle\npop();  // Restore previous state\n\npop();  // Restore original state\n\nellipse(100, 50, 33, 33);  // Right circle\n</code>\n</div>"], "description": "The push() function saves the current drawing style settings and\ntransformations, while pop() restores these settings. Note that these\nfunctions are always used together. They allow you to change the style\nand transformation settings and later return to what you had. When a new\nstate is started with push(), it builds on the current style and transform\ninformation. The push() and pop() functions can be embedded to provide\nmore control. (See the second example for a demonstration.)\n<br><br>\npush() stores information related to the current transformation state\nand style settings controlled by the following functions: fill(),\nstroke(), tint(), strokeWeight(), strokeCap(), strokeJoin(),\nimageMode(), rectMode(), ellipseMode(), colorMode(), textAlign(),\ntextFont(), textMode(), textSize(), textLeading()."}, {"submodule": "Structure", "name": "pop", "negative_questions": [], "module": "Structure", "class": "p5", "itemtype": "method", "file": "src/core/structure.js", "positive_questions": [], "line": 179, "syntax": "pop()", "example": ["\n<div>\n<code>\nellipse(0, 50, 33, 33);  // Left circle\n\npush();  // Start a new drawing state\ntranslate(50, 0);\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(0, 50, 33, 33);  // Middle circle\npop();  // Restore original state\n\nellipse(100, 50, 33, 33);  // Right circle\n</code>\n</div>\n<div>\n<code>\nellipse(0, 50, 33, 33);  // Left circle\n\npush();  // Start a new drawing state\nstrokeWeight(10);\nfill(204, 153, 0);\nellipse(33, 50, 33, 33);  // Left-middle circle\n\npush();  // Start another new drawing state\nstroke(0, 102, 153);\nellipse(66, 50, 33, 33);  // Right-middle circle\npop();  // Restore previous state\n\npop();  // Restore original state\n\nellipse(100, 50, 33, 33);  // Right circle\n</code>\n</div>"], "description": "The push() function saves the current drawing style settings and\ntransformations, while pop() restores these settings. Note that these\nfunctions are always used together. They allow you to change the style\nand transformation settings and later return to what you had. When a new\nstate is started with push(), it builds on the current style and transform\ninformation. The push() and pop() functions can be embedded to provide\nmore control. (See the second example for a demonstration.)\n<br><br>\npush() stores information related to the current transformation state\nand style settings controlled by the following functions: fill(),\nstroke(), tint(), strokeWeight(), strokeCap(), strokeJoin(),\nimageMode(), rectMode(), ellipseMode(), colorMode(), textAlign(),\ntextFont(), textMode(), textSize(), textLeading()."}, {"submodule": "Structure", "name": "redraw", "negative_questions": [], "module": "Structure", "class": "p5", "itemtype": "method", "file": "src/core/structure.js", "positive_questions": [], "line": 254, "syntax": "redraw()", "example": ["\n   <div><code>\n     var x = 0;\n    function setup() {\n       createCanvas(100, 100);\n       noLoop();\n     }\n    function draw() {\n       background(204);\n       line(x, 0, x, height);\n     }\n    function mousePressed() {\n       x += 1;\n       redraw();\n     }\n   </code></div>"], "description": "Executes the code within draw() one time. This functions allows the\n program to update the display window only when necessary, for example\n when an event registered by mousePressed() or keyPressed() occurs.\nIn structuring a program, it only makes sense to call redraw() within\n events such as mousePressed(). This is because redraw() does not run\n draw() immediately (it only sets a flag that indicates an update is\n needed).\nThe redraw() function does not work properly when called inside draw().\n To enable/disable animations, use loop() and noLoop()."}, {"submodule": "Transform", "return": {"type": "P5", "description": "the p5 object"}, "name": "applyMatrix", "negative_questions": [], "module": "Transform", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "n00", "description": "numbers which define the 3x2 matrix to be multiplied"}, {"type": "Number", "name": "n01", "description": "numbers which define the 3x2 matrix to be multiplied"}, {"type": "Number", "name": "n02", "description": "numbers which define the 3x2 matrix to be multiplied"}, {"type": "Number", "name": "n10", "description": "numbers which define the 3x2 matrix to be multiplied"}, {"type": "Number", "name": "n11", "description": "numbers which define the 3x2 matrix to be multiplied"}, {"type": "Number", "name": "n12", "description": "numbers which define the 3x2 matrix to be multiplied"}], "file": "src/core/transform.js", "positive_questions": [], "line": 15, "syntax": "applyMatrix(n00,n01,n02,n10,n11,n12)", "example": ["\n<div>\n<code>\n// Example in the works.\n</code>\n</div>"], "description": "Multiplies the current matrix by the one specified through the parameters.\nThis is very slow because it will try to calculate the inverse of the\ntransform, so avoid it whenever possible."}, {"submodule": "Transform", "return": {"type": "P5", "description": "the p5 object"}, "name": "resetMatrix", "negative_questions": [], "module": "Transform", "class": "p5", "itemtype": "method", "file": "src/core/transform.js", "positive_questions": [], "line": 52, "syntax": "resetMatrix()", "example": ["\n<div>\n<code>\n// Example in the works.\n</code>\n</div>"], "description": "Replaces the current matrix with the identity matrix."}, {"submodule": "Transform", "return": {"type": "P5", "description": "the p5 object"}, "name": "rotate", "negative_questions": [], "module": "Transform", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "angle", "description": "the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode"}], "file": "src/core/transform.js", "positive_questions": [], "line": 69, "syntax": "rotate(angle)", "example": ["\n<div>\n<code>\ntranslate(width/2, height/2);\nrotate(PI/3.0);\nrect(-26, -26, 52, 52);\n</code>\n</div>"], "description": "Rotates a shape the amount specified by the angle parameter. This\nfunction accounts for angleMode, so angles can be entered in either\nRADIANS or DEGREES.\n\nObjects are always rotated around their relative position to the\norigin and positive numbers rotate objects in a clockwise direction.\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nrotate(HALF_PI) and then rotate(HALF_PI) is the same as rotate(PI).\nAll tranformations are reset when draw() begins again.\n\nTechnically, rotate() multiplies the current transformation matrix\nby a rotation matrix. This function can be further controlled by\nthe push() and pop()."}, {"submodule": "Transform", "return": {"type": "P5", "description": "the p5 object"}, "name": "scale", "negative_questions": [], "module": "Transform", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "s", "description": "percentage to scale the object, or percentage to\n                     scale the object in the x-axis if multiple arguments\n                     are given"}, {"optional": true, "type": "Number", "name": "y", "description": "percentage to scale the object in the y-axis"}], "file": "src/core/transform.js", "positive_questions": [], "line": 148, "syntax": "scale(s,[y])", "example": ["\n<div>\n<code>\ntranslate(width/2, height/2);\nrotate(PI/3.0);\nrect(-26, -26, 52, 52);\n</code>\n</div>\n\n<div>\n<code>\nrect(30, 20, 50, 50);\nscale(0.5, 1.3);\nrect(30, 20, 50, 50);\n</code>\n</div>"], "description": "Increases or decreases the size of a shape by expanding and contracting\nvertices. Objects always scale from their relative origin to the\ncoordinate system. Scale values are specified as decimal percentages.\nFor example, the function call scale(2.0) increases the dimension of a\nshape by 200%.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function multiply the effect. For example, calling scale(2.0)\nand then scale(1.5) is the same as scale(3.0). If scale() is called\nwithin draw(), the transformation is reset when the loop begins again.\n\nUsing this fuction with the z parameter requires using P3D as a\nparameter for size(), as shown in the third example above. This function\ncan be further controlled with push() and pop()."}, {"submodule": "Transform", "return": {"type": "P5", "description": "the p5 object"}, "name": "shearX", "negative_questions": [], "module": "Transform", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "angle", "description": "angle of shear specified in radians or degrees,\n                       depending on current angleMode"}], "file": "src/core/transform.js", "positive_questions": [], "line": 196, "syntax": "shearX(angle)", "example": ["\n<div>\n<code>\ntranslate(width/4, height/4);\nshearX(PI/4.0);\nrect(0, 0, 30, 30);\n</code>\n</div>"], "description": "Shears a shape around the x-axis the amount specified by the angle\nparameter. Angles should be specified in the current angleMode.\nObjects are always sheared around their relative position to the origin\nand positive numbers shear objects in a clockwise direction.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nshearX(PI/2) and then shearX(PI/2) is the same as shearX(PI).\nIf shearX() is called within the draw(), the transformation is reset when\nthe loop begins again.\n\nTechnically, shearX() multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by the\npush() and pop() functions."}, {"submodule": "Transform", "return": {"type": "P5", "description": "the p5 object"}, "name": "shearY", "negative_questions": [], "module": "Transform", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "angle", "description": "angle of shear specified in radians or degrees,\n                       depending on current angleMode"}], "file": "src/core/transform.js", "positive_questions": [], "line": 233, "syntax": "shearY(angle)", "example": ["\n<div>\n<code>\ntranslate(width/4, height/4);\nshearY(PI/4.0);\nrect(0, 0, 30, 30);\n</code>\n</div>"], "description": "Shears a shape around the y-axis the amount specified by the angle\nparameter. Angles should be specified in the current angleMode. Objects\nare always sheared around their relative position to the origin and\npositive numbers shear objects in a clockwise direction.\n\nTransformations apply to everything that happens after and subsequent\ncalls to the function accumulates the effect. For example, calling\nshearY(PI/2) and then shearY(PI/2) is the same as shearY(PI). If\nshearY() is called within the draw(), the transformation is reset when\nthe loop begins again.\n\nTechnically, shearY() multiplies the current transformation matrix by a\nrotation matrix. This function can be further controlled by the\npush() and pop() functions."}, {"submodule": "Transform", "return": {"type": "P5", "description": "the p5 object"}, "name": "translate", "negative_questions": [], "module": "Transform", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x", "description": "left/right translation"}, {"type": "Number", "name": "y", "description": "up/down translation"}], "file": "src/core/transform.js", "positive_questions": [], "line": 270, "syntax": "translate(x,y)", "example": ["\n<div>\n<code>\ntranslate(30, 20);\nrect(0, 0, 55, 55);\n</code>\n</div>\n\n<div>\n<code>\nrect(0, 0, 55, 55);  // Draw rect at original 0,0\ntranslate(30, 20);\nrect(0, 0, 55, 55);  // Draw rect at new 0,0\ntranslate(14, 14);\nrect(0, 0, 55, 55);  // Draw rect at new 0,0\n</code>\n</div>"], "description": "Specifies an amount to displace objects within the display window.\nThe x parameter specifies left/right translation, the y parameter\nspecifies up/down translation.\n\nTransformations are cumulative and apply to everything that happens after\nand subsequent calls to the function accumulates the effect. For example,\ncalling translate(50, 0) and then translate(20, 0) is the same as\ntranslate(70, 0). If translate() is called within draw(), the\ntransformation is reset when the loop begins again. This function can be\nfurther controlled by using push() and pop()."}, {"submodule": "Vertex", "return": {"type": "Object", "description": "the p5 object"}, "name": "beginContour", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "file": "src/core/vertex.js", "positive_questions": [], "line": 21, "syntax": "beginContour()", "example": ["\n<div>\n<code>\ntranslate(50, 50);\nstroke(255, 0, 0);\nbeginShape();\n// Exterior part of shape, clockwise winding\nvertex(-40, -40);\nvertex(40, -40);\nvertex(40, 40);\nvertex(-40, 40);\n// Interior part of shape, counter-clockwise winding\nbeginContour();\nvertex(-20, -20);\nvertex(-20, 20);\nvertex(20, 20);\nvertex(20, -20);\nendContour();\nendShape(CLOSE);\n</code>\n</div>"], "description": "Use the beginContour() and endContour() functions to create negative\nshapes within shapes such as the center of the letter 'O'. beginContour()\nbegins recording vertices for the shape and endContour() stops recording.\nThe vertices that define a negative shape must \"wind\" in the opposite\ndirection from the exterior shape. First draw vertices for the exterior\nclockwise order, then for internal shapes, draw vertices\nshape in counter-clockwise.\n<br><br>\nThese functions can only be used within a beginShape()/endShape() pair and\ntransformations such as translate(), rotate(), and scale() do not work\nwithin a beginContour()/endContour() pair. It is also not possible to use\nother shapes, such as ellipse() or rect() within."}, {"submodule": "Vertex", "return": {"type": "Object", "description": "the p5 object"}, "name": "beginShape", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number/Constant", "name": "kind", "description": "either POINTS, LINES, TRIANGLES,\n                               TRIANGLE_FAN, TRIANGLE_STRIP, QUADS,\n                               or QUAD_STRIP"}], "file": "src/core/vertex.js", "positive_questions": [], "line": 65, "syntax": "beginShape(kind)", "example": ["\n<div>\n<code>\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape(CLOSE);\n</code>\n</div>\n\n<div>\n<code>\n// currently not working\nbeginShape(POINTS);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(LINES);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nbeginShape();\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape(CLOSE);\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(TRIANGLES);\nvertex(30, 75);\nvertex(40, 20);\nvertex(50, 75);\nvertex(60, 20);\nvertex(70, 75);\nvertex(80, 20);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(TRIANGLE_STRIP);\nvertex(30, 75);\nvertex(40, 20);\nvertex(50, 75);\nvertex(60, 20);\nvertex(70, 75);\nvertex(80, 20);\nvertex(90, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(TRIANGLE_FAN);\nvertex(57.5, 50);\nvertex(57.5, 15);\nvertex(92, 50);\nvertex(57.5, 85);\nvertex(22, 50);\nvertex(57.5, 15);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(QUADS);\nvertex(30, 20);\nvertex(30, 75);\nvertex(50, 75);\nvertex(50, 20);\nvertex(65, 20);\nvertex(65, 75);\nvertex(85, 75);\nvertex(85, 20);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape(QUAD_STRIP);\nvertex(30, 20);\nvertex(30, 75);\nvertex(50, 20);\nvertex(50, 75);\nvertex(65, 20);\nvertex(65, 75);\nvertex(85, 20);\nvertex(85, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape();\nvertex(20, 20);\nvertex(40, 20);\nvertex(40, 40);\nvertex(60, 40);\nvertex(60, 60);\nvertex(20, 60);\nendShape(CLOSE);\n</code>\n</div>"], "description": "Using the beginShape() and endShape() functions allow creating more\ncomplex forms. beginShape() begins recording vertices for a shape and\nendShape() stops recording. The value of the kind parameter tells it which\ntypes of shapes to create from the provided vertices. With no mode\nspecified, the shape can be any irregular polygon. The parameters\navailable for beginShape() are POINTS, LINES, TRIANGLES, TRIANGLE_FAN,\nTRIANGLE_STRIP, QUADS, and QUAD_STRIP. After calling the beginShape()\nfunction, a series of vertex() commands must follow. To stop drawing the\nshape, call endShape(). Each shape will be outlined with the current\nstroke color and filled with the fill color.\n\nTransformations such as translate(), rotate(), and scale() do not work\nwithin beginShape(). It is also not possible to use other shapes, such as\nellipse() or rect() within beginShape()."}, {"submodule": "Vertex", "return": {"type": "Object", "description": "the p5 object"}, "name": "bezierVertex", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x2", "description": "x-coordinate for the first control point"}, {"type": "Number", "name": "y2", "description": "y-coordinate for the first control point"}, {"type": "Number", "name": "x3", "description": "x-coordinate for the second control point"}, {"type": "Number", "name": "y3", "description": "y-coordinate for the second control point"}, {"type": "Number", "name": "x4", "description": "x-coordinate for the anchor point"}, {"type": "Number", "name": "y4", "description": "y-coordinate for the anchor point"}], "file": "src/core/vertex.js", "positive_questions": [], "line": 245, "syntax": "bezierVertex(x2,y2,x3,y3,x4,y4)", "example": ["\n<div>\n<code>\nnoFill();\nbeginShape();\nvertex(30, 20);\nbezierVertex(80, 0, 80, 75, 30, 75);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nbeginShape();\nvertex(30, 20);\nbezierVertex(80, 0, 80, 75, 30, 75);\nbezierVertex(50, 80, 60, 25, 30, 20);\nendShape();\n</code>\n</div>"], "description": "Specifies vertex coordinates for Bezier curves. Each call to\nbezierVertex() defines the position of two control points and\none anchor point of a Bezier curve, adding a new segment to a\nline or shape. The first time bezierVertex() is used within a\nbeginShape() call, it must be prefaced with a call to vertex()\nto set the first anchor point. This function must be used between\nbeginShape() and endShape() and only when there is no MODE\nparameter specified to beginShape()."}, {"submodule": "Vertex", "return": {"type": "Object", "description": "the p5 object"}, "name": "curveVertex", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x", "description": "x-coordinate of the vertex"}, {"type": "Number", "name": "y", "description": "y-coordinate of the vertex"}], "file": "src/core/vertex.js", "positive_questions": [], "line": 303, "syntax": "curveVertex(x,y)", "example": ["\n<div>\n<code>\nnoFill();\nbeginShape();\ncurveVertex(84,  91);\ncurveVertex(84,  91);\ncurveVertex(68,  19);\ncurveVertex(21,  17);\ncurveVertex(32, 100);\ncurveVertex(32, 100);\nendShape();\n</code>\n</div>"], "description": "Specifies vertex coordinates for curves. This function may only\nbe used between beginShape() and endShape() and only when there\nis no MODE parameter specified to beginShape(). The first and\nlast points in a series of curveVertex() lines will be used to\nguide the beginning and end of a the curve. A minimum of four\npoints is required to draw a tiny curve between the second and\nthird points. Adding a fifth point with curveVertex() will draw\nthe curve between the second, third, and fourth points. The\ncurveVertex() function is an implementation of Catmull-Rom\nsplines."}, {"submodule": "Vertex", "return": {"type": "Object", "description": "the p5 object"}, "name": "endContour", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "file": "src/core/vertex.js", "positive_questions": [], "line": 340, "syntax": "endContour()", "example": ["\n<div>\n<code>\ntranslate(50, 50);\nstroke(255, 0, 0);\nbeginShape();\n// Exterior part of shape, clockwise winding\nvertex(-40, -40);\nvertex(40, -40);\nvertex(40, 40);\nvertex(-40, 40);\n// Interior part of shape, counter-clockwise winding\nbeginContour();\nvertex(-20, -20);\nvertex(-20, 20);\nvertex(20, 20);\nvertex(20, -20);\nendContour();\nendShape(CLOSE);\n</code>\n</div>"], "description": "Use the beginContour() and endContour() functions to create negative\nshapes within shapes such as the center of the letter 'O'. beginContour()\nbegins recording vertices for the shape and endContour() stops recording.\nThe vertices that define a negative shape must \"wind\" in the opposite\ndirection from the exterior shape. First draw vertices for the exterior\nclockwise order, then for internal shapes, draw vertices\nshape in counter-clockwise.\n<br><br>\nThese functions can only be used within a beginShape()/endShape() pair and\ntransformations such as translate(), rotate(), and scale() do not work\nwithin a beginContour()/endContour() pair. It is also not possible to use\nother shapes, such as ellipse() or rect() within."}, {"submodule": "Vertex", "return": {"type": "Object", "description": "the p5 object"}, "name": "endShape", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number/Constant", "name": "mode", "description": "use CLOSE to close the shape"}], "file": "src/core/vertex.js", "positive_questions": [], "line": 391, "syntax": "endShape(mode)", "example": ["\n<div>\n<code>\nnoFill();\n\nbeginShape();\nvertex(20, 20);\nvertex(45, 20);\nvertex(45, 80);\nendShape(CLOSE);\n\nbeginShape();\nvertex(50, 20);\nvertex(75, 20);\nvertex(75, 80);\nendShape();\n</code>\n</div>"], "description": "The endShape() function is the companion to beginShape() and may only be\ncalled after beginShape(). When endshape() is called, all of image data\ndefined since the previous call to beginShape() is written into the image\nbuffer. The constant CLOSE as the value for the MODE parameter to close\nthe shape (to connect the beginning and the end)."}, {"submodule": "Vertex", "return": {"type": "Object", "description": "the p5 object"}, "name": "quadraticVertex", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "cx", "description": "x-coordinate for the control point"}, {"type": "Number", "name": "cy", "description": "y-coordinate for the control point"}, {"type": "Number", "name": "x3", "description": "x-coordinate for the anchor point"}, {"type": "Number", "name": "y3", "description": "y-coordinate for the anchor point"}], "file": "src/core/vertex.js", "positive_questions": [], "line": 449, "syntax": "quadraticVertex(cx,cy,x3,y3)", "example": ["\n<div>\n<code>\nnoFill();\nstrokeWeight(4);\nbeginShape();\nvertex(20, 20);\nquadraticVertex(80, 20, 50, 50);\nendShape();\n</code>\n</div>\n\n<div>\n<code>\nnoFill();\nstrokeWeight(4);\nbeginShape();\nvertex(20, 20);\nquadraticVertex(80, 20, 50, 50);\nquadraticVertex(20, 80, 80, 80);\nvertex(80, 60);\nendShape();\n</code>\n</div>"], "description": "Specifies vertex coordinates for quadratic Bezier curves. Each call to\nquadraticVertex() defines the position of one control points and one\nanchor point of a Bezier curve, adding a new segment to a line or shape.\nThe first time quadraticVertex() is used within a beginShape() call, it\nmust be prefaced with a call to vertex() to set the first anchor point.\nThis function must be used between beginShape() and endShape() and only\nwhen there is no MODE parameter specified to beginShape()."}, {"submodule": "Vertex", "return": {"type": "Object", "description": "the p5 object"}, "name": "vertex", "negative_questions": [], "module": "Shape", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x", "description": "x-coordinate of the vertex"}, {"type": "Number", "name": "y", "description": "y-coordinate of the vertex"}], "file": "src/core/vertex.js", "positive_questions": [], "line": 521, "syntax": "vertex(x,y)", "example": ["\n<div>\n<code>\nbeginShape(POINTS);\nvertex(30, 20);\nvertex(85, 20);\nvertex(85, 75);\nvertex(30, 75);\nendShape();\n</code>\n</div>"], "description": "All shapes are constructed by connecting a series of vertices. vertex()\nis used to specify the vertex coordinates for points, lines, triangles,\nquads, and polygons. It is used exclusively within the beginShape() and\nendShape() functions."}, {"submodule": "Acceleration", "name": "deviceOrientation", "negative_questions": [], "module": "Events", "syntax": "deviceOrientation", "itemtype": "property", "file": "src/events/acceleration.js", "positive_questions": [], "line": 12, "class": "p5", "description": "The system variable deviceOrientation always contains the orientation of\nthe device. The value of this variable will either be set 'landscape'\nor 'portrait'. If no data is available it will be set to 'undefined'."}, {"submodule": "Acceleration", "name": "accelerationX", "negative_questions": [], "module": "Events", "syntax": "accelerationX", "itemtype": "property", "file": "src/events/acceleration.js", "positive_questions": [], "line": 21, "class": "p5", "description": "The system variable accelerationX always contains the acceleration of the\ndevice along the x axis. Value is represented as meters per second squared."}, {"submodule": "Acceleration", "name": "accelerationY", "negative_questions": [], "module": "Events", "syntax": "accelerationY", "itemtype": "property", "file": "src/events/acceleration.js", "positive_questions": [], "line": 29, "class": "p5", "description": "The system variable accelerationY always contains the acceleration of the\ndevice along the y axis. Value is represented as meters per second squared."}, {"submodule": "Acceleration", "name": "accelerationZ", "negative_questions": [], "module": "Events", "syntax": "accelerationZ", "itemtype": "property", "file": "src/events/acceleration.js", "positive_questions": [], "line": 37, "class": "p5", "description": "The system variable accelerationZ always contains the acceleration of the\ndevice along the z axis. Value is represented as meters per second squared."}, {"submodule": "Acceleration", "name": "pAccelerationX", "negative_questions": [], "module": "Events", "syntax": "pAccelerationX", "itemtype": "property", "file": "src/events/acceleration.js", "positive_questions": [], "line": 45, "class": "p5", "description": "The system variable pAccelerationX always contains the acceleration of the\ndevice along the x axis in the frame previous to the current frame. Value\nis represented as meters per second squared."}, {"submodule": "Acceleration", "name": "pAccelerationY", "negative_questions": [], "module": "Events", "syntax": "pAccelerationY", "itemtype": "property", "file": "src/events/acceleration.js", "positive_questions": [], "line": 54, "class": "p5", "description": "The system variable pAccelerationY always contains the acceleration of the\ndevice along the y axis in the frame previous to the current frame. Value\nis represented as meters per second squared."}, {"submodule": "Acceleration", "name": "pAccelerationZ", "negative_questions": [], "module": "Events", "syntax": "pAccelerationZ", "itemtype": "property", "file": "src/events/acceleration.js", "positive_questions": [], "line": 63, "class": "p5", "description": "The system variable pAccelerationZ always contains the acceleration of the\ndevice along the z axis in the frame previous to the current frame. Value\nis represented as meters per second squared."}, {"submodule": "Acceleration", "name": "setMoveThreshold", "negative_questions": [], "module": "Events", "syntax": "setMoveThreshold(value)", "itemtype": "method", "params": [{"type": "Number", "name": "value", "description": "The threshold value"}], "file": "src/events/acceleration.js", "positive_questions": [], "line": 85, "class": "p5", "description": "The setMoveThreshold() function is used to set the movement threshold for\nthe deviceMoved() function."}, {"submodule": "Acceleration", "name": "deviceMoved", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/acceleration.js", "positive_questions": [], "line": 101, "syntax": "deviceMoved()", "example": ["\n<div>\n<code>\n// Run this example on a mobile device\n// Move the device around\n// to change the value.\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceMoved() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>"], "description": "The deviceMoved() function is called when the devices orientation changes\nby more than the threshold value."}, {"submodule": "Acceleration", "name": "deviceTurned", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/acceleration.js", "positive_questions": [], "line": 127, "syntax": "deviceTurned()", "example": ["\n<div>\n<code>\n// Run this example on a mobile device\n// Rotate the device by 90 degrees\n// to change the value.\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction deviceTurned() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>"], "description": "The deviceTurned() function is called when the device rotates by\nmore than 90 degrees."}, {"submodule": "Keyboard", "name": "keyIsPressed", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/keyboard.js", "positive_questions": [], "line": 18, "syntax": "keyIsPressed", "example": ["\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  if (keyIsPressed === true) {\n    fill(0);\n  } else {\n    fill(255);\n  }\n  rect(25, 25, 50, 50);\n}\n</code>\n</div>"], "description": "The boolean system variable keyIsPressed is true if any key is pressed\nand false if no keys are pressed."}, {"submodule": "Keyboard", "name": "key", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/keyboard.js", "positive_questions": [], "line": 41, "syntax": "key", "example": ["\n<div><code>\n// Click any key to display it!\n// (Not Guaranteed to be Case Sensitive)\nfunction setup() {\n  fill(245, 123, 158);\n  textSize(50);\n}\n\nfunction draw() {\n  background(200);\n  text(key, 33,65); // Display last key pressed.\n}\n</div></code>"], "description": "The system variable key always contains the value of the most recent\nkey on the keyboard that was typed. To get the proper capitalization, it\nis best to use it within keyTyped(). For non-ASCII keys, use the keyCode\nvariable."}, {"submodule": "Keyboard", "name": "keyCode", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/keyboard.js", "positive_questions": [], "line": 65, "syntax": "keyCode", "example": ["\n<div><code>\nvar fillVal = 126;\nfunction draw() {\n  fill(fillVal);\n  rect(25, 25, 50, 50);\n}\n\nfunction keyPressed() {\n  if (keyCode == UP_ARROW) {\n    fillVal = 255;\n  } else if (keyCode == DOWN_ARROW) {\n    fillVal = 0;\n  }\n  return false; // prevent default\n}\n</code></div>"], "description": "The variable keyCode is used to detect special keys such as BACKSPACE,\nDELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, UP_ARROW,\nDOWN_ARROW, LEFT_ARROW, RIGHT_ARROW."}, {"submodule": "Keyboard", "name": "keyPressed", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/keyboard.js", "positive_questions": [], "line": 91, "syntax": "keyPressed()", "example": ["\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyPressed() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyPressed() {\n  if (keyCode === LEFT_ARROW) {\n    value = 255;\n  } else if (keyCode === RIGHT_ARROW) {\n    value = 0;\n  }\n  return false; // prevent any default behavior\n}\n</code>\n</div>"], "description": "The keyPressed() function is called once every time a key is pressed. The\nkeyCode for the key that was pressed is stored in the keyCode variable.\n<br><br>\nFor non-ASCII keys, use the keyCode variable. You can check if the keyCode\nequals BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, SHIFT, CONTROL,\nOPTION, ALT, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW.\n<br><br>\nFor ASCII keys that was pressed is stored in the key variable. However, it\ndoes not distinguish between uppercase and lowercase. For this reason, it\nis recommended to use keyTyped() to read the key variable, in which the\ncase of the variable will be distinguished.\n<br><br>\nBecause of how operating systems handle key repeats, holding down a key\nmay cause multiple calls to keyTyped() (and keyReleased() as well). The\nrate of repeat is set by the operating system and how each computer is\nconfigured.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method."}, {"submodule": "Keyboard", "name": "keyReleased", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/keyboard.js", "positive_questions": [], "line": 166, "syntax": "keyReleased()", "example": ["\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyReleased() {\n  if (value === 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n  return false; // prevent any default behavior\n}\n</code>\n</div>"], "description": "The keyReleased() function is called once every time a key is released.\nSee key and keyCode for more information.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method."}, {"submodule": "Keyboard", "name": "keyTyped", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/keyboard.js", "positive_questions": [], "line": 213, "syntax": "keyTyped()", "example": ["\n<div>\n<code>\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction keyTyped() {\n  if (key === 'a') {\n    value = 255;\n  } else if (key === 'b') {\n    value = 0;\n  }\n  return false; // prevent any default behavior\n}\n</code>\n</div>"], "description": "The keyTyped() function is called once every time a key is pressed, but\naction keys such as Ctrl, Shift, and Alt are ignored. The most recent\nkey pressed will be stored in the key variable.\n<br><br>\nBecause of how operating systems handle key repeats, holding down a key\nwill cause multiple calls to keyTyped(), the rate is set by the operating\nsystem and how each computer is configured.<br><br>\nBrowsers may have different default\nbehaviors attached to various key events. To prevent any default\nbehavior for this event, add \"return false\" to the end of the method."}, {"submodule": "Keyboard", "return": {"type": "Boolean", "description": "whether key is down or not"}, "name": "keyIsDown", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "code", "description": "The key to check for."}], "file": "src/events/keyboard.js", "positive_questions": [], "line": 266, "syntax": "keyIsDown(code)", "example": ["\n<div><code>\nvar x = 100;\nvar y = 100;\n\nfunction setup() {\n  createCanvas(512, 512);\n}\n\nfunction draw() {\n  if (keyIsDown(LEFT_ARROW))\n    x-=5;\n\n  if (keyIsDown(RIGHT_ARROW))\n    x+=5;\n\n  if (keyIsDown(UP_ARROW))\n    y-=5;\n\n  if (keyIsDown(DOWN_ARROW))\n    y+=5;\n\n  clear();\n  fill(255, 0, 0);\n  ellipse(x, y, 50, 50);\n}\n</code></div>"], "description": "The keyIsDown function checks if the key is currently down, i.e. pressed.\nIt can be used if you have an object that moves, and you want several keys\nto be able to affect its behaviour simultaneously, such as moving a\nsprite diagonally. You can put in any number representing the keyCode of\nthe key, or use any of the variable keyCode names listed\n<a href=\"http://p5js.org/reference/#p5/keyCode\">here</a>."}, {"submodule": "Mouse", "name": "mouseX", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/mouse.js", "positive_questions": [], "line": 15, "syntax": "mouseX", "example": ["\n<div>\n<code>\n// Move the mouse across the canvas\nfunction draw() {\n  background(244, 248, 252);\n  line(mouseX, 0, mouseX, 100);\n}\n</code>\n</div>"], "description": "The system variable mouseX always contains the current horizontal\nposition of the mouse, relative to (0, 0) of the canvas."}, {"submodule": "Mouse", "name": "mouseY", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/mouse.js", "positive_questions": [], "line": 34, "syntax": "mouseY", "example": ["\n<div>\n<code>\n// Move the mouse across the canvas\nfunction draw() {\n  background(244, 248, 252);\n  line(0, mouseY, 100, mouseY);\n}\n</code>\n</div>"], "description": "The system variable mouseY always contains the current vertical position\nof the mouse, relative to (0, 0) of the canvas."}, {"submodule": "Mouse", "name": "pmouseX", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/mouse.js", "positive_questions": [], "line": 53, "syntax": "pmouseX", "example": ["\n<div>\n<code>\n// Move the mouse across the canvas to leave a trail\nfunction setup() {\n  //slow down the frameRate to make it more visible\n  frameRate(10);\n}\n\nfunction draw() {\n  background(244, 248, 252);\n  line(mouseX, mouseY, pmouseX, pmouseY);\n  print(pmouseX + \" -> \" + mouseX);\n}\n\n</code>\n</div>"], "description": "The system variable pmouseX always contains the horizontal position of\nthe mouse in the frame previous to the current frame, relative to (0, 0)\nof the canvas."}, {"submodule": "Mouse", "name": "pmouseY", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/mouse.js", "positive_questions": [], "line": 80, "syntax": "pmouseY", "example": ["\n<div>\n<code>\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n  //draw a square only if the mouse is not moving\n  if(mouseY == pmouseY && mouseX == pmouseX)\n    rect(20,20,60,60);\n\n  print(pmouseY + \" -> \" + mouseY);\n}\n\n</code>\n</div>"], "description": "The system variable pmouseY always contains the vertical position of the\nmouse in the frame previous to the current frame, relative to (0, 0) of\nthe canvas."}, {"submodule": "Mouse", "name": "winMouseX", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/mouse.js", "positive_questions": [], "line": 105, "syntax": "winMouseX", "example": ["\n<div>\n<code>\nvar myCanvas;\n\nfunction setup() {\n  //use a variable to store a pointer to the canvas\n  myCanvas = createCanvas(100, 100);\n}\n\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n\n  //move the canvas to the horizontal mouse position\n  //relative to the window\n  myCanvas.position(winMouseX+1, windowHeight/2);\n\n //the y of the square is relative to the canvas\n rect(20,mouseY,60,60);\n}\n\n</code>\n</div>"], "description": "The system variable winMouseX always contains the current horizontal\nposition of the mouse, relative to (0, 0) of the window."}, {"submodule": "Mouse", "name": "winMouseY", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/mouse.js", "positive_questions": [], "line": 138, "syntax": "winMouseY", "example": ["\n<div>\n<code>\nvar myCanvas;\n\nfunction setup() {\n  //use a variable to store a pointer to the canvas\n  myCanvas = createCanvas(100, 100);\n}\n\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n\n  //move the canvas to the vertical mouse position\n  //relative to the window\n  myCanvas.position(windowWidth/2, winMouseY+1);\n\n //the x of the square is relative to the canvas\n rect(mouseX,20,60,60);\n}\n\n</code>\n</div>"], "description": "The system variable winMouseY always contains the current vertical\nposition of the mouse, relative to (0, 0) of the window."}, {"submodule": "Mouse", "name": "pwinMouseX", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/mouse.js", "positive_questions": [], "line": 171, "syntax": "pwinMouseX", "example": ["\n<div>\n<code>\n\nvar myCanvas;\n\nfunction setup() {\n  //use a variable to store a pointer to the canvas\n  myCanvas = createCanvas(100, 100);\n  noStroke();\n  fill(237, 34, 93);\n  }\n\nfunction draw() {\n  clear();\n  //the difference between previous and\n  //current x position is the horizontal mouse speed\n  var speed = abs(winMouseX-pwinMouseX);\n  //change the size of the circle\n  //according to the horizontal speed\n  ellipse(50, 50, 10+speed*5, 10+speed*5);\n  //move the canvas to the mouse position\n  myCanvas.position( winMouseX+1, winMouseY+1);\n}\n\n</code>\n</div>"], "description": "The system variable pwinMouseX always contains the horizontal position\nof the mouse in the frame previous to the current frame, relative to\n(0, 0) of the window."}, {"submodule": "Mouse", "name": "pwinMouseY", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/mouse.js", "positive_questions": [], "line": 208, "syntax": "pwinMouseY", "example": ["\n<div>\n<code>\n\nvar myCanvas;\n\nfunction setup() {\n  //use a variable to store a pointer to the canvas\n  myCanvas = createCanvas(100, 100);\n  noStroke();\n  fill(237, 34, 93);\n  }\n\nfunction draw() {\n  clear();\n  //the difference between previous and\n  //current y position is the vertical mouse speed\n  var speed = abs(winMouseY-pwinMouseY);\n  //change the size of the circle\n  //according to the vertical speed\n  ellipse(50, 50, 10+speed*5, 10+speed*5);\n  //move the canvas to the mouse position\n  myCanvas.position( winMouseX+1, winMouseY+1);\n}\n\n</code>\n</div>"], "description": "The system variable pwinMouseY always contains the vertical position of\nthe mouse in the frame previous to the current frame, relative to (0, 0)\nof the window."}, {"submodule": "Mouse", "name": "mouseButton", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/mouse.js", "positive_questions": [], "line": 246, "syntax": "mouseButton", "example": ["\n<div>\n<code>\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n\n  if (mouseIsPressed) {\n    if (mouseButton == LEFT)\n      ellipse(50, 50, 50, 50);\n    if (mouseButton == RIGHT)\n      rect(25, 25, 50, 50);\n    if (mouseButton == CENTER)\n      triangle(23, 75, 50, 20, 78, 75);\n  }\n\n  print(mouseButton);\n}\n</code>\n</div>"], "description": "Processing automatically tracks if the mouse button is pressed and which\nbutton is pressed. The value of the system variable mouseButton is either\nLEFT, RIGHT, or CENTER depending on which button was pressed last.\nWarning: different browsers may track mouseButton differently."}, {"submodule": "Mouse", "name": "mouseIsPressed", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "property", "file": "src/events/mouse.js", "positive_questions": [], "line": 277, "syntax": "mouseIsPressed", "example": ["\n<div>\n<code>\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n\n  if (mouseIsPressed)\n    ellipse(50, 50, 50, 50);\n  else\n    rect(25, 25, 50, 50);\n\n  print(mouseIsPressed);\n}\n</code>\n</div>"], "description": "The boolean system variable mouseIsPressed is true if the mouse is pressed\nand false if not."}, {"submodule": "Mouse", "name": "mouseMoved", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/mouse.js", "positive_questions": [], "line": 349, "syntax": "mouseMoved()", "example": ["\n<div>\n<code>\n// Move the mouse across the page\n// to change its value\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseMoved() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseMoved() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"], "description": "The mouseMoved() function is called every time the mouse moves and a mouse\nbutton is not pressed.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add `return false` to the end of the method."}, {"submodule": "Mouse", "name": "mouseDragged", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/mouse.js", "positive_questions": [], "line": 388, "syntax": "mouseDragged()", "example": ["\n<div>\n<code>\n// Drag the mouse across the page\n// to change its value\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseDragged() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseDragged() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"], "description": "The mouseDragged() function is called once every time the mouse moves and\na mouse button is pressed. If no mouseDragged() function is defined, the\ntouchMoved() function will be called instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add `return false` to the end of the method."}, {"submodule": "Mouse", "name": "mousePressed", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/mouse.js", "positive_questions": [], "line": 455, "syntax": "mousePressed()", "example": ["\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mousePressed() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mousePressed() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"], "description": "The mousePressed() function is called once after every time a mouse button\nis pressed. The mouseButton variable (see the related reference entry)\ncan be used to determine which button has been pressed. If no\nmousePressed() function is defined, the touchStarted() function will be\ncalled instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add `return false` to the end of the method."}, {"submodule": "Mouse", "name": "mouseReleased", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/mouse.js", "positive_questions": [], "line": 518, "syntax": "mouseReleased()", "example": ["\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n// after the mouse has been clicked\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseReleased() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseReleased() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"], "description": "The mouseReleased() function is called every time a mouse button is\nreleased. If no mouseReleased() function is defined, the touchEnded()\nfunction will be called instead if it is defined.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add `return false` to the end of the method."}, {"submodule": "Mouse", "name": "mouseClicked", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/mouse.js", "positive_questions": [], "line": 579, "syntax": "mouseClicked()", "example": ["\n<div>\n<code>\n// Click within the image to change\n// the value of the rectangle\n// after the mouse has been clicked\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction mouseClicked() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction mouseClicked() {\n  ellipse(mouseX, mouseY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"], "description": "The mouseClicked() function is called once after a mouse button has been\npressed and then released.<br><br>\nBrowsers may have different default\nbehaviors attached to various mouse events. To prevent any default\nbehavior for this event, add `return false` to the end of the method."}, {"submodule": "Mouse", "name": "mouseWheel", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/mouse.js", "positive_questions": [], "line": 629, "syntax": "mouseWheel()", "example": ["\n<div>\n<code>\nvar pos = 25;\n\nfunction draw() {\n  background(237, 34, 93);\n  fill(0);\n  rect(25, pos, 50, 50);\n}\n\nfunction mouseWheel(event) {\n  //event.delta can be +1 or -1 depending\n  //on the wheel/scroll direction\n  print(event.delta);\n  //move the square one pixel up or down\n  pos += event.delta;\n  //uncomment to block page scrolling\n  //return false;\n}\n</code>\n</div>"], "description": "The function mouseWheel is executed every time a scroll event is detected\neither triggered by an actual mouse wheel or by a touchpad.<br>\nThe event.delta property returns -1 or +1 depending on the scroll\ndirection and the user's settings. (on OS X with \"natural\" scrolling\nenabled, the values are inverted).<br><br>\nBrowsers may have different default behaviors attached to various\nmouse events. To prevent any default behavior for this event, add\n`return false` to the end of the method.\n\nThe event.wheelDelta or event.detail properties can also be accessed but\ntheir behavior may differ depending on the browser.\nSee <a href=\"http://www.javascriptkit.com/javatutors/onmousewheel.shtml\">\nmouse wheel event in JS</a>."}, {"submodule": "Touch", "name": "touchX", "negative_questions": [], "module": "Events", "syntax": "touchX", "itemtype": "property", "file": "src/events/touch.js", "positive_questions": [], "line": 12, "class": "p5", "description": "The system variable touchX always contains the horizontal position of\none finger, relative to (0, 0) of the canvas. This is best used for\nsingle touch interactions. For multi-touch interactions, use the\ntouches[] array."}, {"submodule": "Touch", "name": "touchY", "negative_questions": [], "module": "Events", "syntax": "touchY", "itemtype": "property", "file": "src/events/touch.js", "positive_questions": [], "line": 22, "class": "p5", "description": "The system variable touchY always contains the vertical position of\none finger, relative to (0, 0) of the canvas. This is best used for\nsingle touch interactions. For multi-touch interactions, use the\ntouches[] array."}, {"submodule": "Touch", "name": "ptouchX", "negative_questions": [], "module": "Events", "syntax": "ptouchX", "itemtype": "property", "file": "src/events/touch.js", "positive_questions": [], "line": 32, "class": "p5", "description": "The system variable ptouchX always contains the horizontal position of\none finger, relative to (0, 0) of the canvas, in the frame previous to the\ncurrent frame."}, {"submodule": "Touch", "name": "ptouchY", "negative_questions": [], "module": "Events", "syntax": "ptouchY", "itemtype": "property", "file": "src/events/touch.js", "positive_questions": [], "line": 41, "class": "p5", "description": "The system variable ptouchY always contains the vertical position of\none finger, relative to (0, 0) of the canvas, in the frame previous to the\ncurrent frame."}, {"submodule": "Touch", "name": "touches[]", "negative_questions": [], "module": "Events", "syntax": "touches[]", "itemtype": "property", "file": "src/events/touch.js", "positive_questions": [], "line": 50, "class": "p5", "description": "The system variable touches[] contains an array of the positions of all\ncurrent touch points, relative to (0, 0) of the canvas. Each element in\nthe array is an object with x and y properties."}, {"submodule": "Touch", "name": "touchIsDown", "negative_questions": [], "module": "Events", "syntax": "touchIsDown", "itemtype": "property", "file": "src/events/touch.js", "positive_questions": [], "line": 59, "class": "p5", "description": "The boolean system variable touchIsDown is true if the screen is\ntouched and false if not."}, {"submodule": "Touch", "name": "touchStarted", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/touch.js", "positive_questions": [], "line": 102, "syntax": "touchStarted()", "example": ["\n<div>\n<code>\n// Touch within the image to change\n// the value of the rectangle\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction touchStarted() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction touchStarted() {\n  ellipse(touchX, touchY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"], "description": "The touchStarted() function is called once after every time a touch is\nregistered. If no touchStarted() function is defined, the mousePressed()\nfunction will be called instead if it is defined. Browsers may have\ndifferent default\nbehaviors attached to various touch events. To prevent any default\nbehavior for this event, add `return false` to the end of the method."}, {"submodule": "Touch", "name": "touchMoved", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/touch.js", "positive_questions": [], "line": 161, "syntax": "touchMoved()", "example": ["\n<div>\n<code>\n// Move your finger across the page\n// to change its value\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction touchMoved() {\n  value = value + 5;\n  if (value > 255) {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction touchMoved() {\n  ellipse(touchX, touchY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"], "description": "The touchMoved() function is called every time a touch move is registered.\nIf no touchStarted() function is defined, the mouseDragged() function will\nbe called instead if it is defined. Browsers may have different default\nbehaviors attached to various touch events. To prevent any default\nbehavior for this event, add `return false` to the end of the method."}, {"submodule": "Touch", "name": "touchEnded", "negative_questions": [], "module": "Events", "class": "p5", "itemtype": "method", "file": "src/events/touch.js", "positive_questions": [], "line": 217, "syntax": "touchEnded()", "example": ["\n<div>\n<code>\n// Release touch within the image to\n// change the value of the rectangle\n\nvar value = 0;\nfunction draw() {\n  fill(value);\n  rect(25, 25, 50, 50);\n}\nfunction touchEnded() {\n  if (value == 0) {\n    value = 255;\n  } else {\n    value = 0;\n  }\n}\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nfunction touchEnded() {\n  ellipse(touchX, touchY, 5, 5);\n  // prevent default\n  return false;\n}\n</code>\n</div>"], "description": "The touchEnded() function is called every time a touch ends. If no\ntouchStarted() function is defined, the mouseReleased() function will be\ncalled instead if it is defined. Browsers may have different default\nbehaviors attached to various touch events. To prevent any default\nbehavior for this event, add `return false` to the end of the method."}, {"submodule": "Image", "return": {"type": "p5.Image", "description": "the p5.Image object"}, "name": "createImage", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "params": [{"type": "Integer", "name": "width", "description": "width in pixels"}, {"type": "Integer", "name": "height", "description": "height in pixels"}], "file": "src/image/image.js", "positive_questions": [], "line": 27, "syntax": "createImage(width,height)", "example": ["\n<div>\n<code>\nimg = createImage(66, 66);\nimg.loadPixels();\nfor (i = 0; i < img.width; i++) {\n  for (j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>\n\n<div>\n<code>\nimg = createImage(66, 66);\nimg.loadPixels();\nfor (i = 0; i < img.width; i++) {\n  for (j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102, i % img.width * 2));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\nimage(img, 34, 34);\n</code>\n</div>\n\n<div>\n<code>\nvar pink = color(255, 102, 204);\nimg = createImage(66, 66);\nimg.loadPixels();\nvar d = pixelDensity;\nvar halfImage = 4 * (width * d) * (height/2 * d);\nfor (var i = 0; i < halfImage; i+=4) {\n  img.pixels[i] = red(pink);\n  img.pixels[i+1] = green(pink);\n  img.pixels[i+2] = blue(pink);\n  img.pixels[i+3] = alpha(pink);\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>"], "description": "Creates a new p5.Image (the datatype for storing images). This provides a\nfresh buffer of pixels to play with. Set the size of the buffer with the\nwidth and height parameters.\n\n.pixels gives access to an array containing the values for all the pixels\nin the display window.\nThese values are numbers. This array is the size (including an appropriate\nfactor for the pixelDensity) of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from\nleft to right across each row, then down each column. See .pixels for\nmore info. It may also be simpler to use set() or get().\n<br><br>\nBefore accessing the pixels of an image, the data must loaded with the\nloadPixels()\nfunction. After the array data has been modified, the updatePixels()\nfunction must be run to update the changes."}, {"submodule": "Image", "name": "saveCanvas", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "params": [{"type": "[selectedCanvas]", "name": "canvas", "description": "a variable representing a\n                           specific html5 canvas (optional)"}, {"type": "[String]", "name": "filename", "description": ""}, {"type": "[String]", "name": "extension", "description": "'jpg' or 'png'"}], "file": "src/image/image.js", "positive_questions": [], "line": 101, "syntax": "saveCanvas(canvas,filename,extension)", "example": ["\n<div class='norender'><code>\nfunction setup() {\n  var c = createCanvas(100, 100);\n  background(255, 0, 0);\n  saveCanvas(c, 'myCanvas', 'jpg');\n}\n</code></div>\n<div class='norender'><code>\n// note that this example has the same result as above\n// if no canvas is specified, defaults to main canvas\nfunction setup() {\n  createCanvas(100, 100);\n  background(255, 0, 0);\n  saveCanvas('myCanvas', 'jpg');\n}\n</code></div>\n<div class='norender'><code>\n// all of the following are valid\nsaveCanvas(c, 'myCanvas', 'jpg');\nsaveCanvas(c, 'myCanvas');\nsaveCanvas(c);\nsaveCanvas('myCanvas', 'png');\nsaveCanvas('myCanvas');\nsaveCanvas();\n</code></div>"], "description": "Save the current canvas as an image. In Safari, will open the\nimage in the window and the user must provide their own\nfilename on save-as. Other browsers will either save the\nfile immediately, or prompt the user with a dialogue window."}, {"submodule": "Image", "return": {"type": "[type]", "description": "[description]"}, "name": "saveFrames", "negative_questions": [], "module": "Image", "syntax": "saveFrames(filename,extension,_duration,_fps,callback)", "itemtype": "method", "params": [{"type": "[type]", "name": "filename", "description": "[description]"}, {"type": "[type]", "name": "extension", "description": "[description]"}, {"type": "[type]", "name": "_duration", "description": "[description]"}, {"type": "[type]", "name": "_fps", "description": "[description]"}, {"type": "[Function]", "name": "callback", "description": "[description]"}], "file": "src/image/image.js", "positive_questions": [], "line": 219, "class": "p5", "description": "Capture a sequence of frames that can be used to create a movie.\nAccepts a callback. For example, you may wish to send the frames\nto a server where they can be stored or converted into a movie.\nIf no callback is provided, the browser will attempt to download\nall of the images that have just been created."}, {"submodule": "Loading & Displaying", "return": {"type": "p5.Image", "description": "the p5.Image object"}, "name": "loadImage", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "path", "description": "Path of the image to be loaded"}, {"optional": true, "type": "Function(p5.Image)", "name": "successCallback", "description": "Function to be called once\n                               the image is loaded. Will be passed the\n                               p5.Image."}, {"optional": true, "type": "Function(Event)", "name": "failureCallback", "description": "called with event error if\n                               the image fails to load."}], "file": "src/image/loading_displaying.js", "positive_questions": [], "line": 17, "syntax": "loadImage(path,[successCallback],[failureCallback])", "example": ["\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/laDefense.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  // here we use a callback to display the image after loading\n  loadImage(\"assets/laDefense.jpg\", function(img) {\n    image(img, 0, 0);\n  });\n}\n</code>\n</div>"], "description": "Loads an image from a path and creates a p5.Image from it.\n\nThe image may not be immediately available for rendering\nIf you want to ensure that the image is ready before doing\nanything with it you can do perform those operations in the\ncallback, or place the loadImage() call in preload()."}, {"submodule": "Loading & Displaying", "name": "image", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "params": [{"type": "p5.Image", "name": "image", "description": "the image to display"}, {"optional": true, "optdefault": "0", "type": "Number", "name": "x", "description": "x-coordinate of the image"}, {"optional": true, "optdefault": "0", "type": "Number", "name": "y", "description": "y-coordinate of the image"}, {"optional": true, "type": "Number", "name": "width", "description": "width to display the image"}, {"optional": true, "type": "Number", "name": "height", "description": "height to display the image"}], "file": "src/image/loading_displaying.js", "positive_questions": [], "line": 93, "syntax": "image(image,[x],[y],[width],[height])", "example": ["\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/laDefense.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n}\n</code>\n</div>\n<div>\n<code>\nfunction setup() {\n  // here we use a callback to display the image after loading\n  loadImage(\"assets/laDefense.jpg\", function(img) {\n    image(img, 0, 0);\n  });\n}\n</code>\n</div>"], "description": "Draw an image to the main canvas of the p5js sketch"}, {"submodule": "Loading & Displaying", "name": "tint", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "params": [{"type": "Number|Array", "name": "v1", "description": "gray value, red or hue value (depending on the\n                           current color mode), or color Array"}, {"optional": true, "type": "Number|Array", "name": "v2", "description": "green or saturation value (depending on the\n                           current color mode)"}, {"optional": true, "type": "Number|Array", "name": "v3", "description": "blue or brightness value (depending on the\n                           current color mode)"}, {"optional": true, "type": "Number|Array", "name": "a", "description": "opacity of the background"}], "file": "src/image/loading_displaying.js", "positive_questions": [], "line": 146, "syntax": "tint(v1,[v2],[v3],[a])", "example": ["\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/laDefense.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n  tint(0, 153, 204);  // Tint blue\n  image(img, 50, 0);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/laDefense.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n  tint(0, 153, 204, 126);  // Tint blue and set transparency\n  image(img, 50, 0);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/laDefense.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n  tint(255, 126);  // Apply transparency without changing color\n  image(img, 50, 0);\n}\n</code>\n</div>"], "description": "Sets the fill value for displaying images. Images can be tinted to\nspecified colors or made transparent by including an alpha value.\n\nTo apply transparency to an image without affecting its color, use\nwhite as the tint color and specify an alpha value. For instance,\ntint(255, 128) will make an image 50% transparent (assuming the default\nalpha range of 0-255, which can be changed with colorMode()).\n\nThe value for the gray parameter must be less than or equal to the current\nmaximum value as specified by colorMode(). The default maximum value is\n255."}, {"submodule": "Loading & Displaying", "name": "noTint", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "file": "src/image/loading_displaying.js", "positive_questions": [], "line": 215, "syntax": "noTint()", "example": ["\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/bricks.jpg\");\n}\nfunction setup() {\n  tint(0, 153, 204);  // Tint blue\n  image(img, 0, 0);\n  noTint();  // Disable tint\n  image(img, 50, 0);\n}\n</code>\n</div>"], "description": "Removes the current fill value for displaying images and reverts to\ndisplaying images with their original hues."}, {"submodule": "Loading & Displaying", "name": "imageMode", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "m", "description": "The mode: either CORNER, CORNERS, or CENTER."}], "file": "src/image/loading_displaying.js", "positive_questions": [], "line": 276, "syntax": "imageMode(m)", "example": ["\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/bricks.jpg\");\n}\nfunction setup() {\n  imageMode(CORNER);\n  image(img, 10, 10, 50, 50);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/bricks.jpg\");\n}\nfunction setup() {\n  imageMode(CORNERS);\n  image(img, 10, 10, 90, 40);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/bricks.jpg\");\n}\nfunction setup() {\n  imageMode(CENTER);\n  image(img, 50, 50, 80, 80);\n}\n</code>\n</div>"], "description": "Set image mode. Modifies the location from which images are drawn by\nchanging the way in which parameters given to image() are interpreted.\nThe default mode is imageMode(CORNER), which interprets the second and\nthird parameters of image() as the upper-left corner of the image. If\ntwo additional parameters are specified, they are used to set the image's\nwidth and height.\n\nimageMode(CORNERS) interprets the second and third parameters of image()\nas the location of one corner, and the fourth and fifth parameters as the\nopposite corner.\nimageMode(CENTER) interprets the second and third parameters of image()\nas the image's center point. If two additional parameters are specified,\nthey are used to set the image's width and height."}, {"submodule": "Image", "name": "width", "negative_questions": [], "module": "Image", "syntax": "width", "itemtype": "property", "file": "src/image/p5.Image.js", "positive_questions": [], "line": 43, "class": "p5.Image", "description": "Image width."}, {"submodule": "Image", "name": "height", "negative_questions": [], "module": "Image", "syntax": "height", "itemtype": "property", "file": "src/image/p5.Image.js", "positive_questions": [], "line": 48, "class": "p5.Image", "description": "Image height."}, {"submodule": "Image", "name": "pixels[]", "negative_questions": [], "module": "Image", "class": "p5.Image", "itemtype": "property", "file": "src/image/p5.Image.js", "positive_questions": [], "line": 58, "syntax": "pixels[]", "example": ["\n<div>\n<code>\nimg = createImage(66, 66);\nimg.loadPixels();\nfor (i = 0; i < img.width; i++) {\n  for (j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>\n<div>\n<code>\nvar pink = color(255, 102, 204);\nimg = createImage(66, 66);\nimg.loadPixels();\nfor (var i = 0; i < 4*(width*height/2); i+=4) {\n  img.pixels[i] = red(pink);\n  img.pixels[i+1] = green(pink);\n  img.pixels[i+2] = blue(pink);\n  img.pixels[i+3] = alpha(pink);\n}\nimg.updatePixels();\nimage(img, 17, 17);\n</code>\n</div>"], "description": "Array containing the values for all the pixels in the display window.\nThese values are numbers. This array is the size (include an appropriate\nfactor for pixelDensity) of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from\nleft to right across each row, then down each column. Retina and other\nhigh denisty displays may have more pixels[] (by a factor of\npixelDensity^2).\nFor example, if the image is 100x100 pixels, there will be 40,000. With\npixelDensity = 2, there will be 160,000. The first four values\n(indices 0-3) in the array will be the R, G, B, A values of the pixel at\n(0, 0). The second four values (indices 4-7) will contain the R, G, B, A\nvalues of the pixel at (1, 0). More generally, to set values for a pixel\nat (x, y):\n<code><pre>var d = pixelDensity;\nfor (var i = 0; i < d; i++) {\n  for (var j = 0; j < d; j++) {\n    // loop over\n    idx = 4*((y * d + j) * width * d + (x * d + i));\n    pixels[idx] = r;\n    pixels[idx+1] = g;\n    pixels[idx+2] = b;\n    pixels[idx+3] = a;\n  }\n}\n<br><br>\nBefore accessing this array, the data must loaded with the loadPixels()\nfunction. After the array data has been modified, the updatePixels()\nfunction must be run to update the changes."}, {"submodule": "Image", "name": "loadPixels", "negative_questions": [], "module": "Image", "syntax": "loadPixels()", "itemtype": "method", "file": "src/image/p5.Image.js", "positive_questions": [], "line": 129, "class": "p5.Image", "description": "Loads the pixels data for this image into the [pixels] attribute."}, {"submodule": "Image", "name": "updatePixels", "negative_questions": [], "module": "Image", "syntax": "updatePixels(x,y,w,h)", "itemtype": "method", "params": [{"type": "Integer|undefined", "name": "x", "description": "x-offset of the target update area for the\n                             underlying canvas"}, {"type": "Integer|undefined", "name": "y", "description": "y-offset of the target update area for the\n                             underlying canvas"}, {"type": "Integer|undefined", "name": "w", "description": "height of the target update area for the\n                             underlying canvas"}, {"type": "Integer|undefined", "name": "h", "description": "height of the target update area for the\n                             underlying canvas"}], "file": "src/image/p5.Image.js", "positive_questions": [], "line": 138, "class": "p5.Image", "description": "Updates the backing canvas for this image with the contents of\nthe [pixels] array."}, {"submodule": "Image", "return": {"type": "Array/Color | p5.Image", "description": "color of pixel at x,y in array format\n                                   [R, G, B, A] or p5.Image"}, "name": "get", "negative_questions": [], "module": "Image", "syntax": "get([x],[y],[w],[h])", "itemtype": "method", "params": [{"optional": true, "type": "Number", "name": "x", "description": "x-coordinate of the pixel"}, {"optional": true, "type": "Number", "name": "y", "description": "y-coordinate of the pixel"}, {"optional": true, "type": "Number", "name": "w", "description": "width"}, {"optional": true, "type": "Number", "name": "h", "description": "height"}], "file": "src/image/p5.Image.js", "positive_questions": [], "line": 156, "class": "p5.Image", "description": "Get a region of pixels from an image.\n\nIf no params are passed, those whole image is returned,\nif x and y are the only params passed a single pixel is extracted\nif all params are passed a rectangle region is extracted and a p5.Image\nis returned.\n\nReturns undefined if the region is outside the bounds of the image"}, {"submodule": "Image", "name": "set", "negative_questions": [], "module": "Image", "class": "p5.Image", "itemtype": "method", "params": [{"type": "Number", "name": "x", "description": "x-coordinate of the pixel"}, {"type": "Number", "name": "y", "description": "y-coordinate of the pixel"}, {"type": "Number|Array|Object", "name": "a", "description": "grayscale value | pixel array |\n                               a p5.Color | image to copy"}], "file": "src/image/p5.Image.js", "positive_questions": [], "line": 178, "syntax": "set(x,y,a)", "example": ["\n<div>\n<code>\nimg = createImage(66, 66);\nimg.loadPixels();\nfor (i = 0; i < img.width; i++) {\n  for (j = 0; j < img.height; j++) {\n    img.set(i, j, color(0, 90, 102, i % img.width * 2));\n  }\n}\nimg.updatePixels();\nimage(img, 17, 17);\nimage(img, 34, 34);\n</code>\n</div>"], "description": "Set the color of a single pixel or write an image into\nthis p5.Image.\n\nNote that for a large number of pixels this will\nbe slower than directly manipulating the pixels array\nand then calling updatePixels()."}, {"submodule": "Image", "name": "resize", "negative_questions": [], "module": "Image", "class": "p5.Image", "itemtype": "method", "params": [{"type": "Number", "name": "width", "description": "the resized image width"}, {"type": "Number", "name": "height", "description": "the resized image height"}], "file": "src/image/p5.Image.js", "positive_questions": [], "line": 211, "syntax": "resize(width,height)", "example": ["\n<div><code>\nvar img;\n\nfunction setup() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\n\nfunction draw() {\n  image(img, 0, 0);\n}\n\nfunction mousePressed() {\n  img.resize(50, 100);\n}\n</code></div>"], "description": "Resize the image to a new width and height. To make the image scale\nproportionally, use 0 as the value for the wide or high parameter.\nFor instance, to make the width of an image 150 pixels, and change\nthe height using the same proportion, use resize(150, 0)."}, {"submodule": "Image", "name": "copy", "negative_questions": [], "module": "Image", "syntax": "copy(srcImage,sx,sy,sw,sh,dx,dy,dw,dh)", "itemtype": "method", "params": [{"type": "p5.Image|undefined", "name": "srcImage", "description": "source image"}, {"type": "Integer", "name": "sx", "description": "X coordinate of the source's upper left corner"}, {"type": "Integer", "name": "sy", "description": "Y coordinate of the source's upper left corner"}, {"type": "Integer", "name": "sw", "description": "source image width"}, {"type": "Integer", "name": "sh", "description": "source image height"}, {"type": "Integer", "name": "dx", "description": "X coordinate of the destination's upper left corner"}, {"type": "Integer", "name": "dy", "description": "Y coordinate of the destination's upper left corner"}, {"type": "Integer", "name": "dw", "description": "destination image width"}, {"type": "Integer", "name": "dh", "description": "destination image height"}], "file": "src/image/p5.Image.js", "positive_questions": [], "line": 276, "class": "p5.Image", "description": "Copies a region of pixels from one image to another. If no\nsrcImage is specified this is used as the source. If the source\nand destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region."}, {"submodule": "Image", "name": "mask", "negative_questions": [], "module": "Image", "syntax": "mask(srcImage)", "itemtype": "method", "params": [{"type": "p5.Image|undefined", "name": "srcImage", "description": "source image\n\nTODO: - Accept an array of alpha values.\n      - Use other channels of an image. p5 uses the\n      blue channel (which feels kind of arbitrary). Note: at the\n      moment this method does not match native processings original\n      functionality exactly.\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/"}], "file": "src/image/p5.Image.js", "positive_questions": [], "line": 298, "class": "p5.Image", "description": "Masks part of an image from displaying by loading another\nimage and using it's alpha channel as an alpha channel for\nthis image."}, {"submodule": "Image", "name": "filter", "negative_questions": [], "module": "Image", "syntax": "filter(operation,value)", "itemtype": "method", "params": [{"type": "String", "name": "operation", "description": "one of threshold, gray, invert, posterize and\n                          opaque see Filters.js for docs on each available\n                          filter"}, {"type": "Number|undefined", "name": "value", "description": ""}], "file": "src/image/p5.Image.js", "positive_questions": [], "line": 343, "class": "p5.Image", "description": "Applies an image filter to a p5.Image"}, {"submodule": "Image", "name": "blend", "negative_questions": [], "module": "Image", "syntax": "blend(srcImage,sx,sy,sw,sh,dx,dy,dw,dh,blendMode)", "itemtype": "method", "params": [{"type": "p5.Image|undefined", "name": "srcImage", "description": "source image"}, {"type": "Integer", "name": "sx", "description": "X coordinate of the source's upper left corner"}, {"type": "Integer", "name": "sy", "description": "Y coordinate of the source's upper left corner"}, {"type": "Integer", "name": "sw", "description": "source image width"}, {"type": "Integer", "name": "sh", "description": "source image height"}, {"type": "Integer", "name": "dx", "description": "X coordinate of the destination's upper left corner"}, {"type": "Integer", "name": "dy", "description": "Y coordinate of the destination's upper left corner"}, {"type": "Integer", "name": "dw", "description": "destination image width"}, {"type": "Integer", "name": "dh", "description": "destination image height"}, {"type": "Integer", "name": "blendMode", "description": "the blend mode\n\nAvailable blend modes are: normal | multiply | screen | overlay |\n           darken | lighten | color-dodge | color-burn | hard-light |\n           soft-light | difference | exclusion | hue | saturation |\n           color | luminosity\n\n\nhttp://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/"}], "file": "src/image/p5.Image.js", "positive_questions": [], "line": 356, "class": "p5.Image", "description": "Copies a region of pixels from one image to another, using a specified\nblend mode to do the operation."}, {"submodule": "Image", "name": "save", "negative_questions": [], "module": "Image", "syntax": "save(filename,extension)", "itemtype": "method", "params": [{"type": "String", "name": "filename", "description": "give your file a name"}, {"type": "String", "name": "extension", "description": "'png' or 'jpg'"}], "file": "src/image/p5.Image.js", "positive_questions": [], "line": 385, "class": "p5.Image", "description": "Saves the image to a file and force the browser to download it.\nAccepts two strings for filename and file extension\nSupports png (default) and jpg."}, {"submodule": "Pixels", "name": "pixels[]", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "property", "file": "src/image/pixels.js", "positive_questions": [], "line": 14, "syntax": "pixels[]", "example": ["\n<div>\n<code>\nvar pink = color(255, 102, 204);\nloadPixels();\nvar d = pixelDensity;\nvar halfImage = 4 * (width * d) * (height/2 * d);\nfor (var i = 0; i < halfImage; i+=4) {\n  pixels[i] = red(pink);\n  pixels[i+1] = green(pink);\n  pixels[i+2] = blue(pink);\n  pixels[i+3] = alpha(pink);\n}\nupdatePixels();\n</code>\n</div>"], "description": "<a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference\n/Global_Objects/Uint8ClampedArray' target='_blank'>Uint8ClampedArray</a>\ncontaining the values for all the pixels in the display window.\nThese values are numbers. This array is the size (include an appropriate\nfactor for pixelDensity) of the display window x4,\nrepresenting the R, G, B, A values in order for each pixel, moving from\nleft to right across each row, then down each column. Retina and other\nhigh denisty displays will have more pixels[] (by a factor of\npixelDensity^2).\nFor example, if the image is 100x100 pixels, there will be 40,000. On a\nretina display, there will be 160,000. The first four values\n(indices 0-3) in the array will be the R, G, B, A values of the pixel at\n(0, 0). The second four values (indices 4-7) will contain the R, G, B, A\nvalues of the pixel at (1, 0). More generally, to set values for a pixel\nat (x, y):\n<code><pre>var d = pixelDensity;\nfor (var i = 0; i < d; i++) {\n  for (var j = 0; j < d; j++) {\n    // loop over\n    idx = 4*((y * d + j) * width * d + (x * d + i));\n    pixels[idx] = r;\n    pixels[idx+1] = g;\n    pixels[idx+2] = b;\n    pixels[idx+3] = a;\n  }\n}\n</pre></code>\nWhile the above method is complex, it is flexible enough to work with\nany pixelDensity. Note that set() will automatically take care of\nsetting all the appropriate values in pixels[] for a given (x, y) at\nany pixelDensity, but the performance may not be as fast when lots of\nmodifications are made to the pixel array.\n<br><br>\nBefore accessing this array, the data must loaded with the loadPixels()\nfunction. After the array data has been modified, the updatePixels()\nfunction must be run to update the changes.\n<br><br>\nNote that this is not a standard javascript array.  This means that\nstandard javascript functions such as <code>slice()</code> or\n<code>arrayCopy()</code> do not\nwork."}, {"submodule": "Pixels", "name": "blend", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "params": [{"type": "p5.Image|undefined", "name": "srcImage", "description": "source image"}, {"type": "Integer", "name": "sx", "description": "X coordinate of the source's upper left corner"}, {"type": "Integer", "name": "sy", "description": "Y coordinate of the source's upper left corner"}, {"type": "Integer", "name": "sw", "description": "source image width"}, {"type": "Integer", "name": "sh", "description": "source image height"}, {"type": "Integer", "name": "dx", "description": "X coordinate of the destination's upper left corner"}, {"type": "Integer", "name": "dy", "description": "Y coordinate of the destination's upper left corner"}, {"type": "Integer", "name": "dw", "description": "destination image width"}, {"type": "Integer", "name": "dh", "description": "destination image height"}, {"type": "Integer", "name": "blendMode", "description": "the blend mode"}], "file": "src/image/pixels.js", "positive_questions": [], "line": 77, "syntax": "blend(srcImage,sx,sy,sw,sh,dx,dy,dw,dh,blendMode)", "example": ["\n<div><code>\nvar img0;\nvar img1;\n\nfunction preload() {\n  img0 = loadImage(\"assets/rockies.jpg\");\n  img1 = loadImage(\"assets/bricks_third.jpg\");\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, LIGHTEST);\n}\n</code></div>\n<div><code>\nvar img0;\nvar img1;\n\nfunction preload() {\n  img0 = loadImage(\"assets/rockies.jpg\");\n  img1 = loadImage(\"assets/bricks_third.jpg\");\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, DARKEST);\n}\n</code></div>\n<div><code>\nvar img0;\nvar img1;\n\nfunction preload() {\n  img0 = loadImage(\"assets/rockies.jpg\");\n  img1 = loadImage(\"assets/bricks_third.jpg\");\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  blend(img1, 0, 0, 33, 100, 67, 0, 33, 100, ADD);\n}\n</code></div>"], "description": "Copies a region of pixels from one image to another, using a specified\nblend mode to do the operation.<br><br>\nAvailable blend modes are: BLEND | DARKEST | LIGHTEST | DIFFERENCE |\nMULTIPLY| EXCLUSION | SCREEN | REPLACE | OVERLAY | HARD_LIGHT |\nSOFT_LIGHT | DODGE | BURN | ADD | NORMAL"}, {"submodule": "Pixels", "name": "copy", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "params": [{"type": "p5.Image|undefined", "name": "srcImage", "description": "source image"}, {"type": "Integer", "name": "sx", "description": "X coordinate of the source's upper left corner"}, {"type": "Integer", "name": "sy", "description": "Y coordinate of the source's upper left corner"}, {"type": "Integer", "name": "sw", "description": "source image width"}, {"type": "Integer", "name": "sh", "description": "source image height"}, {"type": "Integer", "name": "dx", "description": "X coordinate of the destination's upper left corner"}, {"type": "Integer", "name": "dy", "description": "Y coordinate of the destination's upper left corner"}, {"type": "Integer", "name": "dw", "description": "destination image width"}, {"type": "Integer", "name": "dh", "description": "destination image height"}], "file": "src/image/pixels.js", "positive_questions": [], "line": 148, "syntax": "copy(srcImage,sx,sy,sw,sh,dx,dy,dw,dh)", "example": ["\n<div><code>\nvar img;\n\nfunction preload() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\n\nfunction setup() {\n  background(img0);\n  image(img1, 0, 0);\n  copy(7, 22, 10, 10, 35, 25, 50, 50);\n  stroke(255);\n  noFill();\n  // Rectangle shows area being copied\n  rect(7, 22, 10, 10);\n}\n</code></div>"], "description": "Copies a region of the canvas to another region of the canvas\nand copies a region of pixels from an image used as the srcImg parameter\ninto the canvas srcImage is specified this is used as the source. If\nthe source and destination regions aren't the same size, it will\nautomatically resize source pixels to fit the specified\ntarget region."}, {"submodule": "Pixels", "name": "filter", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "kind", "description": ""}, {"type": "Number|undefined", "name": "param", "description": ""}], "file": "src/image/pixels.js", "positive_questions": [], "line": 190, "syntax": "filter(kind,param)", "example": ["\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/bricks.jpg\");\n}\nfunction setup() {\n image(img, 0, 0);\n filter(THRESHOLD);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/bricks.jpg\");\n}\nfunction setup() {\n image(img, 0, 0);\n filter(GRAY);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/bricks.jpg\");\n}\nfunction setup() {\n image(img, 0, 0);\n filter(OPAQUE);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/bricks.jpg\");\n}\nfunction setup() {\n image(img, 0, 0);\n filter(INVERT);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/bricks.jpg\");\n}\nfunction setup() {\n image(img, 0, 0);\n filter(POSTERIZE,3);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/bricks.jpg\");\n}\nfunction setup() {\n image(img, 0, 0);\n filter(DILATE);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/bricks.jpg\");\n}\nfunction setup() {\n image(img, 0, 0);\n filter(BLUR,3);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/bricks.jpg\");\n}\nfunction setup() {\n image(img, 0, 0);\n filter(ERODE);\n}\n</code>\n</div>"], "description": "Applies a filter to the canvas.\n<br><br>\n\nThe presets options are:\n<br><br>\n\nTHRESHOLD\nConverts the image to black and white pixels depending if they are above or\nbelow the threshold defined by the level parameter. The parameter must be\nbetween 0.0 (black) and 1.0 (white). If no level is specified, 0.5 is used.\n<br><br>\n\nGRAY\nConverts any colors in the image to grayscale equivalents. No parameter\nis used.\n<br><br>\n\nOPAQUE\nSets the alpha channel to entirely opaque. No parameter is used.\n<br><br>\n\nINVERT\nSets each pixel to its inverse value. No parameter is used.\n<br><br>\n\nPOSTERIZE\nLimits each channel of the image to the number of colors specified as the\nparameter. The parameter can be set to values between 2 and 255, but\nresults are most noticeable in the lower ranges.\n<br><br>\n\nBLUR\nExecutes a Guassian blur with the level parameter specifying the extent\nof the blurring. If no parameter is used, the blur is equivalent to\nGuassian blur of radius 1. Larger values increase the blur.\n<br><br>\n\nERODE\nReduces the light areas. No parameter is used.\n<br><br>\n\nDILATE\nIncreases the light areas. No parameter is used."}, {"submodule": "Pixels", "return": {"type": "Array|p5.Image", "description": "values of pixel at x,y in array format\n                             [R, G, B, A] or p5.Image"}, "name": "get", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "params": [{"optional": true, "type": "Number", "name": "x", "description": "x-coordinate of the pixel"}, {"optional": true, "type": "Number", "name": "y", "description": "y-coordinate of the pixel"}, {"optional": true, "type": "Number", "name": "w", "description": "width"}, {"optional": true, "type": "Number", "name": "h", "description": "height"}], "file": "src/image/pixels.js", "positive_questions": [], "line": 350, "syntax": "get([x],[y],[w],[h])", "example": ["\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n  var c = get();\n  image(c, width/2, 0);\n}\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\nfunction setup() {\n  image(img, 0, 0);\n  var c = get(50, 90);\n  fill(c);\n  noStroke();\n  rect(25, 25, 50, 50);\n}\n</code>\n</div>"], "description": "Returns an array of [R,G,B,A] values for any pixel or grabs a section of\nan image. If no parameters are specified, the entire image is returned.\nUse the x and y parameters to get the value of one pixel. Get a section of\nthe display window by specifying additional w and h parameters. When\ngetting an image, the x and y parameters define the coordinates for the\nupper-left corner of the image, regardless of the current imageMode().\n\nIf the pixel requested is outside of the image window, [0,0,0,255] is\nreturned. To get the numbers scaled according to the current color ranges\nand taking into account colorMode, use getColor instead of get.\n\nGetting the color of a single pixel with get(x, y) is easy, but not as fast\nas grabbing the data directly from pixels[]. The equivalent statement to\nget(x, y) using pixels[] with pixel density d is\n[pixels[(y*width*d+x)*d],\npixels[(y*width*d+x)*d+1],\npixels[(y*width*d+x)*d+2],\npixels[(y*width*d+x)*d+3] ].\nSee the reference for pixels[] for more information."}, {"submodule": "Pixels", "name": "loadPixels", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "file": "src/image/pixels.js", "positive_questions": [], "line": 413, "syntax": "loadPixels()", "example": ["\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\n\nfunction setup() {\n  image(img, 0, 0);\n  var d = pixelDensity;\n  var halfImage = 4 * (img.width * d) *\n      (img.height/2 * d);\n  loadPixels();\n  for (var i = 0; i < halfImage; i++) {\n    pixels[i+halfImage] = pixels[i];\n  }\n  updatePixels();\n}\n</code>\n</div>"], "description": "Loads the pixel data for the display window into the pixels[] array. This\nfunction must always be called before reading from or writing to pixels[]."}, {"submodule": "Pixels", "name": "set", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x", "description": "x-coordinate of the pixel"}, {"type": "Number", "name": "y", "description": "y-coordinate of the pixel"}, {"type": "Number|Array|Object", "name": "c", "description": "insert a grayscale value | a pixel array |\n                               a p5.Color object | a p5.Image to copy"}], "file": "src/image/pixels.js", "positive_questions": [], "line": 444, "syntax": "set(x,y,c)", "example": ["\n<div>\n<code>\nvar black = color(0);\nset(30, 20, black);\nset(85, 20, black);\nset(85, 75, black);\nset(30, 75, black);\nupdatePixels();\n</code>\n</div>\n\n<div>\n<code>\nfor (var i = 30; i < width-15; i++) {\n  for (var j = 20; j < height-25; j++) {\n    var c = color(204-j, 153-i, 0);\n    set(i, j, c);\n  }\n}\nupdatePixels();\n</code>\n</div>\n\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\n\nfunction setup() {\n  set(0, 0, img);\n  updatePixels();\n  line(0, 0, width, height);\n  line(0, height, width, 0);\n}\n</code>\n</div>"], "description": "<p>Changes the color of any pixel, or writes an image directly to the\ndisplay window.</p>\n<p>The x and y parameters specify the pixel to change and the c parameter\nspecifies the color value. This can be a p5.COlor object, or [R, G, B, A]\npixel array. It can also be a single grayscale value.\nWhen setting an image, the x and y parameters define the coordinates for\nthe upper-left corner of the image, regardless of the current imageMode().\n</p>\n<p>\nAfter using set(), you must call updatePixels() for your changes to\nappear.  This should be called once all pixels have been set.\n</p>\n<p>Setting the color of a single pixel with set(x, y) is easy, but not as\nfast as putting the data directly into pixels[]. Setting the pixels[]\nvalues directly may be complicated when working with a retina display,\nbut will perform better when lots of pixels need to be set directly on\nevery loop.</p>\n<p>See the reference for pixels[] for more information.</p>"}, {"submodule": "Pixels", "name": "updatePixels", "negative_questions": [], "module": "Image", "class": "p5", "itemtype": "method", "params": [{"optional": true, "type": "Number", "name": "x", "description": "x-coordinate of the upper-left corner of region\n                        to update"}, {"optional": true, "type": "Number", "name": "y", "description": "y-coordinate of the upper-left corner of region\n                        to update"}, {"optional": true, "type": "Number", "name": "w", "description": "width of region to update"}, {"optional": true, "type": "Number", "name": "w", "description": "height of region to update"}], "file": "src/image/pixels.js", "positive_questions": [], "line": 512, "syntax": "updatePixels([x],[y],[w],[w])", "example": ["\n<div>\n<code>\nvar img;\nfunction preload() {\n  img = loadImage(\"assets/rockies.jpg\");\n}\n\nfunction setup() {\n  image(img, 0, 0);\n  var halfImage = 4 * (img.width * pixelDensity) *\n    (img.height * pixelDensity/2);\n  loadPixels();\n  for (var i = 0; i < halfImage; i++) {\n    pixels[i+halfImage] = pixels[i];\n  }\n  updatePixels();\n}\n</code>\n</div>"], "description": "Updates the display window with the data in the pixels[] array.\nUse in conjunction with loadPixels(). If you're only reading pixels from\nthe array, there's no need to call updatePixels() \u2014 updating is only\nnecessary to apply changes. updatePixels() should be called anytime the\npixels array is manipulated or set() is called."}, {"submodule": "Input", "return": {"type": "Object", "description": "p5.Font object"}, "name": "loadFont", "negative_questions": [], "module": "IO", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "path", "description": "name of the file or url to load"}, {"optional": true, "type": "Function", "name": "callback", "description": "function to be executed after\n                                   loadFont()\n                                   completes"}], "file": "src/io/files.js", "positive_questions": [], "line": 18, "syntax": "loadFont(path,[callback])", "example": ["\n\n<p>Calling loadFont() inside preload() guarantees to complete the\noperation before setup() and draw() are called.</p>\n\n<div><code>\nvar myFont;\nfunction preload() {\n  myFont = loadFont('assets/AvenirNextLTPro-Demi.otf');\n}\n\nfunction setup() {\n  fill('#ED225D');\n  textFont(myFont);\n  textSize(36);\n  text('p5*js', 10, 50);\n}\n</code></div>\n\n<p>Outside preload(), you may supply a callback function to handle the\nobject:</p>\n\n<div><code>\nfunction setup() {\n  loadFont('assets/AvenirNextLTPro-Demi.otf', drawText);\n}\n\nfunction drawText(font) {\n  fill('#ED225D');\n  textFont(font, 36);\n  text('p5*js', 10, 50);\n}\nfunction draw(){\n}\n</code></div>\n"], "description": "Loads an opentype font file (.otf, .ttf) from a file or a URL,\nand returns a PFont Object. This method is asynchronous,\nmeaning it may not finish before the next line in your sketch\nis executed."}, {"submodule": "Input", "return": {"type": "Object|Array", "description": "JSON data"}, "name": "loadJSON", "negative_questions": [], "module": "IO", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "path", "description": "name of the file or url to load"}, {"optional": true, "type": "Function", "name": "callback", "description": "function to be executed after\n                                   loadJSON()\n                                   completes, Array is passed in as first\n                                   argument"}, {"optional": true, "type": "String", "name": "datatype", "description": "\"json\" or \"jsonp\""}], "file": "src/io/files.js", "positive_questions": [], "line": 105, "syntax": "loadJSON(path,[callback],[datatype])", "example": ["\n\n<p>Calling loadJSON() inside preload() guarantees to complete the\noperation before setup() and draw() are called.</p>\n\n<div><code>\nvar weather;\nfunction preload() {\n  var url = 'http://api.openweathermap.org/data/2.5/weather?q=London,UK';\n  weather = loadJSON(url);\n}\n\nfunction setup() {\n  noLoop();\n}\n\nfunction draw() {\n  background(200);\n  // get the humidity value out of the loaded JSON\n  var humidity = weather.main.humidity;\n  fill(0, humidity); // use the humidity value to set the alpha\n  ellipse(width/2, height/2, 50, 50);\n}\n</code></div>\n\n<p>Outside preload(), you may supply a callback function to handle the\nobject:</p>\n\n<div><code>\nfunction setup() {\n  noLoop();\n  var url = 'http://api.openweathermap.org/data/2.5/weather?q=NewYork,USA';\n  loadJSON(url, drawWeather);\n}\n\nfunction draw() {\n  background(200);\n}\n\nfunction drawWeather(weather) {\n  // get the humidity value out of the loaded JSON\n  var humidity = weather.main.humidity;\n  fill(0, humidity); // use the humidity value to set the alpha\n  ellipse(width/2, height/2, 50, 50);\n}\n</code></div>\n"], "description": "Loads a JSON file from a file or a URL, and returns an Object or Array.\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed."}, {"submodule": "Input", "return": {"type": "Array", "description": "Array of Strings"}, "name": "loadStrings", "negative_questions": [], "module": "IO", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "filename", "description": "name of the file or url to load"}, {"optional": true, "type": "Function", "name": "callback", "description": "function to be executed after loadStrings()\n                              completes, Array is passed in as first\n                              argument"}], "file": "src/io/files.js", "positive_questions": [], "line": 192, "syntax": "loadStrings(filename,[callback])", "example": ["\n\n<p>Calling loadStrings() inside preload() guarantees to complete the\noperation before setup() and draw() are called.</p>\n\n<div><code>\nvar result;\nfunction preload() {\n  result = loadStrings('assets/test.txt');\n}\n\nfunction setup() {\n  background(200);\n  var ind = floor(random(result.length));\n  text(result[ind], 10, 10, 80, 80);\n}\n</code></div>\n\n<p>Outside preload(), you may supply a callback function to handle the\nobject:</p>\n\n<div><code>\nfunction setup() {\n  loadStrings('assets/test.txt', pickString);\n}\n\nfunction pickString(result) {\n  background(200);\n  var ind = floor(random(result.length));\n  text(result[ind], 10, 10, 80, 80);\n}\n</code></div>"], "description": "Reads the contents of a file and creates a String array of its individual\nlines. If the name of the file is used as the parameter, as in the above\nexample, the file must be located in the sketch directory/folder.\n\nAlternatively, the file maybe be loaded from anywhere on the local\ncomputer using an absolute path (something that starts with / on Unix and\nLinux, or a drive letter on Windows), or the filename parameter can be a\nURL for a file found on a network.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed."}, {"submodule": "Input", "return": {"type": "Object", "description": "Table object containing data"}, "name": "loadTable", "negative_questions": [], "module": "IO", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "filename", "description": "name of the file or URL to load"}, {"optional": true, "type": "String|Strings", "name": "options", "description": "\"header\" \"csv\" \"tsv\""}, {"optional": true, "type": "Function", "name": "callback", "description": "function to be executed after\n                                    loadTable() completes, Table object is\n                                    passed in as first argument"}], "file": "src/io/files.js", "positive_questions": [], "line": 266, "syntax": "loadTable(filename,[options],[callback])", "example": ["\n<div class=\"norender\">\n<code>\n// Given the following CSV file called \"mammals.csv\"\n// located in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n  //the file can be remote\n  //table = loadTable(\"http://p5js.org/reference/assets/mammals.csv\",\n  //                  \"csv\", \"header\");\n}\n\nfunction setup() {\n  //count the columns\n  print(table.getRowCount() + \" total rows in table\");\n  print(table.getColumnCount() + \" total columns in table\");\n\n  print(table.getColumn(\"name\"));\n  //[\"Goat\", \"Leopard\", \"Zebra\"]\n\n  //cycle through the table\n  for (var r = 0; r < table.getRowCount(); r++)\n    for (var c = 0; c < table.getColumnCount(); c++) {\n      print(table.getString(r, c));\n    }\n}\n</code>\n</div>"], "description": "<p>Reads the contents of a file or URL and creates a p5.Table object with\nits values. If a file is specified, it must be located in the sketch's\n\"data\" folder. The filename parameter can also be a URL to a file found\nonline. By default, the file is assumed to be comma-separated (in CSV\nformat). Table only looks for a header row if the 'header' option is\nincluded.</p>\n\n<p>Possible options include:\n<ul>\n<li>csv - parse the table as comma-separated values</li>\n<li>tsv - parse the table as tab-separated values</li>\n<li>header - this table has a header (title) row</li>\n</ul>\n</p>\n\n<p>When passing in multiple options, pass them in as separate parameters,\nseperated by commas. For example:\n<br><br>\n<code>\n  loadTable(\"my_csv_file.csv\", \"csv\", \"header\")\n</code>\n</p>\n\n<p> All files loaded and saved use UTF-8 encoding.</p>\n\n<p>This method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. Calling loadTable() inside preload()\nguarantees to complete the operation before setup() and draw() are called.\nOutside preload(), you may supply a callback function to handle the object.\n</p>"}, {"submodule": "Input", "return": {"type": "Object", "description": "XML object containing data"}, "name": "loadXML", "negative_questions": [], "module": "IO", "syntax": "loadXML(filename,[callback])", "itemtype": "method", "params": [{"type": "String", "name": "filename", "description": "name of the file or URL to load"}, {"optional": true, "type": "Function", "name": "callback", "description": "function to be executed after loadXML()\n                              completes, XML object is passed in as\n                              first argument"}], "file": "src/io/files.js", "positive_questions": [], "line": 545, "class": "p5", "description": "Reads the contents of a file and creates an XML object with its values.\nIf the name of the file is used as the parameter, as in the above example,\nthe file must be located in the sketch directory/folder.\n\nAlternatively, the file maybe be loaded from anywhere on the local\ncomputer using an absolute path (something that starts with / on Unix and\nLinux, or a drive letter on Windows), or the filename parameter can be a\nURL for a file found on a network.\n\nThis method is asynchronous, meaning it may not finish before the next\nline in your sketch is executed. Calling loadXML() inside preload()\nguarantees to complete the operation before setup() and draw() are called.\nOutside preload(), you may supply a callback function to handle the object."}, {"submodule": "Input", "name": "httpGet", "negative_questions": [], "module": "IO", "syntax": "httpGet(path,[data],[datatype],[callback])", "itemtype": "method", "params": [{"type": "String", "name": "path", "description": "name of the file or url to load"}, {"optional": true, "type": "Object", "name": "data", "description": "param data passed sent with request"}, {"optional": true, "type": "String", "name": "datatype", "description": "\"json\", \"jsonp\", \"xml\", or \"text\""}, {"optional": true, "type": "Function", "name": "callback", "description": "function to be executed after\n                                   httpGet() completes, data is passed in\n                                   as first argument"}], "file": "src/io/files.js", "positive_questions": [], "line": 611, "class": "p5", "description": "Method for executing an HTTP GET request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text."}, {"submodule": "Input", "name": "httpPost", "negative_questions": [], "module": "IO", "syntax": "httpPost(path,[data],[datatype],[callback])", "itemtype": "method", "params": [{"type": "String", "name": "path", "description": "name of the file or url to load"}, {"optional": true, "type": "Object", "name": "data", "description": "param data passed sent with request"}, {"optional": true, "type": "String", "name": "datatype", "description": "\"json\", \"jsonp\", \"xml\", or \"text\""}, {"optional": true, "type": "Function", "name": "callback", "description": "function to be executed after\n                                   httpGet() completes, data is passed in\n                                   as first argument"}], "file": "src/io/files.js", "positive_questions": [], "line": 630, "class": "p5", "description": "Method for executing an HTTP POST request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text."}, {"submodule": "Input", "name": "httpDo", "negative_questions": [], "module": "IO", "syntax": "httpDo(path,[method],[data],[datatype],[callback])", "itemtype": "method", "params": [{"type": "String", "name": "path", "description": "name of the file or url to load"}, {"optional": true, "type": "String", "name": "method", "description": "either \"GET\", \"POST\", or \"PUT\",\n                                   defaults to \"GET\""}, {"optional": true, "type": "Object", "name": "data", "description": "param data passed sent with request"}, {"optional": true, "type": "String", "name": "datatype", "description": "\"json\", \"jsonp\", \"xml\", or \"text\""}, {"optional": true, "type": "Function", "name": "callback", "description": "function to be executed after\n                                   httpGet() completes, data is passed in\n                                   as first argument"}], "file": "src/io/files.js", "positive_questions": [], "line": 648, "class": "p5", "description": "Method for executing an HTTP request. If data type is not specified,\np5 will try to guess based on the URL, defaulting to text."}, {"submodule": "Output", "name": "save", "negative_questions": [], "module": "IO", "syntax": "save(objectOrFilename,filename,options)", "itemtype": "method", "params": [{"type": "[Object|String]", "name": "objectOrFilename", "description": "If filename is provided, will\n                                           save canvas as an image with\n                                           either png or jpg extension\n                                           depending on the filename.\n                                           If object is provided, will\n                                           save depending on the object\n                                           and filename (see examples\n                                           above)."}, {"type": "[String]", "name": "filename", "description": "If an object is provided as the first\n                             parameter, then the second parameter\n                             indicates the filename,\n                             and should include an appropriate\n                             file extension (see examples above)."}, {"type": "[Boolean/String]", "name": "options", "description": "Additional options depend on\n                          filetype. For example, when saving JSON,\n                          <code>true</code> indicates that the\n                          output will be optimized for filesize,\n                          rather than readability."}], "file": "src/io/files.js", "positive_questions": [], "line": 806, "class": "p5", "description": "<p>Save an image, text, json, csv, wav, or html. Prompts download to\nthe client's computer. <b>Note that it is not recommended to call save()\nwithin draw if it's looping, as the save() function will open a new save\ndialog every frame.</b></p>\n<p>The default behavior is to save the canvas as an image. You can\noptionally specify a filename.\nFor example:</p>\n<pre class='language-javascript'><code>\nsave();\nsave('myCanvas.jpg'); // save a specific canvas with a filename\n</code></pre>\n\n<p>Alternately, the first parameter can be a pointer to a canvas\np5.Element, an Array of Strings,\nan Array of JSON, a JSON object, a p5.Table, a p5.Image, or a\np5.SoundFile (requires p5.sound). The second parameter is a filename\n(including extension). The third parameter is for options specific\nto this type of object. This method will save a file that fits the\ngiven paramaters. For example:</p>\n\n<pre class='language-javascript'><code>\n\nsave('myCanvas.jpg');           // Saves canvas as an image\n\nvar cnv = createCanvas(100, 100);\nsave(cnv, 'myCanvas.jpg');      // Saves canvas as an image\n\nvar gb = createGraphics(100, 100);\nsave(gb, 'myGraphics.jpg');      // Saves p5.Renderer object as an image\n\nsave(myTable, 'myTable.html');  // Saves table as html file\nsave(myTable, 'myTable.csv',);  // Comma Separated Values\nsave(myTable, 'myTable.tsv');   // Tab Separated Values\n\nsave(myJSON, 'my.json');        // Saves pretty JSON\nsave(myJSON, 'my.json', true);  // Optimizes JSON filesize\n\nsave(img, 'my.png');            // Saves pImage as a png image\n\nsave(arrayOfStrings, 'my.txt'); // Saves strings to a text file with line\n                                // breaks after each item in the array\n</code></pre>"}, {"submodule": "Output", "name": "saveJSON", "negative_questions": [], "module": "IO", "class": "p5", "itemtype": "method", "params": [{"type": "Array|Object", "name": "json", "description": ""}, {"type": "String", "name": "filename", "description": ""}, {"optional": true, "type": "Boolean", "name": "optimize", "description": "If true, removes line breaks\n                               and spaces from the output\n                               file to optimize filesize\n                               (but not readability)."}], "file": "src/io/files.js", "positive_questions": [], "line": 926, "syntax": "saveJSON(json,filename,[optimize])", "example": ["\n<div><code>\nvar json;\n\nfunction setup() {\n\n  json = {}; // new JSON Object\n\n  json.id = 0;\n  json.species = 'Panthera leo';\n  json.name = 'Lion';\n\n// To save, un-comment the line below, then click 'run'\n// saveJSONObject(json, 'lion.json');\n}\n\n// Saves the following to a file called \"lion.json\":\n// {\n//   \"id\": 0,\n//   \"species\": \"Panthera leo\",\n//   \"name\": \"Lion\"\n// }\n</div></code>"], "description": "Writes the contents of an Array or a JSON object to a .json file.\nThe file saving process and location of the saved file will\nvary between web browsers."}, {"submodule": "Output", "name": "saveStrings", "negative_questions": [], "module": "IO", "class": "p5", "itemtype": "method", "params": [{"type": "Array", "name": "list", "description": "string array to be written"}, {"type": "String", "name": "filename", "description": "filename for output"}], "file": "src/io/files.js", "positive_questions": [], "line": 982, "syntax": "saveStrings(list,filename)", "example": ["\n<div><code>\nvar words = 'apple bear cat dog';\n\n// .split() outputs an Array\nvar list = split(words, ' ');\n\n// To save the file, un-comment next line and click 'run'\n// saveStrings(list, 'nouns.txt');\n\n// Saves the following to a file called 'nouns.txt':\n//\n// apple\n// bear\n// cat\n// dog\n</code></div>"], "description": "Writes an array of Strings to a text file, one line per String.\nThe file saving process and location of the saved file will\nvary between web browsers."}, {"submodule": "Output", "name": "saveTable", "negative_questions": [], "module": "IO", "class": "p5", "itemtype": "method", "params": [{"type": "p5.Table", "name": "Table", "description": "the Table object to save to a file"}, {"type": "String", "name": "filename", "description": "the filename to which the Table should be saved"}, {"type": "[String]", "name": "options", "description": "can be one of \"tsv\", \"csv\", or \"html\""}], "file": "src/io/files.js", "positive_questions": [], "line": 1047, "syntax": "saveTable(Table,filename,options)", "example": ["\n<div><code>\nvar table;\n\nfunction setup() {\n  table = new p5.Table();\n\n  table.addColumn('id');\n  table.addColumn('species');\n  table.addColumn('name');\n\n  var newRow = table.addRow();\n  newRow.setNum('id', table.getRowCount() - 1);\n  newRow.setString('species', 'Panthera leo');\n  newRow.setString('name', 'Lion');\n\n  // To save, un-comment next line then click 'run'\n  // saveTable(table, 'new.csv');\n  }\n\n  // Saves the following to a file called 'new.csv':\n  // id,species,name\n  // 0,Panthera leo,Lion\n</code></div>"], "description": "Writes the contents of a Table object to a file. Defaults to a\ntext file with comma-separated-values ('csv') but can also\nuse tab separation ('tsv'), or generate an HTML table ('html').\nThe file saving process and location of the saved file will\nvary between web browsers."}, {"submodule": "Table", "itemtype": "property", "negative_questions": [], "module": "IO", "syntax": "columns", "file": "src/io/p5.Table.js", "positive_questions": [], "line": 47, "type": "{Array}", "class": "p5.Table", "name": "columns"}, {"submodule": "Table", "itemtype": "property", "negative_questions": [], "module": "IO", "syntax": "rows", "file": "src/io/p5.Table.js", "positive_questions": [], "line": 53, "type": "{Array}", "class": "p5.Table", "name": "rows"}, {"submodule": "Table", "name": "addRow", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"optional": true, "type": "p5.TableRow", "name": "row", "description": "row to be added to the table"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 60, "syntax": "addRow([row])", "example": ["\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n }\n\n function setup() {\n //add a row\n var newRow = table.addRow();\n newRow.setString(\"id\", table.getRowCount() - 1);\n newRow.setString(\"species\", \"Canis Lupus\");\n newRow.setString(\"name\", \"Wolf\");\n\n //print the results\n for (var r = 0; r < table.getRowCount(); r++)\n   for (var c = 0; c < table.getColumnCount(); c++)\n     print(table.getString(r, c));\n }\n </code>\n </div>"], "description": "Use addRow() to add a new row of data to a p5.Table object. By default,\nan empty row is created. Typically, you would store a reference to\nthe new row in a TableRow object (see newRow in the example above),\nand then set individual values using set().\n\nIf a p5.TableRow object is included as a parameter, then that row is\nduplicated and added to the table."}, {"submodule": "Table", "name": "removeRow", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"type": "Number", "name": "id", "description": "ID number of the row to remove"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 119, "syntax": "removeRow(id)", "example": ["\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n}\n\nfunction setup() {\n  //remove the first row\n  var r = table.removeRow(0);\n\n  //print the results\n  for (var r = 0; r < table.getRowCount(); r++)\n    for (var c = 0; c < table.getColumnCount(); c++)\n      print(table.getString(r, c));\n}\n</code>\n</div>"], "description": "Removes a row from the table object."}, {"submodule": "Table", "return": {"type": "TableRow", "description": "p5.TableRow object"}, "name": "getRow", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"type": "Number", "name": "rowID", "description": "ID number of the row to get"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 164, "syntax": "getRow(rowID)", "example": ["\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n}\n\nfunction setup() {\n  var row = table.getRow(1);\n  //print it column by column\n  //note: a row is an object, not an array\n  for (var c = 0; c < table.getColumnCount(); c++)\n    print(row.getString(c));\n}\n</code>\n</div>"], "description": "Returns a reference to the specified p5.TableRow. The reference\ncan then be used to get and set values of the selected row."}, {"submodule": "Table", "return": {"type": "Array", "description": "Array of p5.TableRows"}, "name": "getRows", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "file": "src/io/p5.Table.js", "positive_questions": [], "line": 205, "syntax": "getRows()", "example": ["\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n }\n\n function setup() {\n var rows = table.getRows();\n\n //warning: rows is an array of objects\n for (var r = 0; r < rows.length; r++)\n   rows[r].set(\"name\", \"Unicorn\");\n\n //print the results\n for (var r = 0; r < table.getRowCount(); r++)\n   for (var c = 0; c < table.getColumnCount(); c++)\n     print(table.getString(r, c));\n }\n </code>\n </div>"], "description": "Gets all rows from the table. Returns an array of p5.TableRows."}, {"submodule": "Table", "return": {"type": "TableRow", "description": ""}, "name": "findRow", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"type": "String", "name": "value", "description": "The value to match"}, {"type": "Number|String", "name": "column", "description": "ID number or title of the\n                               column to search"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 249, "syntax": "findRow(value,column)", "example": ["\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n }\n\n function setup() {\n //find the animal named zebra\n var row = table.findRow(\"Zebra\", \"name\");\n //find the corresponding species\n print(row.getString(\"species\"));\n }\n </code>\n </div>"], "description": "Finds the first row in the Table that contains the value\nprovided, and returns a reference to that row. Even if\nmultiple rows are possible matches, only the first matching\nrow is returned. The column to search may be specified by\neither its ID or title."}, {"submodule": "Table", "return": {"type": "Array", "description": "An Array of TableRow objects"}, "name": "findRows", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"type": "String", "name": "value", "description": "The value to match"}, {"type": "Number|String", "name": "column", "description": "ID number or title of the\n                               column to search"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 311, "syntax": "findRows(value,column)", "example": ["\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n }\n\n function setup() {\n //add another goat\n var newRow = table.addRow();\n newRow.setString(\"id\", table.getRowCount() - 1);\n newRow.setString(\"species\", \"Scape Goat\");\n newRow.setString(\"name\", \"Goat\");\n\n //find the rows containing animals named Goat\n var rows = table.findRows(\"Goat\", \"name\");\n print(rows.length + \" Goats found\");\n }\n </code>\n </div>"], "description": "Finds the rows in the Table that contain the value\nprovided, and returns references to those rows. Returns an\nArray, so for must be used to iterate through all the rows,\nas shown in the example above. The column to search may be\nspecified by either its ID or title."}, {"submodule": "Table", "return": {"type": "TableRow", "description": "TableRow object"}, "name": "matchRow", "negative_questions": [], "module": "IO", "syntax": "matchRow(regexp,column)", "itemtype": "method", "params": [{"type": "String", "name": "regexp", "description": "The regular expression to match"}, {"type": "String|Number", "name": "column", "description": "The column ID (number) or\n                                 title (string)"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 377, "class": "p5.Table", "description": "Finds the first row in the Table that matches the regular\nexpression provided, and returns a reference to that row.\nEven if multiple rows are possible matches, only the first\nmatching row is returned. The column to search may be\nspecified by either its ID or title."}, {"submodule": "Table", "return": {"type": "Array", "description": "An Array of TableRow objects"}, "name": "matchRows", "negative_questions": [], "module": "IO", "syntax": "matchRows(regexp,[column])", "itemtype": "method", "params": [{"type": "String", "name": "regexp", "description": "The regular expression to match"}, {"optional": true, "type": "String|Number", "name": "column", "description": "The column ID (number) or\n                                 title (string)"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 409, "class": "p5.Table", "description": "Finds the first row in the Table that matches the regular\nexpression provided, and returns a reference to that row.\nEven if multiple rows are possible matches, only the first\nmatching row is returned. The column to search may be specified\nby either its ID or title."}, {"submodule": "Table", "return": {"type": "Array", "description": "Array of column values"}, "name": "getColumn", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"type": "String|Number", "name": "column", "description": "String or Number of the column to return"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 443, "syntax": "getColumn(column)", "example": ["\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n }\n\n function setup() {\n //getColumn returns an array that can be printed directly\n print(table.getColumn(\"species\"));\n //outputs [\"Capra hircus\", \"Panthera pardus\", \"Equus zebra\"]\n }\n </code>\n </div>"], "description": "Retrieves all values in the specified column, and returns them\nas an array. The column may be specified by either its ID or title."}, {"submodule": "Table", "name": "clearRows", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "file": "src/io/p5.Table.js", "positive_questions": [], "line": 492, "syntax": "clearRows()", "example": ["\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n }\n\n function setup() {\n table.clearRows();\n print(table.getRowCount() + \" total rows in table\");\n print(table.getColumnCount() + \" total columns in table\");\n }\n </code>\n </div>"], "description": "Removes all rows from a Table. While all rows are removed,\ncolumns and column titles are maintained."}, {"submodule": "Table", "name": "addColumn", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"optional": true, "type": "String", "name": "title", "description": "title of the given column"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 530, "syntax": "addColumn([title])", "example": ["\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n }\n\n function setup() {\n table.addColumn(\"carnivore\");\n table.set(0, \"carnivore\", \"no\");\n table.set(1, \"carnivore\", \"yes\");\n table.set(2, \"carnivore\", \"no\");\n\n //print the results\n for (var r = 0; r < table.getRowCount(); r++)\n   for (var c = 0; c < table.getColumnCount(); c++)\n     print(table.getString(r, c));\n }\n </code>\n </div>"], "description": "Use addColumn() to add a new column to a Table object.\nTypically, you will want to specify a title, so the column\nmay be easily referenced later by name. (If no title is\nspecified, the new column's title will be null.)"}, {"submodule": "Table", "return": {"type": "Number", "description": "Number of rows in this table"}, "name": "getRowCount", "negative_questions": [], "module": "IO", "syntax": "getRowCount()", "itemtype": "method", "file": "src/io/p5.Table.js", "positive_questions": [], "line": 586, "class": "p5.Table", "description": "Returns the total number of rows in a Table."}, {"submodule": "Table", "name": "removeTokens", "negative_questions": [], "module": "IO", "syntax": "removeTokens(chars,[column])", "itemtype": "method", "params": [{"type": "String", "name": "chars", "description": "String listing characters to be removed"}, {"optional": true, "type": "String|Number", "name": "column", "description": "Column ID (number)\n                                 or name (string)"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 597, "class": "p5.Table", "description": "<p>Removes any of the specified characters (or \"tokens\").</p>\n\n<p>If no column is specified, then the values in all columns and\nrows are processed. A specific column may be referenced by\neither its ID or title.</p>"}, {"submodule": "Table", "name": "trim", "negative_questions": [], "module": "IO", "syntax": "trim(column)", "itemtype": "method", "params": [{"type": "String|Number", "name": "column", "description": "Column ID (number)\n                                 or name (string)"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 648, "class": "p5.Table", "description": "Trims leading and trailing whitespace, such as spaces and tabs,\nfrom String table values. If no column is specified, then the\nvalues in all columns and rows are trimmed. A specific column\nmay be referenced by either its ID or title."}, {"submodule": "Table", "name": "removeColumn", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"type": "String|Number", "name": "column", "description": "columnName (string) or ID (number)"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 690, "syntax": "removeColumn(column)", "example": ["\n <div class=\"norender\">\n <code>\n // Given the CSV file \"mammals.csv\"\n // in the project's \"assets\" folder:\n //\n // id,species,name\n // 0,Capra hircus,Goat\n // 1,Panthera pardus,Leopard\n // 2,Equus zebra,Zebra\n\n var table;\n\n function preload() {\n //my table is comma separated value \"csv\"\n //and has a header specifying the columns labels\n table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n }\n\n function setup() {\n table.removeColumn(\"id\");\n print(table.getColumnCount());\n }\n </code>\n </div>"], "description": "Use removeColumn() to remove an existing column from a Table\nobject. The column to be removed may be identified by either\nits title (a String) or its index value (an int).\nremoveColumn(0) would remove the first column, removeColumn(1)\nwould remove the second column, and so on."}, {"submodule": "Table", "name": "set", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"type": "String|Number", "name": "column", "description": "column ID (Number)\n                              or title (String)"}, {"type": "String|Number", "name": "value", "description": "value to assign"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 755, "syntax": "set(column,value)", "example": ["\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n}\n\nfunction setup() {\n  table.set(0, \"species\", \"Canis Lupus\");\n  table.set(0, \"name\", \"Wolf\");\n\n  //print the results\n  for (var r = 0; r < table.getRowCount(); r++)\n    for (var c = 0; c < table.getColumnCount(); c++)\n      print(table.getString(r, c));\n}\n</code>\n</div>"], "description": "Stores a value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified\nby either its ID or title."}, {"submodule": "Table", "name": "setNum", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"type": "Number", "name": "row", "description": "row ID"}, {"type": "String|Number", "name": "column", "description": "column ID (Number)\n                              or title (String)"}, {"type": "Number", "name": "value", "description": "value to assign"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 800, "syntax": "setNum(row,column,value)", "example": ["\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n}\n\nfunction setup() {\n  table.setNum(1, \"id\", 1);\n\n  print(table.getColumn(0));\n  //[\"0\", 1, \"2\"]\n}\n</code>\n</div>"], "description": "Stores a Float value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified\nby either its ID or title."}, {"submodule": "Table", "name": "setString", "negative_questions": [], "module": "IO", "syntax": "setString(row,column,value)", "itemtype": "method", "params": [{"type": "Number", "name": "row", "description": "row ID"}, {"type": "String|Number", "name": "column", "description": "column ID (Number)\n                              or title (String)"}, {"type": "String", "name": "value", "description": "value to assign"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 844, "class": "p5.Table", "description": "Stores a String value in the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified\nby either its ID or title."}, {"submodule": "Table", "return": {"type": "String|Number", "description": ""}, "name": "get", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"type": "Number", "name": "row", "description": "row ID"}, {"type": "String|Number", "name": "column", "description": "columnName (string) or\n                                  ID (number)"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 859, "syntax": "get(row,column)", "example": ["\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n}\n\nfunction setup() {\n  print(table.get(0, 1));\n  //Capra hircus\n  print(table.get(0, \"species\"));\n  //Capra hircus\n}\n</code>\n</div>"], "description": "Retrieves a value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by\neither its ID or title."}, {"submodule": "Table", "return": {"type": "Number", "description": ""}, "name": "getNum", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"type": "Number", "name": "row", "description": "row ID"}, {"type": "String|Number", "name": "column", "description": "columnName (string) or\n                                  ID (number)"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 902, "syntax": "getNum(row,column)", "example": ["\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n}\n\nfunction setup() {\n  print(table.getNum(1, 0) + 100);\n  //id 1 + 100 = 101\n}\n</code>\n</div>"], "description": "Retrieves a Float value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by\neither its ID or title."}, {"submodule": "Table", "return": {"type": "String", "description": ""}, "name": "getString", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"type": "Number", "name": "row", "description": "row ID"}, {"type": "String|Number", "name": "column", "description": "columnName (string) or\n                                  ID (number)"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 943, "syntax": "getString(row,column)", "example": ["\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n}\n\nfunction setup() {\n  var tableArray = table.getArray();\n\n  //output each row as array\n  for (var i = 0; i < tableArray.length; i++)\n    print(tableArray[i]);\n}\n</code>\n</div>"], "description": "Retrieves a String value from the Table's specified row and column.\nThe row is specified by its ID, while the column may be specified by\neither its ID or title."}, {"submodule": "Table", "return": {"type": "Object", "description": ""}, "name": "getObject", "negative_questions": [], "module": "IO", "class": "p5.Table", "itemtype": "method", "params": [{"type": "String", "name": "headerColumn", "description": "Name of the column which should be used to\n                             title each row object (optional)"}], "file": "src/io/p5.Table.js", "positive_questions": [], "line": 987, "syntax": "getObject(headerColumn)", "example": ["\n<div class=\"norender\">\n<code>\n// Given the CSV file \"mammals.csv\"\n// in the project's \"assets\" folder:\n//\n// id,species,name\n// 0,Capra hircus,Goat\n// 1,Panthera pardus,Leopard\n// 2,Equus zebra,Zebra\n\nvar table;\n\nfunction preload() {\n  //my table is comma separated value \"csv\"\n  //and has a header specifying the columns labels\n  table = loadTable(\"assets/mammals.csv\", \"csv\", \"header\");\n}\n\nfunction setup() {\n  var tableObject = table.getObject();\n\n  print(tableObject);\n  //outputs an object\n}\n</code>\n</div>\n"], "description": "Retrieves all table data and returns as an object. If a column name is\npassed in, each row object will be stored with that attribute as its\ntitle."}, {"submodule": "Table", "return": {"type": "Array", "description": ""}, "name": "getArray", "negative_questions": [], "module": "IO", "syntax": "getArray()", "itemtype": "method", "file": "src/io/p5.Table.js", "positive_questions": [], "line": 1048, "class": "p5.Table", "description": "Retrieves all table data and returns it as a multidimensional array."}, {"submodule": "Table", "name": "set", "negative_questions": [], "module": "IO", "syntax": "set(column,value)", "itemtype": "method", "params": [{"type": "String|Number", "name": "column", "description": "Column ID (Number)\n                              or Title (String)"}, {"type": "String|Number", "name": "value", "description": "The value to be stored"}], "file": "src/io/p5.TableRow.js", "positive_questions": [], "line": 42, "class": "p5.TableRow", "description": "Stores a value in the TableRow's specified column.\nThe column may be specified by either its ID or title."}, {"submodule": "Table", "name": "setNum", "negative_questions": [], "module": "IO", "syntax": "setNum(column,value)", "itemtype": "method", "params": [{"type": "String|Number", "name": "column", "description": "Column ID (Number)\n                              or Title (String)"}, {"type": "Number", "name": "value", "description": "The value to be stored\n                              as a Float"}], "file": "src/io/p5.TableRow.js", "positive_questions": [], "line": 78, "class": "p5.TableRow", "description": "Stores a Float value in the TableRow's specified column.\nThe column may be specified by either its ID or title."}, {"submodule": "Table", "name": "setString", "negative_questions": [], "module": "IO", "syntax": "setString(column,value)", "itemtype": "method", "params": [{"type": "String|Number", "name": "column", "description": "Column ID (Number)\n                              or Title (String)"}, {"type": "String", "name": "value", "description": "The value to be stored\n                              as a String"}], "file": "src/io/p5.TableRow.js", "positive_questions": [], "line": 94, "class": "p5.TableRow", "description": "Stores a String value in the TableRow's specified column.\nThe column may be specified by either its ID or title."}, {"submodule": "Table", "return": {"type": "String|Number", "description": ""}, "name": "get", "negative_questions": [], "module": "IO", "syntax": "get(column)", "itemtype": "method", "params": [{"type": "String|Number", "name": "column", "description": "columnName (string) or\n                                 ID (number)"}], "file": "src/io/p5.TableRow.js", "positive_questions": [], "line": 109, "class": "p5.TableRow", "description": "Retrieves a value from the TableRow's specified column.\nThe column may be specified by either its ID or title."}, {"submodule": "Table", "return": {"type": "Number", "description": "Float Floating point number"}, "name": "getNum", "negative_questions": [], "module": "IO", "syntax": "getNum(column)", "itemtype": "method", "params": [{"type": "String|Number", "name": "column", "description": "columnName (string) or\n                                 ID (number)"}], "file": "src/io/p5.TableRow.js", "positive_questions": [], "line": 126, "class": "p5.TableRow", "description": "Retrieves a Float value from the TableRow's specified\ncolumn. The column may be specified by either its ID or\ntitle."}, {"submodule": "Table", "return": {"type": "String", "description": "String"}, "name": "getString", "negative_questions": [], "module": "IO", "syntax": "getString(column)", "itemtype": "method", "params": [{"type": "String|Number", "name": "column", "description": "columnName (string) or\n                                 ID (number)"}], "file": "src/io/p5.TableRow.js", "positive_questions": [], "line": 150, "class": "p5.TableRow", "description": "Retrieves an String value from the TableRow's specified\ncolumn. The column may be specified by either its ID or\ntitle."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "absolute value of given number"}, "name": "abs", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "n", "description": "number to compute"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 12, "syntax": "abs(n)", "example": ["\n<div class = \"norender\"><code>\nfunction setup() {\n  var x = -3;\n  var y = abs(x);\n\n  print(x); // -3\n  print(y); // 3\n}\n</div></code>"], "description": "Calculates the absolute value (magnitude) of a number. Maps to Math.abs().\nThe absolute value of a number is always positive."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "rounded up number"}, "name": "ceil", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "n", "description": "number to round up"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 32, "syntax": "ceil(n)", "example": ["\n<div><code>\nfunction draw() {\n  background(200);\n  // map, mouseX between 0 and 5.\n  var ax = map(mouseX, 0, 100, 0, 5);\n  var ay = 66;\n\n  //Get the ceiling of the mapped number.\n  var bx = ceil(map(mouseX, 0, 100, 0,5));\n  var by = 33;\n\n  // Multiply the mapped numbers by 20 to more easily\n  // see the changes.\n  stroke(0);\n  fill(0);\n  line(0, ay, ax * 20, ay);\n  line(0, by, bx * 20, by);\n\n  // Reformat the float returned by map and draw it.\n  noStroke();\n  text(nfc(ax, 2,2), ax, ay - 5);\n  text(nfc(bx,1,1), bx, by - 5);\n}\n</div></code>"], "description": "Calculates the closest int value that is greater than or equal to the\nvalue of the parameter. Maps to Math.ceil(). For example, ceil(9.03)\nreturns the value 10."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "constrained number"}, "name": "constrain", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "n", "description": "number to constrain"}, {"type": "Number", "name": "low", "description": "minimum limit"}, {"type": "Number", "name": "high", "description": "maximum limit"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 68, "syntax": "constrain(n,low,high)", "example": ["\n<div><code>\nfunction draw() {\n  background(200);\n\n  var leftWall = 25;\n  var rightWall = 75;\n\n  // xm is just the mouseX, while\n  // xc is the mouseX, but constrained\n  // between the leftWall and rightWall!\n  var xm = mouseX;\n  var xc = constrain(mouseX, leftWall, rightWall);\n\n  // Draw the walls.\n  stroke(150);\n  line(leftWall, 0, leftWall, height);\n  line(rightWall, 0, rightWall, height);\n\n  // Draw xm and xc as circles.\n  noStroke();\n  fill(150);\n  ellipse(xm, 33, 9,9); // Not Constrained\n  fill(0);\n  ellipse(xc, 66, 9,9); // Constrained\n}\n</div></code>"], "description": "Constrains a value between a minimum and maximum value."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "distance between the two points"}, "name": "dist", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x1", "description": "x-coordinate of the first point"}, {"type": "Number", "name": "y1", "description": "y-coordinate of the first point"}, {"type": "Number", "name": "x2", "description": "x-coordinate of the second point"}, {"type": "Number", "name": "y2", "description": "y-coordinate of the second point"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 108, "syntax": "dist(x1,y1,x2,y2)", "example": ["\n<div><code>\n// Move your mouse inside the canvas to see the\n// change in distance between two points!\nfunction draw() {\n  background(200);\n  fill(0);\n\n  var x1 = 10;\n  var y1 = 90;\n  var x2 = mouseX;\n  var y2 = mouseY;\n\n  line(x1, y1, x2, y2);\n  ellipse(x1, y1, 7, 7);\n  ellipse(x2, y2, 7, 7);\n\n  // d is the length of the line\n  // the distance from point 1 to point 2.\n  var d = int(dist(x1, y1, x2, y2));\n\n  // Let's write d along the line we are drawing!\n  push();\n  translate( (x1+x2)/2, (y1+y2)/2 );\n  rotate( atan2(y2-y1,x2-x1) );\n  text(nfc(d,1,1), 0, -5);\n  pop();\n  // Fancy!\n}\n</div></code>"], "description": "Calculates the distance between two points."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "e^n"}, "name": "exp", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "n", "description": "exponent to raise"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 152, "syntax": "exp(n)", "example": ["\n<div><code>\nfunction draw() {\n  background(200);\n\n  // Compute the exp() function with a value between 0 and 2\n  var xValue = map(mouseX, 0, width, 0, 2);\n  var yValue = exp(xValue);\n\n  var y = map(yValue, 0, 8, height, 0);\n\n  var legend = \"exp (\" + nfc(xValue, 3) +\")\\n= \" + nf(yValue, 1, 4);\n  stroke(150);\n  line(mouseX, y, mouseX, height);\n  fill(0);\n  text(legend, 5, 15);\n  noStroke();\n  ellipse (mouseX,y, 7, 7);\n\n  // Draw the exp(x) curve,\n  // over the domain of x from 0 to 2\n  noFill();\n  stroke(0);\n  beginShape();\n  for (var x = 0; x < width; x++) {\n    xValue = map(x, 0, width, 0, 2);\n    yValue = exp(xValue);\n    y = map(yValue, 0, 8, height, 0);\n    vertex(x, y);\n  }\n\n  endShape();\n  line(0, 0, 0, height);\n  line(0, height-1, width, height-1);\n}\n</div></code>"], "description": "Returns Euler's number e (2.71828...) raised to the power of the n\nparameter. Maps to Math.exp()."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "rounded down number"}, "name": "floor", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "n", "description": "number to round down"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 198, "syntax": "floor(n)", "example": ["\n<div><code>\nfunction draw() {\n  background(200);\n  //map, mouseX between 0 and 5.\n  var ax = map(mouseX, 0, 100, 0, 5);\n  var ay = 66;\n\n  //Get the floor of the mapped number.\n  var bx = floor(map(mouseX, 0, 100, 0,5));\n  var by = 33;\n\n  // Multiply the mapped numbers by 20 to more easily\n  // see the changes.\n  stroke(0);\n  fill(0);\n  line(0, ay, ax * 20, ay);\n  line(0, by, bx * 20, by);\n\n  // Reformat the float returned by map and draw it.\n  noStroke();\n  text(nfc(ax, 2,2), ax, ay - 5);\n  text(nfc(bx,1,1), bx, by - 5);\n}\n</div></code>"], "description": "Calculates the closest int value that is less than or equal to the\nvalue of the parameter. Maps to Math.floor()."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "lerped value"}, "name": "lerp", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "start", "description": "first value"}, {"type": "Number", "name": "stop", "description": "second value"}, {"type": "Number", "name": "amt", "description": "number between 0.0 and 1.0"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 233, "syntax": "lerp(start,stop,amt)", "example": ["\n<div><code>\nfunction setup() {\n  background(200);\n  var a = 20;\n  var b = 80;\n  var c = lerp(a,b, .2);\n  var d = lerp(a,b, .5);\n  var e = lerp(a,b, .8);\n\n  var y = 50\n\n  strokeWeight(5);\n  stroke(0); // Draw the original points in black\n  point(a, y);\n  int(b, y);\n\n  stroke(100); // Draw the lerp points in gray\n  point(c, y);\n  point(d, y);\n  point(e, y);\n}\n</div></code>"], "description": "Calculates a number between two numbers at a specific increment. The amt\nparameter is the amount to interpolate between the two values where 0.0\nequal to the first point, 0.1 is very near the first point, 0.5 is\nhalf-way in between, etc. The lerp function is convenient for creating\nmotion along a straight path and for drawing dotted lines."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "natural logarithm of n"}, "name": "log", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "n", "description": "number greater than 0"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 273, "syntax": "log(n)", "example": ["\n<div><code>\nfunction draw() {\n  background(200);\n  var maxX = 2.8;\n  var maxY = 1.5;\n\n  // Compute the natural log of a value between 0 and maxX\n  var xValue = map(mouseX, 0, width, 0, maxX);\n  if (xValue > 0) { // Cannot take the log of a negative number.\n    var yValue = log(xValue);\n    var y = map(yValue, -maxY, maxY, height, 0);\n\n    // Display the calculation occurring.\n    var legend = \"log(\" + nf(xValue, 1, 2) + \")\\n= \" + nf(yValue, 1, 3);\n    stroke(150);\n    line(mouseX, y, mouseX, height);\n    fill(0);\n    text (legend, 5, 15);\n    noStroke();\n    ellipse (mouseX, y, 7, 7);\n  }\n\n  // Draw the log(x) curve,\n  // over the domain of x from 0 to maxX\n  noFill();\n  stroke(0);\n  beginShape();\n  for(var x=0; x<width; x++) {\n    xValue = map(x, 0, width, 0, maxX);\n    yValue = log(xValue);\n    y = map(yValue, -maxY, maxY, height, 0);\n    vertex(x, y);\n  }\n  endShape();\n  line(0,0,0,height);\n  line(0,height/2,width, height/2);\n}\n</div></code>"], "description": "Calculates the natural logarithm (the base-e logarithm) of a number. This\nfunction expects the n parameter to be a value greater than 0.0. Maps to\nMath.log()."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "magnitude of vector from (0,0) to (a,b)"}, "name": "mag", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "a", "description": "first value"}, {"type": "Number", "name": "b", "description": "second value"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 323, "syntax": "mag(a,b)", "example": ["\n<div><code>\nfunction setup() {\n  var x1 = 20;\n  var x2 = 80;\n  var y1 = 30;\n  var y2 = 70;\n\n  line(0, 0, x1, y1);\n  print(mag(x1, y1));  // Prints \"36.05551\"\n  line(0, 0, x2, y1);\n  print(mag(x2, y1));  // Prints \"85.44004\"\n  line(0, 0, x1, y2);\n  print(mag(x1, y2));  // Prints \"72.8011\"\n  line(0, 0, x2, y2);\n  print(mag(x2, y2));  // Prints \"106.30146\"\n}\n</div></code>"], "description": "Calculates the magnitude (or length) of a vector. A vector is a direction\nin space commonly used in computer graphics and linear algebra. Because it\nhas no \"start\" position, the magnitude of a vector can be thought of as\nthe distance from the coordinate 0,0 to its x,y value. Therefore, mag() is\na shortcut for writing dist(0, 0, x, y)."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "remapped number"}, "name": "map", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "value", "description": "the incoming value to be converted"}, {"type": "Number", "name": "start1", "description": "lower bound of the value's current range"}, {"type": "Number", "name": "stop1", "description": "upper bound of the value's current range"}, {"type": "Number", "name": "start2", "description": "lower bound of the value's target range"}, {"type": "Number", "name": "stop", "description": "upper bound of the value's target range"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 357, "syntax": "map(value,start1,stop1,start2,stop)", "example": ["\n  <div><code>\n    createCanvas(200, 200);\n    var value = 25;\n    var m = map(value, 0, 100, 0, width);\n    ellipse(m, 200, 10, 10);\n  </code></div>\n\n  <div><code>\n    function setup() {\n      createCanvs(200, 200);\n      noStroke();\n    }\n\n    function draw() {\n      background(204);\n      var x1 = map(mouseX, 0, width, 50, 150);\n      ellipse(x1, 75, 50, 50);\n      var x2 = map(mouseX, 0, width, 0, 200);\n      ellipse(x2, 125, 50, 50);\n    }\n  </div></code>"], "description": "Re-maps a number from one range to another.\nIn the first example above, the number 25 is converted from a value in the\nrange of 0 to 100 into a value that ranges from the left edge of the\nwindow (0) to the right edge (width)."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "maximum Number"}, "name": "max", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number|Array", "name": "n0", "description": "Numbers to compare"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 397, "syntax": "max(n0)", "example": ["\n<div><code>\nfunction setup() {\n  // Change the elements in the array and run the sketch\n  // to show how max() works!\n  numArray = new Array(2,1,5,4,8,9);\n  fill(0);\n  noStroke();\n  text(\"Array Elements\", 0, 10);\n  // Draw all numbers in the array\n  var spacing = 15;\n  var elemsY = 25;\n  for(var i = 0; i < numArray.length; i++) {\n    text(numArray[i], i * spacing, elemsY);\n  }\n  maxX = 33;\n  maxY = 80;\n  // Draw the Maximum value in the array.\n  textSize(32);\n  text(max(numArray), maxX, maxY);\n}\n</div></code>"], "description": "Determines the largest value in a sequence of numbers, and then returns\nthat value. max() accepts any number of Number parameters, or an Array\nof any length."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "minimum Number"}, "name": "min", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number|Array", "name": "n0", "description": "Numbers to compare"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 436, "syntax": "min(n0)", "example": ["\n<div><code>\nfunction setup() {\n  // Change the elements in the array and run the sketch\n  // to show how min() works!\n  numArray = new Array(2,1,5,4,8,9);\n  fill(0);\n  noStroke();\n  text(\"Array Elements\", 0, 10);\n  // Draw all numbers in the array\n  var spacing = 15;\n  var elemsY = 25;\n  for(var i = 0; i < numArray.length; i++) {\n    text(numArray[i], i * spacing, elemsY);\n  }\n  maxX = 33;\n  maxY = 80;\n  // Draw the Minimum value in the array.\n  textSize(32);\n  text(min(numArray), maxX, maxY);\n}\n</div></code>"], "description": "Determines the smallest value in a sequence of numbers, and then returns\nthat value. min() accepts any number of Number parameters, or an Array\nof any length."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "normalized number"}, "name": "norm", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "value", "description": "incoming value to be normalized"}, {"type": "Number", "name": "start", "description": "lower bound of the value's current range"}, {"type": "Number", "name": "stop", "description": "upper bound of the value's current range"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 475, "syntax": "norm(value,start,stop)", "example": ["\n<div><code>\nfunction draw() {\n  background(200);\n  currentNum = mouseX;\n  lowerBound = 0;\n  upperBound = width; //100;\n  normalized = norm(currentNum, lowerBound, upperBound);\n  lineY = 70\n  line(0, lineY, width, lineY);\n  //Draw an ellipse mapped to the non-normalized value.\n  noStroke();\n  fill(50)\n  var s = 7; // ellipse size\n  ellipse(currentNum, lineY, s, s);\n\n  // Draw the guide\n  guideY = lineY + 15;\n  text(\"0\", 0, guideY);\n  textAlign(RIGHT);\n  text(\"100\", width, guideY);\n\n  // Draw the normalized value\n  textAlign(LEFT);\n  fill(0);\n  textSize(32);\n  normalY = 40;\n  normalX = 20;\n  text(normalized, normalX, normalY);\n}\n</div></code>"], "description": "Normalizes a number from another range into a value between 0 and 1.\nIdentical to map(value, low, high, 0, 1).\nNumbers outside of the range are not clamped to 0 and 1, because\nout-of-range values are often intentional and useful. (See the second\nexample above.)"}, {"submodule": "Calculation", "return": {"type": "Number", "description": "n^e"}, "name": "pow", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "n", "description": "base of the exponential expression"}, {"type": "Number", "name": "e", "description": "power by which to raise the base"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 523, "syntax": "pow(n,e)", "example": ["\n<div><code>\nfunction setup() {\n  //Exponentially increase the size of an ellipse.\n  eSize = 3; // Original Size\n  eLoc = 10; // Original Location\n\n  ellipse(eLoc, eLoc, eSize, eSize);\n\n  ellipse(eLoc*2, eLoc*2, pow(eSize, 2), pow(eSize, 2));\n\n  ellipse(eLoc*4, eLoc*4, pow(eSize, 3), pow(eSize, 3));\n\n  ellipse(eLoc*8, eLoc*8, pow(eSize, 4), pow(eSize, 4));\n}\n</div></code>"], "description": "Facilitates exponential expressions. The pow() function is an efficient\nway of multiplying numbers by themselves (or their reciprocals) in large\nquantities. For example, pow(3, 5) is equivalent to the expression\n3*3*3*3*3 and pow(3, -5) is equivalent to 1 / 3*3*3*3*3. Maps to\nMath.pow()."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "rounded number"}, "name": "round", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "n", "description": "number to round"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 553, "syntax": "round(n)", "example": ["\n<div><code>\nfunction draw() {\n  background(200);\n  //map, mouseX between 0 and 5.\n  var ax = map(mouseX, 0, 100, 0, 5);\n  var ay = 66;\n\n  // Round the mapped number.\n  var bx = round(map(mouseX, 0, 100, 0,5));\n  var by = 33;\n\n  // Multiply the mapped numbers by 20 to more easily\n  // see the changes.\n  stroke(0);\n  fill(0);\n  line(0, ay, ax * 20, ay);\n  line(0, by, bx * 20, by);\n\n  // Reformat the float returned by map and draw it.\n  noStroke();\n  text(nfc(ax, 2,2), ax, ay - 5);\n  text(nfc(bx,1,1), bx, by - 5);\n}\n</div></code>"], "description": "Calculates the integer closest to the n parameter. For example,\nround(133.8) returns the value 134. Maps to Math.round()."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "squared number"}, "name": "sq", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "n", "description": "number to square"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 588, "syntax": "sq(n)", "example": ["\n<div><code>\nfunction draw() {\n  background(200);\n  eSize = 7;\n  x1 = map(mouseX, 0, width, 0, 10);\n  y1 = 80;\n  x2 = sq(x1);\n  y2 = 20;\n\n  // Draw the non-squared.\n  line(0, y1, width, y1);\n  ellipse(x1, y1, eSize, eSize);\n\n  // Draw the squared.\n  line(0, y2, width, y2);\n  ellipse(x2, y2, eSize, eSize);\n\n  // Draw dividing line.\n  stroke(100)\n  line(0, height/2, width, height/2);\n\n  // Draw text.\n  noStroke();\n  fill(0);\n  text(\"x = \" + x1, 0, y1 + spacing);\n  text(\"sqrt(x) = \" + x2, 0, y2 + spacing);\n}\n</div></code>"], "description": "Squares a number (multiplies a number by itself). The result is always a\npositive number, as multiplying two negative numbers always yields a\npositive result. For example, -1 * -1 = 1."}, {"submodule": "Calculation", "return": {"type": "Number", "description": "square root of number"}, "name": "sqrt", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "n", "description": "non-negative number to square root"}], "file": "src/math/calculation.js", "positive_questions": [], "line": 628, "syntax": "sqrt(n)", "example": ["\n<div><code>\nfunction draw() {\n  background(200);\n  eSize = 7;\n  x1 = mouseX;\n  y1 = 80;\n  x2 = sqrt(x1);\n  y2 = 20;\n\n  // Draw the non-squared.\n  line(0, y1, width, y1);\n  ellipse(x1, y1, eSize, eSize);\n\n  // Draw the squared.\n  line(0, y2, width, y2);\n  ellipse(x2, y2, eSize, eSize);\n\n  // Draw dividing line.\n  stroke(100)\n  line(0, height/2, width, height/2);\n\n  // Draw text.\n  noStroke();\n  fill(0);\n  var spacing = 15;\n  text(\"x = \" + x1, 0, y1 + spacing);\n  text(\"sqrt(x) = \" + x2, 0, y2 + spacing);\n}\n</div></code>"], "description": "Calculates the square root of a number. The square root of a number is\nalways positive, even though there may be a valid negative root. The\nsquare root s of number a is such that s*s = a. It is the opposite of\nsquaring. Maps to Math.sqrt()."}, {"submodule": "Math", "name": "createVector", "negative_questions": [], "module": "Math", "syntax": "createVector([x],[y],[z])", "itemtype": "method", "params": [{"optional": true, "type": "Number", "name": "x", "description": "x component of the vector"}, {"optional": true, "type": "Number", "name": "y", "description": "y component of the vector"}, {"optional": true, "type": "Number", "name": "z", "description": "z component of the vector"}], "file": "src/math/math.js", "positive_questions": [], "line": 13, "class": "p5", "description": "Creates a new p5.Vector (the datatype for storing vectors). This provides a\ntwo or three dimensional vector, specifically a Euclidean (also known as\ngeometric) vector. A vector is an entity that has both magnitude and\ndirection."}, {"submodule": "Noise", "return": {"type": "Number", "description": "Perlin noise value (between 0 and 1) at specified\n                     coordinates"}, "name": "noise", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "x", "description": "x-coordinate in noise space"}, {"type": "Number", "name": "y", "description": "y-coordinate in noise space"}, {"type": "Number", "name": "z", "description": "z-coordinate in noise space"}], "file": "src/math/noise.js", "positive_questions": [], "line": 53, "syntax": "noise(x,y,z)", "example": ["\n<div>\n<code>var xoff = 0.0;\n\nfunction draw() {\n  background(204);\n  xoff = xoff + .01;\n  var n = noise(xoff) * width;\n  line(n, 0, n, height);\n}\n</code>\n</div>\n<div>\n<code>var noiseScale=0.02;\n\nfunction draw() {\n  background(0);\n  for (var x=0; x < width; x++) {\n    var noiseVal = noise((mouseX+x)*noiseScale, mouseY*noiseScale);\n    stroke(noiseVal*255);\n    line(x, mouseY+noiseVal*80, x, height);\n  }\n}\n</code>\n</div>"], "description": "Returns the Perlin noise value at specified coordinates. Perlin noise is\na random sequence generator producing a more natural ordered, harmonic\nsuccession of numbers compared to the standard <b>random()</b> function.\nIt was invented by Ken Perlin in the 1980s and been used since in\ngraphical applications to produce procedural textures, natural motion,\nshapes, terrains etc.<br /><br /> The main difference to the\n<b>random()</b> function is that Perlin noise is defined in an infinite\nn-dimensional space where each pair of coordinates corresponds to a\nfixed semi-random value (fixed only for the lifespan of the program).\nThe resulting value will always be between 0.0 and 1.0. p5.js can\ncompute 1D, 2D and 3D noise, depending on the number of coordinates\ngiven. The noise value can be animated by moving through the noise space\nas demonstrated in the example above. The 2nd and 3rd dimension can also\nbe interpreted as time.<br /><br />The actual noise is structured\nsimilar to an audio signal, in respect to the function's use of\nfrequencies. Similar to the concept of harmonics in physics, perlin\nnoise is computed over several octaves which are added together for the\nfinal result. <br /><br />Another way to adjust the character of the\nresulting sequence is the scale of the input coordinates. As the\nfunction works within an infinite space the value of the coordinates\ndoesn't matter as such, only the distance between successive coordinates\ndoes (eg. when using <b>noise()</b> within a loop). As a general rule\nthe smaller the difference between coordinates, the smoother the\nresulting noise sequence will be. Steps of 0.005-0.03 work best for most\napplications, but this will differ depending on use."}, {"submodule": "Noise", "name": "noiseDetail", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "lod", "description": "number of octaves to be used by the noise"}, {"type": "Number", "name": "falloff", "description": "falloff factor for each octave"}], "file": "src/math/noise.js", "positive_questions": [], "line": 195, "syntax": "noiseDetail(lod,falloff)", "example": ["\n <div>\n <code>\nvar noiseVal;\n var noiseScale=0.02;\nfunction setup() {\n   createCanvas(100,100);\n }\nfunction draw() {\n   background(0);\n   for (var y = 0; y < height; y++) {\n     for (var x = 0; x < width/2; x++) {\n       noiseDetail(2,0.2);\n       noiseVal = noise((mouseX+x) * noiseScale,\n                        (mouseY+y) * noiseScale);\n       stroke(noiseVal*255);\n       point(x,y);\n       noiseDetail(8,0.65);\n       noiseVal = noise((mouseX + x + width/2) * noiseScale,\n                        (mouseY + y) * noiseScale);\n       stroke(noiseVal*255);\n       point(x + width/2, y);\n     }\n   }\n }\n </code>\n </div>"], "description": "Adjusts the character and level of detail produced by the Perlin noise\n function. Similar to harmonics in physics, noise is computed over\n several octaves. Lower octaves contribute more to the output signal and\n as such define the overall intensity of the noise, whereas higher octaves\n create finer grained details in the noise sequence. By default, noise is\n computed over 4 octaves with each octave contributing exactly half than\n its predecessor, starting at 50% strength for the 1st octave. This\n falloff amount can be changed by adding an additional function\n parameter. Eg. a falloff factor of 0.75 means each octave will now have\n 75% impact (25% less) of the previous lower octave. Any value between\n 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n result in greater than 1.0 values returned by <b>noise()</b>.<br /><br\n />By changing these parameters, the signal created by the <b>noise()</b>\n function can be adapted to fit very specific needs and characteristics."}, {"submodule": "Noise", "name": "noiseSeed", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "seed", "description": "the seed value"}], "file": "src/math/noise.js", "positive_questions": [], "line": 251, "syntax": "noiseSeed(seed)", "example": ["\n<div>\n<code>var xoff = 0.0;\n\nfunction setup() {\n  noiseSeed(99);\n  stroke(0, 10);\n}\n\nfunction draw() {\n  xoff = xoff + .01;\n  var n = noise(xoff) * width;\n  line(n, 0, n, height);\n}\n</code>\n</div>"], "description": "Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\nproduces different results each time the program is run. Set the\n<b>value</b> parameter to a constant to return the same pseudo-random\nnumbers each time the software is run."}, {"submodule": "Math", "name": "x", "negative_questions": [], "module": "Math", "syntax": "x", "itemtype": "property", "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 63, "type": "{Number}", "class": "p5.Vector", "description": "The x component of the vector"}, {"submodule": "Math", "name": "y", "negative_questions": [], "module": "Math", "syntax": "y", "itemtype": "property", "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 69, "type": "{Number}", "class": "p5.Vector", "description": "The y component of the vector"}, {"submodule": "Math", "name": "z", "negative_questions": [], "module": "Math", "syntax": "z", "itemtype": "property", "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 75, "type": "{Number}", "class": "p5.Vector", "description": "The z component of the vector"}, {"submodule": "Math", "name": "toString", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 83, "syntax": "toString()", "example": ["\n<div class = \"norender\"><code>\nfunction setup() {\n  var v = createVector(20,30);\n  print(String(v)); // prints \"p5.Vector Object : [20, 30, 0]\"\n}\n</div></code>\n"], "description": "Returns a string representation of a vector v by calling String(v)\nor v.toString(). This method is useful for logging vectors in the\nconsole."}, {"submodule": "Math", "name": "set", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"optional": true, "type": "Number|p5.Vector|Array", "name": "x", "description": "the x component of the vector or a\n                                    p5.Vector or an Array"}, {"optional": true, "type": "Number", "name": "y", "description": "the y component of the vector"}, {"optional": true, "type": "Number", "name": "z", "description": "the z component of the vector"}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 101, "syntax": "set([x],[y],[z])", "example": ["\n<div class=\"norender\">\n<code>\nfunction setup() {\n   var v = createVector(1, 2, 3);\n   v.set(4,5,6); // Sets vector to [4, 5, 6]\n\n   var v1 = createVector(0, 0, 0);\n   var arr = [1, 2, 3];\n   v1.set(arr); // Sets vector to [1, 2, 3]\n}\n</code>\n</div>"], "description": "Sets the x, y, and z component of the vector using two or three separate\nvariables, the data from a p5.Vector, or the values from a float array."}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "the copy of the p5.Vector object"}, "name": "copy", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 143, "syntax": "copy()", "example": ["\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 2, 3);\nvar v2 = v.copy();\nprint(v1.x == v2.x && v1.y == v2.y && v1.z == v2.z);\n// Prints \"true\"\n</code>\n</div>"], "description": "Gets a copy of the vector, returns a p5.Vector object."}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "the p5.Vector object."}, "name": "add", "chainable": 1, "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"type": "Number|p5.Vector|Array", "name": "x", "description": "the x component of the vector to be\n                                     added or a p5.Vector or an Array"}, {"optional": true, "type": "Number", "name": "y", "description": "the y component of the vector to be\n                                     added"}, {"optional": true, "type": "Number", "name": "z", "description": "the z component of the vector to be\n                                     added"}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 166, "syntax": "add(x,[y],[z])", "example": ["\n<div class=\"norender\">\n<code>\nvar v = createVector(1, 2, 3);\nv.add(4,5,6);\n// v's compnents are set to [5, 7, 9]\n</code>\n</div>\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(1, 2, 3);\nvar v2 = createVector(2, 3, 4);\n\nvar v3 = p5.Vector.add(v1, v2);\n// v3 has components [3, 5, 7]\n</code>\n</div>"], "description": "Adds x, y, and z components to a vector, adds one vector to another, or\nadds two independent vectors together. The version of the method that adds\ntwo vectors together is a static method and returns a p5.Vector, the others\nacts directly on the vector. See the examples for more context."}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "p5.Vector object."}, "name": "sub", "chainable": 1, "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"type": "Number|p5.Vector|Array", "name": "x", "description": "the x component of the vector or a\n                                     p5.Vector or an Array"}, {"optional": true, "type": "Number", "name": "y", "description": "the y component of the vector"}, {"optional": true, "type": "Number", "name": "z", "description": "the z component of the vector"}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 219, "syntax": "sub(x,[y],[z])", "example": ["\n<div class=\"norender\">\n<code>\nvar v = createVector(4, 5, 6);\nv.sub(1, 1, 1);\n// v's compnents are set to [3, 4, 5]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(2, 3, 4);\nvar v2 = createVector(1, 2, 3);\n\nvar v3 = p5.Vector.sub(v1, v2);\n// v3 has compnents [1, 1, 1]\n</code>\n</div>"], "description": "Subtracts x, y, and z components from a vector, subtracts one vector from\nanother, or subtracts two independent vectors. The version of the method\nthat subtracts two vectors is a static method and returns a p5.Vector, the\nother acts directly on the vector. See the examples for more context."}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "a reference to the p5.Vector object (allow chaining)"}, "name": "mult", "chainable": 1, "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"type": "Number", "name": "n", "description": "the number to multiply with the vector"}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 271, "syntax": "mult(n)", "example": ["\n<div class=\"norender\">\n<code>\nvar v = createVector(1, 2, 3);\nv.mult(2);\n// v's compnents are set to [2, 4, 6]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(1, 2, 3);\nvar v2 = p5.Vector.mult(v1, 2);\n// v2 has compnents [2, 4, 6]\n</code>\n</div>"], "description": "Multiply the vector by a scalar. The static version of this method\ncreates a new p5.Vector while the non static version acts on the vector\ndirectly. See the examples for more context."}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "a reference to the p5.Vector object (allow chaining)"}, "name": "div", "chainable": 1, "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"type": "Number", "name": "n", "description": "the number to divide the vector by"}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 305, "syntax": "div(n)", "example": ["\n<div class=\"norender\">\n<code>\nvar v = createVector(6, 4, 2);\nv.div(2); //v's compnents are set to [3, 2, 1]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nvar v1  = createVector(6, 4, 2);\nvar v2 = p5.Vector.div(v, 2);\n// v2 has compnents [3, 2, 1]\n</code>\n</div>"], "description": "Divide the vector by a scalar. The static version of this method creates a\nnew p5.Vector while the non static version acts on the vector directly.\nSee the examples for more context."}, {"submodule": "Math", "return": {"type": "Number", "description": "magnitude of the vector"}, "name": "mag", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 338, "syntax": "mag()", "example": ["\n<div class=\"norender\">\n<code>\nvar v = createVector(20.0, 30.0, 40.0);\nvar m = v.mag(10);\nprint(m); // Prints \"53.85164807134504\"\n</code>\n</div>"], "description": "Calculates the magnitude (length) of the vector and returns the result as\na float (this is simply the equation sqrt(x*x + y*y + z*z).)"}, {"submodule": "Math", "return": {"type": "Number", "description": "squared magnitude of the vector"}, "name": "magSq", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 357, "syntax": "magSq()", "example": ["\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(6, 4, 2);\nprint(v1.magSq()); // Prints \"56\"\n</code>\n</div>"], "description": "Calculates the squared magnitude of the vector and returns the result\nas a float (this is simply the equation <em>(x*x + y*y + z*z)</em>.)\nFaster if the real length is not required in the\ncase of comparing vectors, etc."}, {"submodule": "Math", "return": {"type": "Number", "description": "the dot product"}, "name": "dot", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"type": "Number|p5.Vector", "name": "x", "description": "x component of the vector or a p5.Vector"}, {"optional": true, "type": "Number", "name": "y", "description": "y component of the vector"}, {"optional": true, "type": "Number", "name": "z", "description": "z component of the vector"}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 379, "syntax": "dot(x,[y],[z])", "example": ["\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 2, 3);\nvar v2 = createVector(2, 3, 4);\n\nprint(v1.dot(v2)); // Prints \"20\"\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n//Static method\nvar v1 = createVector(1, 2, 3);\nvar v2 = createVector(3, 2, 1);\nprint (p5.Vector.dot(v1, v2)); // Prints \"10\"\n</code>\n</div>"], "description": "Calculates the dot product of two vectors. The version of the method\nthat computes the dot product of two independent vectors is a static\nmethod. See the examples for more context."}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "p5.Vector composed of cross product"}, "name": "cross", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"type": "p5.Vector", "name": "v", "description": "p5.Vector to be crossed"}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 419, "syntax": "cross(v)", "example": ["\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 2, 3);\nvar v2 = createVector(1, 2, 3);\n\nv1.cross(v2); // v's components are [0, 0, 0]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(1, 0, 0);\nvar v2 = createVector(0, 1, 0);\n\nvar crossProduct = p5.Vector.cross(v1, v2);\n// crossProduct has components [0, 0, 1]\n</code>\n</div>"], "description": "Calculates and returns a vector composed of the cross product between\ntwo vectors. Both the static and non static methods return a new p5.Vector.\nSee the examples for more context."}, {"submodule": "Math", "return": {"type": "Number", "description": "the distance"}, "name": "dist", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"type": "p5.Vector", "name": "v", "description": "the x, y, and z coordinates of a p5.Vector"}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 459, "syntax": "dist(v)", "example": ["\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 0, 0);\nvar v2 = createVector(0, 1, 0);\n\nvar distance = v1.dist(v2); // distance is 1.4142...\n</code>\n</div>\n<div class=\"norender\">\n<code>\n// Static method\nvar v1 = createVector(1, 0, 0);\nvar v2 = createVector(0, 1, 0);\n\nvar distance = p5.Vector.dist(v1,v2);\n// distance is 1.4142...\n</code>\n</div>"], "description": "Calculates the Euclidean distance between two points (considering a\npoint as a vector object)."}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "normalized p5.Vector"}, "name": "normalize", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 491, "syntax": "normalize()", "example": ["\n<div class=\"norender\">\n<code>\nvar v = createVector(10, 20, 2);\n// v has compnents [10.0, 20.0, 2.0]\nv.normalize();\n// v's compnents are set to\n// [0.4454354, 0.8908708, 0.089087084]\n</code>\n</div>\n"], "description": "Normalize the vector to length 1 (make it a unit vector)."}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "the modified p5.Vector"}, "name": "limit", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"type": "Number", "name": "max", "description": "the maximum magnitude for the vector"}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 512, "syntax": "limit(max)", "example": ["\n<div class=\"norender\">\n<code>\nvar v = createVector(10, 20, 2);\n// v has compnents [10.0, 20.0, 2.0]\nv.limit(5);\n// v's compnents are set to\n// [2.2271771, 4.4543543, 0.4454354]\n</code>\n</div>"], "description": "Limit the magnitude of this vector to the value used for the <b>max</b>\nparameter."}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "the modified p5.Vector"}, "name": "setMag", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"type": "Number", "name": "len", "description": "the new length for this vector"}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 539, "syntax": "setMag(len)", "example": ["\n<div class=\"norender\">\n<code>\nvar v1 = createVector(10, 20, 2);\n// v has compnents [10.0, 20.0, 2.0]\nv1.setMag(10);\n// v's compnents are set to [6.0, 8.0, 0.0]\n</code>\n</div>"], "description": "Set the magnitude of this vector to the value used for the <b>len</b>\nparameter."}, {"submodule": "Math", "return": {"type": "Number", "description": "the angle of rotation"}, "name": "heading", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 560, "syntax": "heading()", "example": ["\n<div class = \"norender\"><code>\nfunction setup() {\n  var v1 = createVector(30,50);\n  print(v1.heading()); // 1.0303768265243125\n\n  var v1 = createVector(40,50);\n  print(v1.heading()); // 0.8960553845713439\n\n  var v1 = createVector(30,70);\n  print(v1.heading()); // 1.1659045405098132\n}\n</div></code>"], "description": "Calculate the angle of rotation for this vector (only 2D vectors)"}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "the modified p5.Vector"}, "name": "rotate", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"type": "Number", "name": "angle", "description": "the angle of rotation"}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 592, "syntax": "rotate(angle)", "example": ["\n<div class=\"norender\">\n<code>\nvar v = createVector(10.0, 20.0);\n// v has compnents [10.0, 20.0, 0.0]\nv.rotate(HALF_PI);\n// v's compnents are set to [-20.0, 9.999999, 0.0]\n</code>\n</div>"], "description": "Rotate the vector by an angle (only 2D vectors), magnitude remains the\nsame"}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "the modified p5.Vector"}, "name": "lerp", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"type": "p5.Vector", "name": "x", "description": "the x component or the p5.Vector to lerp to"}, {"optional": true, "type": "p5.Vector", "name": "y", "description": "y the y component"}, {"optional": true, "type": "p5.Vector", "name": "z", "description": "z the z component"}, {"type": "Number", "name": "amt", "description": "the amount of interpolation; some value between 0.0\n                        (old vector) and 1.0 (new vector). 0.1 is very near\n                        the new vector. 0.5 is halfway in between."}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 622, "syntax": "lerp(x,[y],[z],amt)", "example": ["\n<div class=\"norender\">\n<code>\nvar v = createVector(1, 1, 0);\n\nv.lerp(3, 3, 0, 0.5); // v now has components [2,2,0]\n</code>\n</div>\n\n<div class=\"norender\">\n<code>\nvar v1 = createVector(0, 0, 0);\nvar v2 = createVector(100, 100, 0);\n\nvar v3 = p5.Vector.lerp(v1, v2, 0.5);\n// v3 has components [50,50,0]\n</code>\n</div>"], "description": "Linear interpolate the vector to another vector"}, {"submodule": "Math", "return": {"type": "Array", "description": "an Array with the 3 values"}, "name": "array", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 662, "syntax": "array()", "example": ["\n<div class = \"norender\"><code>\nfunction setup() {\n  var v = createVector(20,30);\n  print(v.array()); // Prints : Array [20, 30, 0]\n}\n</div></code>\n<div class=\"norender\">\n<code>\nvar v = createVector(10.0, 20.0, 30.0);\nvar f = v.array();\nprint(f[0]); // Prints \"10.0\"\nprint(f[1]); // Prints \"20.0\"\nprint(f[2]); // Prints \"30.0\"\n</code>\n</div>"], "description": "Return a representation of this vector as a float array. This is only\nfor temporary use. If used in any other fashion, the contents should be\ncopied by using the <b>p5.Vector.copy()</b> method to copy into your own\narray."}, {"submodule": "Math", "return": {"type": "Boolean", "description": "whether the vectors are equals"}, "name": "equals", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "params": [{"optional": true, "type": "Number|p5.Vector|Array", "name": "x", "description": "the x component of the vector or a\n                                    p5.Vector or an Array"}, {"optional": true, "type": "Number", "name": "y", "description": "the y component of the vector"}, {"optional": true, "type": "Number", "name": "z", "description": "the z component of the vector"}], "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 691, "syntax": "equals([x],[y],[z])", "example": ["\n<div class = \"norender\"><code>\nv1 = createVector(5,10,20);\nv2 = createVector(5,10,20);\nv3 = createVector(13,10,19);\n\nprint(v1.equals(v2.x,v2.y,v2.z)); // true\nprint(v1.equals(v3.x,v3.y,v3.z)); // false\n</div></code>\n<div class=\"norender\">\n<code>\nvar v1 = createVector(10.0, 20.0, 30.0);\nvar v2 = createVector(10.0, 20.0, 30.0);\nvar v3 = createVector(0.0, 0.0, 0.0);\nprint (v1.equals(v2)) // true\nprint (v1.equals(v3)) // false\n</code>\n</div>"], "description": "Equality check against a p5.Vector"}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "the new p5.Vector object"}, "name": "fromAngle", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "static": 1, "file": "src/math/p5.Vector.js", "positive_questions": [], "params": [{"type": "Number", "name": "angle", "description": "the desired angle"}], "line": 741, "syntax": "fromAngle(angle)", "example": ["\n<div>\n<code>\nfunction draw() {\n  background (200);\n\n  // Create a variable, proportional to the mouseX,\n  // varying from 0-360, to represent an angle in degrees.\n  angleMode(DEGREES);\n  var myDegrees = map(mouseX, 0,width, 0,360);\n\n  // Display that variable in an onscreen text.\n  // (Note the nfc() function to truncate additional decimal places,\n  // and the \"\\xB0\" character for the degree symbol.)\n  var readout = \"angle = \" + nfc(myDegrees,1,1) + \"\\xB0\"\n  noStroke();\n  fill (0);\n  text (readout, 5, 15);\n\n  // Create a p5.Vector using the fromAngle function,\n  // and extract its x and y components.\n  var v = p5.Vector.fromAngle(radians(myDegrees));\n  var vx = v.x;\n  var vy = v.y;\n\n  push();\n  translate (width/2, height/2);\n  noFill();\n  stroke (150);\n  line (0,0, 30,0);\n  stroke (0);\n  line (0,0, 30*vx, 30*vy);\n  pop()\n}\n</code>\n</div>"], "description": "Make a new 2D unit vector from an angle"}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "the new p5.Vector object"}, "name": "random2D", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "static": 1, "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 798, "syntax": "random2D()", "example": ["\n<div class=\"norender\">\n<code>\nvar v = p5.Vector.random2D();\n// May make v's attributes something like:\n// [0.61554617, -0.51195765, 0.0] or\n// [-0.4695841, -0.14366731, 0.0] or\n// [0.6091097, -0.22805278, 0.0]\n</code>\n</div>"], "description": "Make a new 2D unit vector from a random angle"}, {"submodule": "Math", "return": {"type": "p5.Vector", "description": "the new p5.Vector object"}, "name": "random3D", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "static": 1, "file": "src/math/p5.Vector.js", "positive_questions": [], "line": 831, "syntax": "random3D()", "example": ["\n<div class=\"norender\">\n<code>\nvar v = p5.Vector.random3D();\n// May make v's attributes something like:\n// [0.61554617, -0.51195765, 0.599168] or\n// [-0.4695841, -0.14366731, -0.8711202] or\n// [0.6091097, -0.22805278, -0.7595902]\n</code>\n</div>"], "description": "Make a new random 3D unit vector."}, {"submodule": "Math", "return": {"type": "Number", "description": "the angle between (in radians)"}, "name": "angleBetween", "negative_questions": [], "module": "Math", "class": "p5.Vector", "itemtype": "method", "static": 1, "file": "src/math/p5.Vector.js", "positive_questions": [], "params": [{"type": "p5.Vector", "name": "v1", "description": "the x, y, and z components of a p5.Vector"}, {"type": "p5.Vector", "name": "v2", "description": "the x, y, and z components of a p5.Vector"}], "line": 1008, "syntax": "angleBetween(v1,v2)", "example": ["\n<div class=\"norender\">\n<code>\nvar v1 = createVector(1, 0, 0);\nvar v2 = createVector(0, 1, 0);\n\nvar angle = p5.Vector.angleBetween(v1, v2);\n// angle is PI/2\n</code>\n</div>"], "description": "Calculates and returns the angle (in radians) between two vectors."}, {"submodule": "Random", "name": "randomSeed", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "seed", "description": "the seed value"}], "file": "src/math/random.js", "positive_questions": [], "line": 45, "syntax": "randomSeed(seed)", "example": ["\n<div>\n<code>\nrandomSeed(99);\nfor (var i=0; i < 100; i++) {\n  var r = random(0, 255);\n  stroke(r);\n  line(i, 0, i, 100);\n}\n</code>\n</div>"], "description": "Sets the seed value for random().\n\nBy default, random() produces different results each time the program\nis run. Set the seed parameter to a constant to return the same\npseudo-random numbers each time the software is run."}, {"submodule": "Random", "return": {"type": "Number", "description": "the random number"}, "name": "random", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "min", "description": "the lower bound"}, {"type": "Number", "name": "max", "description": "the upper bound"}], "file": "src/math/random.js", "positive_questions": [], "line": 71, "syntax": "random(min,max)", "example": ["\n<div>\n<code>\nfor (var i = 0; i < 100; i++) {\n  var r = random(50);\n  stroke(r*5);\n  line(50, i, 50+r, i);\n}\n</code>\n</div>\n<div>\n<code>\nfor (var i = 0; i < 100; i++) {\n  var r = random(-50, 50);\n  line(50,i,50+r,i);\n}\n</code>\n</div>\n<div>\n<code>\n// Get a random element from an array\nvar words = [ \"apple\", \"bear\", \"cat\", \"dog\" ];\nvar index = floor(random(words.length));  // Convert to integer\ntext(words[index],10,50);  // Displays one of the four words\n</code>\n</div>"], "description": "Return a random number.\n\nTakes either 0, 1 or 2 arguments.\nIf no argument is given, returns a random number between 0 and 1.\nIf one argument is given, returns a random number between 0 and the number.\nIf two arguments are given, returns a random number between them,\ninclusive."}, {"submodule": "Random", "return": {"type": "Number", "description": "the random number"}, "name": "randomGaussian", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "mean", "description": "the mean"}, {"type": "Number", "name": "sd", "description": "the standard deviation"}], "file": "src/math/random.js", "positive_questions": [], "line": 138, "syntax": "randomGaussian(mean,sd)", "example": ["\n <div>\n <code>for (var y = 0; y < 100; y++) {\n  var x = randomGaussian(50,15);\n  line(50, y, x, y);\n}\n </code>\n </div>\n <div>\n <code>\nvar distribution = new Array(360);\n\nfunction setup() {\n  createCanvas(100, 100);\n  for (var i = 0; i < distribution.length; i++) {\n    distribution[i] = floor(randomGaussian(0,15));\n  }\n}\n\nfunction draw() {\n  background(204);\n translate(width/2, width/2);\n for (var i = 0; i < distribution.length; i++) {\n    rotate(TWO_PI/distribution.length);\n    stroke(0);\n    var dist = abs(distribution[i]);\n    line(0, 0, dist, 0);\n  }\n}\n </code>\n </div>"], "description": "Returns a random number fitting a Gaussian, or\n normal, distribution. There is theoretically no minimum or maximum\n value that <b>randomGaussian()</b> might return. Rather, there is\n just a very low probability that values far from the mean will be\n returned; and a higher probability that numbers near the mean will\n be returned.\n Takes either 0, 1 or 2 arguments.\n If no args, returns a mean of 0 and standard deviation of 1\n If one arg, that arg is the mean (standard deviation is 1)\n If two args, first is mean, second is standard deviation"}, {"submodule": "Trigonometry", "return": {"type": "Number", "description": "the arc cosine of the given value"}, "name": "acos", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "value", "description": "the value whose arc cosine is to be returned"}], "file": "src/math/trigonometry.js", "positive_questions": [], "line": 18, "syntax": "acos(value)", "example": ["\n<div class= \u201cnorender\">\n<code>\nvar a = PI;\nvar c = cos(a);\nvar ac = acos(c);\n// Prints: \"3.1415927 : -1.0 : 3.1415927\"\nprintln(a + \" : \" + c + \" : \" +  ac);\n</code>\n</div>\n\n<div class= \u201cnorender\">\n<code>\nvar a = PI + PI/4.0;\nvar c = cos(a);\nvar ac = acos(c);\n// Prints: \"3.926991 : -0.70710665 : 2.3561943\"\nprintln(a + \" : \" + c + \" : \" +  ac);\n</code>\n</div>"], "description": "The inverse of cos(), returns the arc cosine of a value. This function\nexpects the values in the range of -1 to 1 and values are returned in\nthe range 0 to PI (3.1415927)."}, {"submodule": "Trigonometry", "return": {"type": "Number", "description": "the arc sine of the given value"}, "name": "asin", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "value", "description": "the value whose arc sine is to be returned"}], "file": "src/math/trigonometry.js", "positive_questions": [], "line": 56, "syntax": "asin(value)", "example": ["\n<div class= \u201cnorender\">\n<code>\nvar a = PI + PI/3;\nvar s = sin(a);\nvar as = asin(s);\n// Prints: \"1.0471976 : 0.86602545 : 1.0471976\"\nprintln(a + \" : \" + s + \" : \" +  as);\n</code>\n</div>\n\n<div class= \u201cnorender\">\n<code>\nvar a = PI + PI/3.0;\nvar s = sin(a);\nvar as = asin(s);\n// Prints: \"4.1887903 : -0.86602545 : -1.0471976\"\nprintln(a + \" : \" + s + \" : \" +  as);\n</code>\n</div>\n"], "description": "The inverse of sin(), returns the arc sine of a value. This function\nexpects the values in the range of -1 to 1 and values are returned\nin the range -PI/2 to PI/2."}, {"submodule": "Trigonometry", "return": {"type": "Number", "description": "the arc tangent of the given value"}, "name": "atan", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "value", "description": "the value whose arc tangent is to be returned"}], "file": "src/math/trigonometry.js", "positive_questions": [], "line": 95, "syntax": "atan(value)", "example": ["\n<div class= \u201cnorender\">\n<code>\nvar a = PI + PI/3;\nvar t = tan(a);\nvar at = atan(t);\n// Prints: \"1.0471976 : 1.7320509 : 1.0471976\"\nprintln(a + \" : \" + t + \" : \" +  at);\n</code>\n</div>\n\n<div class= \u201cnorender\">\n<code>\nvar a = PI + PI/3.0;\nvar t = tan(a);\nvar at = atan(t);\n// Prints: \"4.1887903 : 1.7320513 : 1.0471977\"\nprintln(a + \" : \" + t + \" : \" +  at);\n</code>\n</div>\n"], "description": "The inverse of tan(), returns the arc tangent of a value. This function\nexpects the values in the range of -Infinity to Infinity (exclusive) and\nvalues are returned in the range -PI/2 to PI/2."}, {"submodule": "Trigonometry", "return": {"type": "Number", "description": "the arc tangent of the given point"}, "name": "atan2", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "y", "description": "y-coordinate of the point"}, {"type": "Number", "name": "x", "description": "x-coordinate of the point"}], "file": "src/math/trigonometry.js", "positive_questions": [], "line": 134, "syntax": "atan2(y,x)", "example": ["\n<div>\n<code>\nfunction draw() {\n  background(204);\n  translate(width/2, height/2);\n  var a = atan2(mouseY-height/2, mouseX-width/2);\n  rotate(a);\n  rect(-30, -5, 60, 10);\n}\n</code>\n</div>"], "description": "Calculates the angle (in radians) from a specified point to the coordinate\norigin as measured from the positive x-axis. Values are returned as a\nfloat in the range from PI to -PI. The atan2() function is most often used\nfor orienting geometry to the position of the cursor. Note: The\ny-coordinate of the point is the first parameter, and the x-coordinate is\nthe second parameter, due the the structure of calculating the tangent."}, {"submodule": "Trigonometry", "return": {"type": "Number", "description": "the cosine of the angle"}, "name": "cos", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "angle", "description": "the angle"}], "file": "src/math/trigonometry.js", "positive_questions": [], "line": 168, "syntax": "cos(angle)", "example": ["\n<div>\n<code>\nvar a = 0.0;\nvar inc = TWO_PI/25.0;\nfor (var i = 0; i < 25; i++) {\n  line(i*4, 50, i*4, 50+cos(a)*40.0);\n  a = a + inc;\n}\n</code>\n</div>\n"], "description": "Calculates the cosine of an angle. This function takes into account the\ncurrent angleMode. Values are returned in the range -1 to 1."}, {"submodule": "Trigonometry", "return": {"type": "Number", "description": "the sine of the angle"}, "name": "sin", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "angle", "description": "the angle"}], "file": "src/math/trigonometry.js", "positive_questions": [], "line": 197, "syntax": "sin(angle)", "example": ["\n<div>\n<code>\nvar a = 0.0;\nvar inc = TWO_PI/25.0;\nfor (var i = 0; i < 25; i++) {\n  line(i*4, 50, i*4, 50+sin(a)*40.0);\n  a = a + inc;\n}\n</code>\n</div>"], "description": "Calculates the sine of an angle. This function takes into account the\ncurrent angleMode. Values are returned in the range -1 to 1."}, {"submodule": "Trigonometry", "return": {"type": "Number", "description": "the tangent of the angle"}, "name": "tan", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "angle", "description": "the angle"}], "file": "src/math/trigonometry.js", "positive_questions": [], "line": 225, "syntax": "tan(angle)", "example": ["\n<div>\n<code>\n  var a = 0.0;\n  var inc = TWO_PI/50.0;\n  for (var i = 0; i < 100; i = i+2) {\n    line(i, 50, i, 50+tan(a)*2.0);\n    a = a + inc;\n  }\n</code>\n</div>\n"], "description": "Calculates the tangent of an angle. This function takes into account\nthe current angleMode. Values are returned in the range -1 to 1."}, {"submodule": "Trigonometry", "return": {"type": "Number", "description": "the converted angle"}, "name": "degrees", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "radians", "description": "the radians value to convert to degrees"}], "file": "src/math/trigonometry.js", "positive_questions": [], "line": 254, "syntax": "degrees(radians)", "example": ["\n<div class= \u201cnorender\">\n<code>\nvar rad = PI/4;\nvar deg = degrees(rad);\nprintln(rad + \" radians is \" + deg + \" degrees\");\n// Prints: 45 degrees is 0.7853981633974483 radians\n</code>\n</div>\n"], "description": "Converts a radian measurement to its corresponding value in degrees.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90\u00b0 = PI/2 = 1.5707964."}, {"submodule": "Trigonometry", "return": {"type": "Number", "description": "the converted angle"}, "name": "radians", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "degrees", "description": "the degree value to convert to radians"}], "file": "src/math/trigonometry.js", "positive_questions": [], "line": 280, "syntax": "radians(degrees)", "example": ["\n<div class= \u201cnorender\">\n<code>\nvar deg = 45.0;\nvar rad = radians(deg);\nprintln(deg + \" degrees is \" + rad + \" radians\");\n// Prints: 45 degrees is 0.7853981633974483 radians\n</code>\n</div>"], "description": "Converts a degree measurement to its corresponding value in radians.\nRadians and degrees are two ways of measuring the same thing. There are\n360 degrees in a circle and 2*PI radians in a circle. For example,\n90\u00b0 = PI/2 = 1.5707964."}, {"submodule": "Trigonometry", "name": "angleMode", "negative_questions": [], "module": "Math", "class": "p5", "itemtype": "method", "params": [{"type": "Number/Constant", "name": "mode", "description": "either RADIANS or DEGREES"}], "file": "src/math/trigonometry.js", "positive_questions": [], "line": 304, "syntax": "angleMode(mode)", "example": ["\n<div>\n<code>\nfunction draw(){\n  background(204);\n  angleMode(DEGREES); // Change the mode to DEGREES\n  var a = atan2(mouseY-height/2, mouseX-width/2);\n  translate(width/2, height/2);\n  push();\n  rotate(a);\n  rect(-20, -5, 40, 10); // Larger rectangle is rotating in degrees\n  pop();\n  angleMode(RADIANS); // Change the mode to RADIANS\n  rotate(a); // var a stays the same\n  rect(-40, -5, 20, 10); // Smaller rectangle is rotating in radians\n}\n</code>\n</div>\n"], "description": "Sets the current mode of p5 to given mode. Default mode is RADIANS."}, {"submodule": "Attributes", "return": {"type": "Number", "description": ""}, "name": "textAlign", "negative_questions": [], "module": "Typography", "class": "p5", "itemtype": "method", "params": [{"type": "Number/Constant", "name": "h", "description": "horizontal alignment, either LEFT,\n                           CENTER, or RIGHT"}, {"type": "Number/Constant", "name": "v", "description": "vertical alignment, either TOP,\n                           BOTTOM, CENTER, or BASELINE"}], "file": "src/typography/attributes.js", "positive_questions": [], "line": 21, "syntax": "textAlign(h,v)", "example": ["\n<div>\n<code>\ntextSize(16);\ntextAlign(RIGHT);\ntext(\"ABCD\", 50, 30);\ntextAlign(CENTER);\ntext(\"EFGH\", 50, 50);\ntextAlign(LEFT);\ntext(\"IJKL\", 50, 70);\n</code>\n</div>"], "description": "Sets the current alignment for drawing text. The parameters LEFT, CENTER,\nand RIGHT set the display characteristics of the letters in relation to\nthe values for the x and y parameters of the text() function."}, {"submodule": "Attributes", "return": {"type": "Object|Number", "description": ""}, "name": "textLeading", "negative_questions": [], "module": "Typography", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "l", "description": "the size in pixels for spacing between lines"}], "file": "src/typography/attributes.js", "positive_questions": [], "line": 50, "syntax": "textLeading(l)", "example": ["\n<div>\n<code>\n// Text to display. The \"\\n\" is a \"new line\" character\nlines = \"L1\\nL2\\nL3\";\ntextSize(12);\nfill(0);  // Set fill to black\n\ntextLeading(10);  // Set leading to 10\ntext(lines, 10, 25);\n\ntextLeading(20);  // Set leading to 20\ntext(lines, 40, 25);\n\ntextLeading(30);  // Set leading to 30\ntext(lines, 70, 25);\n</code>\n</div>"], "description": "Sets/gets the spacing between lines of text in units of pixels. This\nsetting will be used in all subsequent calls to the text() function."}, {"submodule": "Attributes", "return": {"type": "Object|Number", "description": ""}, "name": "textSize", "negative_questions": [], "module": "Typography", "class": "p5", "itemtype": "method", "params": [{"type": "Number", "name": "s", "description": "the size of the letters in units of pixels"}], "file": "src/typography/attributes.js", "positive_questions": [], "line": 87, "syntax": "textSize(s)", "example": ["\n<div>\n<code>\ntextSize(12);\ntext(\"Font Size 12\", 10, 30);\ntextSize(14);\ntext(\"Font Size 14\", 10, 60);\ntextSize(16);\ntext(\"Font Size 16\", 10, 90);\n</code>\n</div>"], "description": "Sets/gets the current font size. This size will be used in all subsequent\ncalls to the text() function. Font size is measured in units of pixels."}, {"submodule": "Attributes", "return": {"type": "Object|String", "description": ""}, "name": "textStyle", "negative_questions": [], "module": "Typography", "class": "p5", "itemtype": "method", "params": [{"type": "Number/Constant", "name": "s", "description": "styling for text, either NORMAL,\n                           ITALIC, or BOLD"}], "file": "src/typography/attributes.js", "positive_questions": [], "line": 118, "syntax": "textStyle(s)", "example": ["\n<div>\n<code>\nfill(0);\nstrokeWeight(0);\ntextSize(12);\ntextStyle(NORMAL);\ntext(\"Font Style Normal\", 10, 30);\ntextStyle(ITALIC);\ntext(\"Font Style Italic\", 10, 60);\ntextStyle(BOLD);\ntext(\"Font Style Bold\", 10, 90);\n</code>\n</div>"], "description": "Sets/gets the style of the text to NORMAL, ITALIC, or BOLD. Note this is\noverridden by CSS styling.\n(Style only apply to system font, for custom fonts, please load styled\nfonts instead.)"}, {"submodule": "Attributes", "return": {"type": "Number", "description": ""}, "name": "textWidth", "negative_questions": [], "module": "Typography", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "s", "description": "the String of characters to measure"}], "file": "src/typography/attributes.js", "positive_questions": [], "line": 159, "syntax": "textWidth(s)", "example": ["\n<div>\n<code>\ntextSize(28);\n\nvar c = 'P';\nvar cw = textWidth(c);\ntext(c, 0, 40);\nline(cw, 0, cw, 50);\n\nvar s = \"p5.js\";\nvar sw = textWidth(s);\ntext(s, 0, 85);\nline(sw, 50, sw, 100);\n</code>\n</div>"], "description": "Calculates and returns the width of any character or text string."}, {"submodule": "Loading & Displaying", "return": {"type": "Object", "description": "this"}, "name": "text", "negative_questions": [], "module": "Typography", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "str", "description": "the alphanumeric symbols to be displayed"}, {"type": "Number", "name": "x", "description": "x-coordinate of text"}, {"type": "Number", "name": "y", "description": "y-coordinate of text"}, {"type": "Number", "name": "x2", "description": "by default, the width of the text box,\n                    see rectMode() for more info"}, {"type": "Number", "name": "y2", "description": "by default, the height of the text box,\n                    see rectMode() for more info"}], "file": "src/typography/loading_displaying.js", "positive_questions": [], "line": 16, "syntax": "text(str,x,y,x2,y2)", "example": ["\n<div>\n<code>\ntextSize(32);\ntext(\"word\", 10, 30);\nfill(0, 102, 153);\ntext(\"word\", 10, 60);\nfill(0, 102, 153, 51);\ntext(\"word\", 10, 90);\n</code>\n</div>\n<div>\n<code>\ns = \"The quick brown fox jumped over the lazy dog.\";\nfill(50);\ntext(s, 10, 10, 70, 80); // Text wraps within text box\n</code>\n</div>"], "description": "Draws text to the screen. Displays the information specified in the first\nparameter on the screen in the position specified by the additional\nparameters. A default font will be used unless a font is set with the\ntextFont() function and a default size will be used unless a font is set\nwith textSize(). Change the color of the text with the fill() function.\nChange the outline of the text with the stroke() and strokeWeight()\nfunctions.\n\nThe text displays in relation to the textAlign() function, which gives the\noption to draw to the left, right, and center of the coordinates.\n\nThe x2 and y2 parameters define a rectangular area to display within and\nmay only be used with string data. When these parameters are specified,\nthey are interpreted based on the current rectMode() setting. Text that\ndoes not fit completely within the rectangle specified will not be drawn\nto the screen."}, {"submodule": "Loading & Displaying", "return": {"type": "Object", "description": "this"}, "name": "textFont", "negative_questions": [], "module": "Typography", "class": "p5", "itemtype": "method", "params": [{"type": "Object|String", "name": "f", "description": "a font loaded via loadFont(), or a String\n representing a browser-based dfault font."}], "file": "src/typography/loading_displaying.js", "positive_questions": [], "line": 77, "syntax": "textFont(f)", "example": ["\n<div>\n<code>\nfill(0);\ntextSize(12);\ntextFont(\"Georgia\");\ntext(\"Georgia\", 12, 30);\ntextFont(\"Helvetica\");\ntext(\"Helvetica\", 12, 60);\n</code>\n</div>\n<div>\n<code>\nvar fontRegular, fontItalic, fontBold;\nfunction preload() {\n   fontRegular = loadFont(\"assets/Regular.otf\");\n   fontItalic = loadFont(\"assets/Italic.ttf\");\n   fontBold = loadFont(\"assets/Bold.ttf\");\n}\nfunction setup() {\n   background(210);\n   fill(0).strokeWeight(0).textSize(10);\n   textFont(fontRegular);\n   text(\"Font Style Normal\", 10, 30);\n   textFont(fontItalic);\n   text(\"Font Style Italic\", 10, 50);\n   textFont(fontBold);\n   text(\"Font Style Bold\", 10, 70);\n}\n</code>\n</div>"], "description": "Sets the current font that will be drawn with the text() function."}, {"submodule": "Font", "name": "font", "negative_questions": [], "module": "Typography", "syntax": "font", "itemtype": "property", "file": "src/typography/p5.Font.js", "positive_questions": [], "line": 44, "class": "p5.Font", "description": "Underlying opentype font implementation"}, {"submodule": "Font", "return": {"type": "Object", "description": "a rectangle object with properties: x, y, w, h"}, "name": "textBounds", "negative_questions": [], "module": "Typography", "class": "p5.Font", "itemtype": "method", "params": [{"type": "String", "name": "line", "description": "a line of text"}, {"type": "Number", "name": "x", "description": "x-position"}, {"type": "Number", "name": "y", "description": "y-position"}, {"type": "Number", "name": "fontSize", "description": "font size to use (optional)"}, {"type": "Object", "name": "options", "description": "opentype options (optional)"}], "file": "src/typography/p5.Font.js", "positive_questions": [], "line": 57, "syntax": "textBounds(line,x,y,fontSize,options)", "example": ["\n<div>\n<code>\nvar font;\nvar text = 'Lorem ipsum dolor sit amet.';\nfunction preload() {\n   font = loadFont('./assets/fonts/Regular.otf');\n};\nfunction setup() {\n   background(210);\n\n   var bbox = font.textBounds(text, 10, 30, 12);\n   fill(255);\n   stroke(0);\n   rect(bbox.x, bbox.y, bbox.w, bbox.h);\n   fill(0);\n   noStroke();\n    *    textFont(font);\n   textSize(12);\n   text(text, 10, 30);\n};\n</code>\n</div>"], "description": "Returns a tight bounding box for the given text string using this\nfont (currently only supports single lines)"}, {"submodule": "Array Functions", "name": "append", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Array", "name": "array", "description": "Array to append"}, {"type": "Any", "name": "value", "description": "to be added to the Array"}], "file": "src/utilities/array_functions.js", "positive_questions": [], "line": 12, "syntax": "append(array,value)", "example": ["\n<div class = \"norender\"><code>\nfunction setup() {\n\nvar myArray = new Array(\"Mango\", \"Apple\", \"Papaya\")\nprint(myArray) // [\"Mango\", \"Apple\", \"Papaya\"]\n\nappend(myArray, \"Peach\")\nprint(myArray) // [\"Mango\", \"Apple\", \"Papaya\", \"Peach\"]\n\n}\n</div></code>"], "description": "Adds a value to the end of an array. Extends the length of\nthe array by one. Maps to Array.push()."}, {"submodule": "Array Functions", "name": "arrayCopy", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Array", "name": "src", "description": "the source Array"}, {"optional": true, "type": "Number", "name": "srcPosition", "description": "starting position in the source Array"}, {"type": "Array", "name": "dst", "description": "the destination Array"}, {"optional": true, "type": "Number", "name": "dstPosition", "description": "starting position in the destination Array"}, {"optional": true, "type": "Nimber", "name": "length", "description": "number of Array elements to be copied"}], "file": "src/utilities/array_functions.js", "positive_questions": [], "line": 37, "syntax": "arrayCopy(src,[srcPosition],dst,[dstPosition],[length])", "example": ["\n <div class=\"norender\"><code>\n function setup() {\n\n   var src = new Array(\"A\", \"B\", \"C\");\n   var dst = new Array( 1 ,  2 ,  3 );\n   var srcPosition = 1;\n   var dstPosition = 0;\n   var length = 2;\n\n   print(src); // [\"A\", \"B\", \"C\"]\n   print(dst); // [ 1 ,  2 ,  3 ]\n\n   arrayCopy(src, srcPosition, dst, dstPosition, length);\n   print(dst); // [\"B\", \"C\", 3]\n\n   }\n </div></code>"], "description": "Copies an array (or part of an array) to another array. The src array is\ncopied to the dst array, beginning at the position specified by\nsrcPosition and into the position specified by dstPosition. The number of\nelements to copy is determined by length. Note that copying values\noverwrites existing values in the destination array. To append values\ninstead of overwriting them, use concat().\n\nThe simplified version with only two arguments \u2014 arrayCopy(src, dst) \u2014\ncopies an entire array to another of the same size. It is equivalent to\narrayCopy(src, 0, dst, 0, src.length).\n\nUsing this function is far more efficient for copying array data than\niterating through a for() loop and copying each element individually."}, {"submodule": "Array Functions", "return": {"type": "Array", "description": "concatenated array"}, "name": "concat", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Array", "name": "a", "description": "first Array to concatenate"}, {"type": "Array", "name": "b", "description": "second Array to concatenate"}], "file": "src/utilities/array_functions.js", "positive_questions": [], "line": 118, "syntax": "concat(a,b)", "example": ["\n<div class = \"norender\"><code>\nfunction setup() {\n  var arr1 = new Array(\"A\", \"B\", \"C\");\n  var arr2 = new Array( 1 ,  2 ,  3 );\n\n  print(arr1); // [\"A\",\"B\",\"C\"]\n  print(arr2); // [1,2,3]\n\n  var arr3 = concat(arr1, arr2);\n\n  print(arr1); // [\"A\",\"B\",\"C\"]\n  print(arr2); // [1,2,3]\n  print(arr3); // [\"A\",\"B\",\"C\",1,2,3]\n\n}\n</div></code>"], "description": "Concatenates two arrays, maps to Array.concat(). Does not modify the\ninput arrays."}, {"submodule": "Array Functions", "name": "reverse", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Array", "name": "list", "description": "Array to reverse"}], "file": "src/utilities/array_functions.js", "positive_questions": [], "line": 149, "syntax": "reverse(list)", "example": ["\n<div class=\"norender\"><code>\nfunction setup() {\n  var myArray = new Array(\"A\", \"B\", \"C\");\n  print(myArray); // [\"A\",\"B\",\"C\"]\n\n  reverse(myArray);\n  print(myArray); // [\"C\",\"B\",\"A\"]\n}\n</div></code>"], "description": "Reverses the order of an array, maps to Array.reverse()"}, {"submodule": "Array Functions", "return": {"type": "Array", "description": "shortened Array"}, "name": "shorten", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Array", "name": "list", "description": "Array to shorten"}], "file": "src/utilities/array_functions.js", "positive_questions": [], "line": 169, "syntax": "shorten(list)", "example": ["\n<div class = \"norender\"><code>\nfunction setup() {\n  var myArray = new Array(\"A\", \"B\", \"C\");\n  print(myArray); // [\"A\",\"B\",\"C\"]\n\n  var newArray = shorten(myArray);\n  print(myArray); // [\"A\",\"B\",\"C\"]\n  print(newArray); // [\"A\",\"B\"]\n}\n</div></code>"], "description": "Decreases an array by one element and returns the shortened array,\nmaps to Array.pop()."}, {"submodule": "Array Functions", "return": {"type": "Array", "description": "shuffled Array"}, "name": "shuffle", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Array", "name": "array", "description": "Array to shuffle"}, {"optional": true, "type": "Boolean", "name": "bool", "description": "modify passed array"}], "file": "src/utilities/array_functions.js", "positive_questions": [], "line": 193, "syntax": "shuffle(array,[bool])", "example": ["\n<div><code>\nfunction setup() {\n  var regularArr = ['ABC', 'def', createVector(), TAU, Math.E];\n  print(regularArr);\n  shuffle(regularArr, true); // force modifications to passed array\n  print(regularArr);\n\n  // By default shuffle() returns a shuffled cloned array:\n  var newArr = shuffle(regularArr);\n  print(regularArr);\n  print(newArr);\n}\n</code></div>"], "description": "Randomizes the order of the elements of an array.\nImplements Fisher-Yates Shuffle Algorithm\nhttp://Bost.Ocks.org/mike/shuffle/\nhttp://en.Wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle"}, {"submodule": "Array Functions", "name": "sort", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Array", "name": "list", "description": "Array to sort"}, {"optional": true, "type": "Number", "name": "count", "description": "number of elements to sort, starting from 0"}], "file": "src/utilities/array_functions.js", "positive_questions": [], "line": 233, "syntax": "sort(list,[count])", "example": ["\n<div class = \"norender\"><code>\nfunction setup() {\n  var words = new Array(\"banana\", \"apple\", \"pear\",\"lime\");\n  print(words); // [\"banana\", \"apple\", \"pear\", \"lime\"]\n  var count = 4; // length of array\n\n  sort(words, count);\n  print(words); // [\"apple\", \"banana\", \"lime\", \"pear\"]\n}\n</div></code>\n<div class = \"norender\"><code>\nfunction setup() {\n  var numbers = new Array(2,6,1,5,14,9,8,12);\n  print(numbers); // [2,6,1,5,14,9,8,12]\n  var count = 5; // Less than the length of the array\n\n  sort(numbers, count);\n  print(numbers); // [1,2,5,6,14,9,8,12]\n}\n</div></code>"], "description": "Sorts an array of numbers from smallest to largest, or puts an array of\nwords in alphabetical order. The original array is not modified; a\nre-ordered array is returned. The count parameter states the number of\nelements to sort. For example, if there are 12 elements in an array and\ncount is set to 5, only the first 5 elements in the array will be sorted."}, {"submodule": "Array Functions", "name": "splice", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Array", "name": "list", "description": "Array to splice into"}, {"type": "Any", "name": "value", "description": "value to be spliced in"}, {"type": "Number", "name": "position", "description": "in the array from which to insert data"}], "file": "src/utilities/array_functions.js", "positive_questions": [], "line": 277, "syntax": "splice(list,value,position)", "example": ["\n<div class = \"norender\"><code>\nfunction setup() {\n  var myArray = new Array(0,1,2,3,4);\n  var insArray = new Array(\"A\",\"B\",\"C\");\n  print(myArray); // [0,1,2,3,4]\n  print(insArray); // [\"A\",\"B\",\"C\"]\n\n  splice(myArray, insArray, 3);\n  print(myArray); // [0,1,2,\"A\",\"B\",\"C\",3,4]\n}\n</div></code>"], "description": "Inserts a value or an array of values into an existing array. The first\nparameter specifies the initial array to be modified, and the second\nparameter defines the data to be inserted. The third parameter is an index\nvalue which specifies the array position from which to insert data.\n(Remember that array index numbering starts at zero, so the first position\nis 0, the second position is 1, and so on.)"}, {"submodule": "Array Functions", "return": {"type": "Array", "description": "Array of extracted elements"}, "name": "subset", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Array", "name": "list", "description": "Array to extract from"}, {"type": "Number", "name": "start", "description": "position to begin"}, {"optional": true, "type": "Number", "name": "count", "description": "number of values to extract"}], "file": "src/utilities/array_functions.js", "positive_questions": [], "line": 311, "syntax": "subset(list,start,[count])", "example": ["\n<div class = \"norender\"><code>\nfunction setup() {\n  var myArray = new Array(1,2,3,4,5);\n  print(myArray); // [1,2,3,4,5]\n\n  var sub1 = subset(myArray, 0, 3);\n  var sub2 = subset(myArray, 2, 2);\n  print(sub1); // [1,2,3]\n  print(sub2); // [3,4]\n}\n</div></code>"], "description": "Extracts an array of elements from an existing array. The list parameter\ndefines the array from which the elements will be copied, and the start\nand count parameters specify which elements to extract. If no count is\ngiven, elements will be extracted from the start to the end of the array.\nWhen specifying the start, remember that the first array element is 0.\nThis function does not change the source array."}, {"submodule": "Conversion", "return": {"type": "Number", "description": "floating point representation of string"}, "name": "float", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "str", "description": "float string to parse"}], "file": "src/utilities/conversion.js", "positive_questions": [], "line": 12, "syntax": "float(str)", "example": ["\n<div><code>\nvar str = '20';\nvar diameter = float(str);\nellipse(width/2, height/2, diameter, diameter);\n</code></div>"], "description": "Converts a string to its floating point representation. The contents of a\nstring must resemble a number, or NaN (not a number) will be returned.\nFor example, float(\"1234.56\") evaluates to 1234.56, but float(\"giraffe\")\nwill return NaN."}, {"submodule": "Conversion", "return": {"type": "Number", "description": "integer representation of value"}, "name": "int", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "String|Boolean|Number|Array", "name": "n", "description": "value to parse"}], "file": "src/utilities/conversion.js", "positive_questions": [], "line": 32, "syntax": "int(n)", "example": ["\n<div class='norender'><code>\nprint(int(\"10\")); // 10\nprint(int(10.31)); // 10\nprint(int(-10)); // -10\nprint(int(true)); // 1\nprint(int(false)); // 0\nprint(int([false, true, \"10.3\", 9.8])); // [0, 1, 10, 9]\n</code></div>"], "description": "Converts a boolean, string, or float to its integer representation.\nWhen an array of values is passed in, then an int array of the same length\nis returned."}, {"submodule": "Conversion", "return": {"type": "String", "description": "string representation of value"}, "name": "str", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "String|Boolean|Number|Array", "name": "n", "description": "value to parse"}], "file": "src/utilities/conversion.js", "positive_questions": [], "line": 63, "syntax": "str(n)", "example": ["\n<div class='norender'><code>\nprint(str(\"10\"));  // \"10\"\nprint(str(10.31)); // \"10.31\"\nprint(str(-10));   // \"-10\"\nprint(str(true));  // \"true\"\nprint(str(false)); // \"false\"\nprint(str([true, \"10.3\", 9.8])); // [ \"true\", \"10.3\", \"9.8\" ]\n</code></div>"], "description": "Converts a boolean, string or number to its string representation.\nWhen an array of values is passed in, then an array of strings of the same\nlength is returned."}, {"submodule": "Conversion", "return": {"type": "Boolean", "description": "boolean representation of value"}, "name": "boolean", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "String|Boolean|Number|Array", "name": "n", "description": "value to parse"}], "file": "src/utilities/conversion.js", "positive_questions": [], "line": 89, "syntax": "boolean(n)", "example": ["\n<div class='norender'><code>\nprint(boolean(0));               // false\nprint(boolean(1));               // true\nprint(boolean(\"true\"));          // true\nprint(boolean(\"abcd\"));          // false\nprint(boolean([0, 12, \"true\"])); // [false, true, false]\n</code></div>"], "description": "Converts a number or string to its boolean representation.\nFor a number, any non-zero value (positive or negative) evaluates to true,\nwhile zero evaluates to false. For a string, the value \"true\" evaluates to\ntrue, while any other value evaluates to false. When an array of number or\nstring values is passed in, then a array of booleans of the same length is\nreturned."}, {"submodule": "Conversion", "return": {"type": "Number", "description": "byte representation of value"}, "name": "byte", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "String|Boolean|Number|Array", "name": "n", "description": "value to parse"}], "file": "src/utilities/conversion.js", "positive_questions": [], "line": 121, "syntax": "byte(n)", "example": ["\n<div class='norender'><code>\nprint(byte(127));               // 127\nprint(byte(128));               // -128\nprint(byte(23.4));              // 23\nprint(byte(\"23.4\"));            // 23\nprint(byte(true));              // 1\nprint(byte([0, 255, \"100\"]));   // [0, -1, 100]\n</code></div>"], "description": "Converts a number, string or boolean to its byte representation.\nA byte can be only a whole number between -128 and 127, so when a value\noutside of this range is converted, it wraps around to the corresponding\nbyte representation. When an array of number, string or boolean values is\npassed in, then an array of bytes the same length is returned."}, {"submodule": "Conversion", "return": {"type": "String", "description": "string representation of value"}, "name": "char", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "String|Number|Array", "name": "n", "description": "value to parse"}], "file": "src/utilities/conversion.js", "positive_questions": [], "line": 150, "syntax": "char(n)", "example": ["\n<div class='norender'><code>\nprint(char(65));                     // \"A\"\nprint(char(\"65\"));                   // \"A\"\nprint(char([65, 66, 67]));           // [ \"A\", \"B\", \"C\" ]\nprint(join(char([65, 66, 67]), '')); // \"ABC\"\n</code></div>"], "description": "Converts a number or string to its corresponding single-character\nstring representation. If a string parameter is provided, it is first\nparsed as an integer and then translated into a single-character string.\nWhen an array of number or string values is passed in, then an array of\nsingle-character strings of the same length is returned."}, {"submodule": "Conversion", "return": {"type": "Number", "description": "integer representation of value"}, "name": "unchar", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "String|Array", "name": "n", "description": "value to parse"}], "file": "src/utilities/conversion.js", "positive_questions": [], "line": 178, "syntax": "unchar(n)", "example": ["\n<div class='norender'><code>\nprint(unchar(\"A\"));               // 65\nprint(unchar([\"A\", \"B\", \"C\"]));   // [ 65, 66, 67 ]\nprint(unchar(split(\"ABC\", \"\")));  // [ 65, 66, 67 ]\n</code></div>"], "description": "Converts a single-character string to its corresponding integer\nrepresentation. When an array of single-character string values is passed\nin, then an array of integers of the same length is returned."}, {"submodule": "Conversion", "return": {"type": "String", "description": "hexadecimal string representation of value"}, "name": "hex", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Number|Array", "name": "n", "description": "value to parse"}], "file": "src/utilities/conversion.js", "positive_questions": [], "line": 201, "syntax": "hex(n)", "example": ["\n<div class='norender'><code>\nprint(hex(255));               // \"000000FF\"\nprint(hex(255, 6));            // \"0000FF\"\nprint(hex([0, 127, 255], 6));  // [ \"000000\", \"00007F\", \"0000FF\" ]\n</code></div>"], "description": "Converts a number to a string in its equivalent hexadecimal notation. If a\nsecond parameter is passed, it is used to set the number of characters to\ngenerate in the hexadecimal notation. When an array is passed in, an\narray of strings in hexadecimal notation of the same length is returned."}, {"submodule": "Conversion", "return": {"type": "Number", "description": "integer representation of hexadecimal value"}, "name": "unhex", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "String|Array", "name": "n", "description": "value to parse"}], "file": "src/utilities/conversion.js", "positive_questions": [], "line": 236, "syntax": "unhex(n)", "example": ["\n<div class='norender'><code>\nprint(unhex(\"A\"));                // 10\nprint(unhex(\"FF\"));               // 255\nprint(unhex([\"FF\", \"AA\", \"00\"])); // [ 255, 170, 0 ]\n</code></div>"], "description": "Converts a string representation of a hexadecimal number to its equivalent\ninteger value. When an array of strings in hexadecimal notation is passed\nin, an array of integers of the same length is returned."}, {"submodule": "String Functions", "return": {"type": "String", "description": "joined String"}, "name": "join", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Array", "name": "list", "description": "array of Strings to be joined"}, {"type": "String", "name": "separator", "description": "String to be placed between each item"}], "file": "src/utilities/string_functions.js", "positive_questions": [], "line": 14, "syntax": "join(list,separator)", "example": ["\n<div>\n<code>\nvar array = [\"Hello\", \"world!\"]\nvar separator = \" \"\nvar message = join(array, separator);\ntext(message, 5, 50);\n</code>\n</div>"], "description": "Combines an array of Strings into one String, each separated by the\ncharacter(s) used for the separator parameter. To join arrays of ints or\nfloats, it's necessary to first convert them to Strings using nf() or\nnfs()."}, {"submodule": "String Functions", "return": {"type": "Array", "description": "Array of Strings found"}, "name": "match", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "str", "description": "the String to be searched"}, {"type": "String", "name": "regexp", "description": "the regexp to be used for matching"}], "file": "src/utilities/string_functions.js", "positive_questions": [], "line": 38, "syntax": "match(str,regexp)", "example": ["\n<div>\n<code>\nvar string = \"Hello p5js*!\"\nvar regexp = \"p5js\\\\*\"\nvar match = match(string, regexp);\ntext(match, 5, 50);\n</code>\n</div>"], "description": "This function is used to apply a regular expression to a piece of text,\nand return matching groups (elements found inside parentheses) as a\nString array. If there are no matches, a null value will be returned.\nIf no groups are specified in the regular expression, but the sequence\nmatches, an array of length 1 (with the matched text as the first element\nof the array) will be returned.\n\nTo use the function, first check to see if the result is null. If the\nresult is null, then the sequence did not match at all. If the sequence\ndid match, an array is returned.\n\nIf there are groups (specified by sets of parentheses) in the regular\nexpression, then the contents of each will be returned in the array.\nElement [0] of a regular expression match returns the entire matching\nstring, and the match groups start at element [1] (the first group is [1],\nthe second [2], and so on)."}, {"submodule": "String Functions", "return": {"type": "Array", "description": "2d Array of Strings found"}, "name": "matchAll", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "str", "description": "the String to be searched"}, {"type": "String", "name": "regexp", "description": "the regexp to be used for matching"}], "file": "src/utilities/string_functions.js", "positive_questions": [], "line": 74, "syntax": "matchAll(str,regexp)", "example": ["\n<div class=\"norender\">\n<code>\nvar string = \"Hello p5js*! Hello world!\"\nvar regexp = \"Hello\"\nmatchAll(string, regexp);\n</code>\n</div>\n"], "description": "This function is used to apply a regular expression to a piece of text,\nand return a list of matching groups (elements found inside parentheses)\nas a two-dimensional String array. If there are no matches, a null value\nwill be returned. If no groups are specified in the regular expression,\nbut the sequence matches, a two dimensional array is still returned, but\nthe second dimension is only of length one.\n\nTo use the function, first check to see if the result is null. If the\nresult is null, then the sequence did not match at all. If the sequence\ndid match, a 2D array is returned.\n\nIf there are groups (specified by sets of parentheses) in the regular\nexpression, then the contents of each will be returned in the array.\nAssuming a loop with counter variable i, element [i][0] of a regular\nexpression match returns the entire matching string, and the match groups\nstart at element [i][1] (the first group is [i][1], the second [i][2],\nand so on)."}, {"submodule": "String Functions", "return": {"type": "String|Array", "description": "formatted String"}, "name": "nf", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Number|Array", "name": "num", "description": "the Number to format"}, {"optional": true, "type": "Number", "name": "left", "description": "number of digits to the left of the\n                               decimal point"}, {"optional": true, "type": "Number", "name": "right", "description": "number of digits to the right of the\n                               decimal point"}], "file": "src/utilities/string_functions.js", "positive_questions": [], "line": 121, "syntax": "nf(num,[left],[right])", "example": ["\n<div>\n<code>\nfunction setup() {\n  background(200);\n  var num = 112.53106115;\n\n  noStroke();\n  fill(0);\n  textSize(14);\n  // Draw formatted numbers\n  text(nf(num, 5, 2), 10, 20);\n\n  text(nf(num, 4, 3), 10, 55);\n\n  text(nf(num, 3, 6), 10, 85);\n\n  // Draw dividing lines\n  stroke(120);\n  line(0, 30, width, 30);\n  line(0, 65, width, 65);\n}\n</code>\n</div>"], "description": "Utility function for formatting numbers into strings. There are two\nversions: one for formatting floats, and one for formatting ints.\nThe values for the digits, left, and right parameters should always\nbe positive integers."}, {"submodule": "String Functions", "return": {"type": "String|Array", "description": "formatted String"}, "name": "nfc", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Number|Array", "name": "num", "description": "the Number to format"}, {"optional": true, "type": "Number", "name": "right", "description": "number of digits to the right of the\n                                 decimal point"}], "file": "src/utilities/string_functions.js", "positive_questions": [], "line": 222, "syntax": "nfc(num,[right])", "example": ["\n<div>\n<code>\nfunction setup() {\n  background(200);\n  var num = 11253106.115;\n  var numArr = new Array(1,1,2);\n\n  noStroke();\n  fill(0);\n  textSize(12);\n\n  // Draw formatted numbers\n  text(nfc(num, 4, 2), 10, 30);\n  text(nfc(numArr, 2, 1), 10, 80);\n\n  // Draw dividing line\n  stroke(120);\n  line(0, 50, width, 50);\n}\n</code>\n</div>"], "description": "Utility function for formatting numbers into strings and placing\nappropriate commas to mark units of 1000. There are two versions: one\nfor formatting ints, and one for formatting an array of ints. The value\nfor the right parameter should always be a positive integer."}, {"submodule": "String Functions", "return": {"type": "String|Array", "description": "formatted String"}, "name": "nfp", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Number|Array", "name": "num", "description": "the Number to format"}, {"optional": true, "type": "Number", "name": "left", "description": "number of digits to the left of the decimal\n                               point"}, {"optional": true, "type": "Number", "name": "right", "description": "number of digits to the right of the\n                               decimal point"}], "file": "src/utilities/string_functions.js", "positive_questions": [], "line": 290, "syntax": "nfp(num,[left],[right])", "example": ["\n<div>\n<code>\nfunction setup() {\n  background(200);\n  var num1 = 11253106.115;\n  var num2 = -11253106.115;\n\n  noStroke();\n  fill(0);\n  textSize(12);\n\n  // Draw formatted numbers\n  text(nfp(num1, 4, 2), 10, 30);\n  text(nfp(num2, 4, 2), 10, 80);\n\n  // Draw dividing line\n  stroke(120);\n  line(0, 50, width, 50);\n}\n</code>\n</div>"], "description": "Utility function for formatting numbers into strings. Similar to nf() but\nputs a \"+\" in front of positive numbers and a \"-\" in front of negative\nnumbers. There are two versions: one for formatting floats, and one for\nformatting ints. The values for left, and right parameters\nshould always be positive integers."}, {"submodule": "String Functions", "return": {"type": "String|Array", "description": "formatted String"}, "name": "nfs", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "Number|Array", "name": "num", "description": "the Number to format"}, {"optional": true, "type": "Number", "name": "left", "description": "number of digits to the left of the decimal\n                               point"}, {"optional": true, "type": "Number", "name": "right", "description": "number of digits to the right of the\n                               decimal point"}], "file": "src/utilities/string_functions.js", "positive_questions": [], "line": 343, "syntax": "nfs(num,[left],[right])", "example": ["\n<div>\n<code>\nfunction setup() {\n  background(200);\n  var num1 = 11253106.115;\n  var num2 = -11253106.115;\n\n  noStroke();\n  fill(0);\n  textSize(12);\n  // Draw formatted numbers\n  text(nfs(num1, 4, 2), 10, 30);\n\n  text(nfs(num2, 4, 2), 10, 80);\n\n  // Draw dividing line\n  stroke(120);\n  line(0, 50, width, 50);\n}\n</code>\n</div>"], "description": "Utility function for formatting numbers into strings. Similar to nf() but\nputs a \" \" (space) in front of positive numbers and a \"-\" in front of\nnegative numbers. There are two versions: one for formatting floats, and\none for formatting ints. The values for the digits, left, and right\nparameters should always be positive integers."}, {"submodule": "String Functions", "return": {"type": "Array", "description": "Array of Strings"}, "name": "split", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "value", "description": "the String to be split"}, {"type": "String", "name": "delim", "description": "the String used to separate the data"}], "file": "src/utilities/string_functions.js", "positive_questions": [], "line": 396, "syntax": "split(value,delim)", "example": ["\n<div>\n<code>\nvar names = \"Pat,Xio,Alex\"\nvar splitString = split(names, \",\");\ntext(splitString[0], 5, 30);\ntext(splitString[1], 5, 50);\ntext(splitString[2], 5, 70);\n</code>\n</div>"], "description": "The split() function maps to String.split(), it breaks a String into\npieces using a character or string as the delimiter. The delim parameter\nspecifies the character or characters that mark the boundaries between\neach piece. A String[] array is returned that contains each of the pieces.\n\nThe splitTokens() function works in a similar fashion, except that it\nsplits using a range of characters instead of a specific character or\nsequence."}, {"submodule": "String Functions", "return": {"type": "Array", "description": "Array of Strings"}, "name": "splitTokens", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"type": "String", "name": "value", "description": "the String to be split"}, {"optional": true, "type": "String", "name": "delim", "description": "list of individual Strings that will be used as\n                         separators"}], "file": "src/utilities/string_functions.js", "positive_questions": [], "line": 425, "syntax": "splitTokens(value,[delim])", "example": ["\n<div class = \"norender\">\n<code>\nfunction setup() {\n  var myStr = \"Mango, Banana, Lime\";\n  var myStrArr = splitTokens(myStr, \",\");\n\n  print(myStrArr); // prints : [\"Mango\",\" Banana\",\" Lime\"]\n}\n</div>\n</code>"], "description": "The splitTokens() function splits a String at one or many character\ndelimiters or \"tokens.\" The delim parameter specifies the character or\ncharacters to be used as a boundary.\n\nIf no delim characters are specified, any whitespace character is used to\nsplit. Whitespace characters include tab (\\t), line feed (\\n), carriage\nreturn (\\r), form feed (\\f), and space."}, {"submodule": "String Functions", "return": {"type": "String|Array", "description": "a trimmed String or Array of Strings"}, "name": "trim", "negative_questions": [], "module": "Data", "class": "p5", "itemtype": "method", "params": [{"optional": true, "type": "String|Array", "name": "str", "description": "a String or Array of Strings to be trimmed"}], "file": "src/utilities/string_functions.js", "positive_questions": [], "line": 456, "syntax": "trim([str])", "example": ["\n<div>\n<code>\nvar string = trim(\"  No new lines\\n   \");\ntext(string +\" here\", 2, 50);\n</code>\n</div>"], "description": "Removes whitespace characters from the beginning and end of a String. In\naddition to standard whitespace characters such as space, carriage return,\nand tab, this function also removes the Unicode \"nbsp\" character."}, {"submodule": "Time & Date", "return": {"type": "Number", "description": "the current day"}, "name": "day", "negative_questions": [], "module": "Input", "class": "p5", "itemtype": "method", "file": "src/utilities/time_date.js", "positive_questions": [], "line": 12, "syntax": "day()", "example": ["\n<div>\n<code>\nvar day = day();\ntext(\"Current day: \\n\"+day, 5, 50);\n</code>\n</div>"], "description": "p5.js communicates with the clock on your computer. The day() function\nreturns the current day as a value from 1 - 31."}, {"submodule": "Time & Date", "return": {"type": "Number", "description": "the current hour"}, "name": "hour", "negative_questions": [], "module": "Input", "class": "p5", "itemtype": "method", "file": "src/utilities/time_date.js", "positive_questions": [], "line": 30, "syntax": "hour()", "example": ["\n<div>\n<code>\nvar hour = hour();\ntext(\"Current hour:\\n\"+hour, 5, 50);\n</code>\n</div>"], "description": "p5.js communicates with the clock on your computer. The hour() function\nreturns the current hour as a value from 0 - 23."}, {"submodule": "Time & Date", "return": {"type": "Number", "description": "the current minute"}, "name": "minute", "negative_questions": [], "module": "Input", "class": "p5", "itemtype": "method", "file": "src/utilities/time_date.js", "positive_questions": [], "line": 48, "syntax": "minute()", "example": ["\n<div>\n<code>\nvar minute = minute();\ntext(\"Current minute: \\n:\"+minute, 5, 50);\n</code>\n</div>"], "description": "p5.js communicates with the clock on your computer. The minute() function\nreturns the current minute as a value from 0 - 59."}, {"submodule": "Time & Date", "return": {"type": "Number", "description": "the number of milliseconds since starting the program"}, "name": "millis", "negative_questions": [], "module": "Input", "class": "p5", "itemtype": "method", "file": "src/utilities/time_date.js", "positive_questions": [], "line": 66, "syntax": "millis()", "example": ["\n<div>\n<code>\nvar millisecond = millis();\ntext(\"Milliseconds \\nrunning: \"+millisecond, 5, 50);\n</code>\n</div>"], "description": "Returns the number of milliseconds (thousandths of a second) since\nstarting the program. This information is often used for timing events and\nanimation sequences."}, {"submodule": "Time & Date", "return": {"type": "Number", "description": "the current month"}, "name": "month", "negative_questions": [], "module": "Input", "class": "p5", "itemtype": "method", "file": "src/utilities/time_date.js", "positive_questions": [], "line": 85, "syntax": "month()", "example": ["\n<div>\n<code>\nvar month = month();\ntext(\"Current month: \\n\"+month, 5, 50);\n</code>\n</div>"], "description": "p5.js communicates with the clock on your computer. The month() function\nreturns the current month as a value from 1 - 12."}, {"submodule": "Time & Date", "return": {"type": "Number", "description": "the current second"}, "name": "second", "negative_questions": [], "module": "Input", "class": "p5", "itemtype": "method", "file": "src/utilities/time_date.js", "positive_questions": [], "line": 103, "syntax": "second()", "example": ["\n<div>\n<code>\nvar second = second();\ntext(\"Current second: \\n\" +second, 5, 50);\n</code>\n</div>"], "description": "p5.js communicates with the clock on your computer. The second() function\nreturns the current second as a value from 0 - 59."}, {"submodule": "Time & Date", "return": {"type": "Number", "description": "the current year"}, "name": "year", "negative_questions": [], "module": "Input", "class": "p5", "itemtype": "method", "file": "src/utilities/time_date.js", "positive_questions": [], "line": 121, "syntax": "year()", "example": ["\n<div>\n<code>\nvar year = year();\ntext(\"Current year: \\n\" +year, 5, 50);\n</code>\n</div>"], "description": "p5.js communicates with the clock on your computer. The year() function\nreturns the current year as an integer (2014, 2015, 2016, etc)."}]}